{
  "content": "CollisionNodes are hidden by default, but they may be shown for debugging purposes:\n\npython\n\ncnodePath.show()\n\ncpp\n\ncSphere_node->show();\n\nNote\n\nBe aware that the collision algorithm has only limited awareness of scaling transforms applied to CollisionSolids. This particularly applies to non-uniform scales, ie. when the X, Y and Z components of a scale transform are not all the same. If unequal scaling is applied between a \"from\" collider and an \"into\" collider, unexpected results may occur. In general, strive to have as few scaling transforms applied to your collision solids as possible.\n\nThere are several kinds of CollisionSolids available.\n\nCollisionSphere\n\nThe sphere is the workhorse of the collision system. Spheres are the fastest primitives for any collision calculation; and the sphere calculation is particularly robust. If your object is even vaguely spherical, consider wrapping a sphere around it.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_633",
    "parent": "processed_documents/context_documents/62537003_cc9627be_collision-solids.json",
    "chunk_number": 7379
  }
}