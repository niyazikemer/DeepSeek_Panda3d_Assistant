{
  "content": "radialComponent = oNorm * dotProd\n                    # How far above?\n                    above = offsetDist - radius\n                    # Set sf accordingly\n                    sf = max(1.0 - (max(above, 0.0)/(0.2 * radius)), 0.0)\n                    # Subtract scaled radial component\n                    dPlanet -= radialComponent * (sf * sf)\n                    #dPlanet -= radialComponent\n                    # Convert back to node path space\n                    dPos.assign(planet.getMat(self.nodePath).xformVec(dPlanet))\n        # Set pos accordingly\n        self.nodePath.setPos(self.nodePath, dPos)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_113",
    "parent": "processed_documents/context_documents/60fa0dd8_DirectJoybox.json",
    "chunk_number": 1811
  }
}