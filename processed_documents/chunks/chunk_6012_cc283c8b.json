{
  "content": "inheritance\n\nrankdir=TB node [shape=box];\n\npipe -> output1; pipe -> output2; pipe -> output3;\n\noutput1 -> gsg1; output2 -> gsg2; output3 -> gsg3;\n\nThe GraphicsPipe was used to create each of the three GraphicsOutputs, of which one is a GraphicsWindow, and the remaining two are GraphicsBuffers. Each GraphicsOutput has a pointer to the GSG that will be used for rendering. Finally, the GraphicsEngine is responsible for managing all of these objects.\n\nIn the above illustration, each window and buffer has its own GSG, which is legal, although it's usually better to share the same GSG across all open windows and buffers.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_393",
    "parent": "processed_documents/context_documents/b9b6eb63_1752f959_introducing-graphics-classes.json",
    "chunk_number": 6012
  }
}