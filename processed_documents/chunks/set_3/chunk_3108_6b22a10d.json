{
  "content": "Takes an optional argument root as the start of the search for the\n        given parts. Also takes optional lod name to refine search for the\n        named parts. If root and lod are defined, we search for the given\n        root under the given lod.\n        \"\"\"\n        # check to see if we are working within an lod\n        if lodName is not None:\n            # find the named lod node\n            lodRoot = self.__LODNode.find(str(lodName))\n            if root is None:\n                # no need to look further\n                root = lodRoot\n            else:\n                # look for root under lod\n                root = lodRoot.find(\"**/\" + root)\n        else:\n            # start search from self if no root and no lod given\n            if root is None:\n                root = self\n\n        frontParts = root.findAllMatches(\"**/\" + frontPartName)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_177",
    "parent": "processed_documents/context_documents/2763abe9_Actor.json",
    "chunk_number": 3108
  }
}