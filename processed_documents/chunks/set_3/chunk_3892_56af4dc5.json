{
  "content": "Returns the number of tasks removed.\n        \"\"\"\n        tasks = self.mgr.findTasksMatching(GlobPattern(taskPattern))\n        return self.mgr.remove(tasks)\n\n    def step(self) -> None:\n        \"\"\"Invokes the task manager for one frame, and then returns.\n        Normally, this executes each task exactly once, though task\n        chains that are in sub-threads or that have frame budgets\n        might execute their tasks differently. \"\"\"\n\n        startFrameTime = self.globalClock.getRealTime()\n\n        # Replace keyboard interrupt handler during task list processing\n        # so we catch the keyboard interrupt but don't handle it until\n        # after task list processing is complete.\n        self.fKeyboardInterrupt = False\n        self.interruptCount = 0\n\n        if signal:\n            self.__prevHandler = signal.signal(signal.SIGINT, self.keyboardInterruptHandler)\n\n        try:\n            self.mgr.poll()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_210",
    "parent": "processed_documents/context_documents/3377b266_Task.json",
    "chunk_number": 3892
  }
}