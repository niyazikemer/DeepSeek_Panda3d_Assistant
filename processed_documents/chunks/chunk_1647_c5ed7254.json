{
  "content": "def scanPaths(self, paths):\n        eggs = []\n        for path in paths:\n            #abs = os.path.abspath(path)\n            self.scanPath(eggs, path)\n        return eggs\n\n    def processFiles(self, files):\n        total = 0\n        for (path, size) in files:\n            total += size\n        progress = 0\n        for (path, size) in files:\n            fn = Filename.fromOsSpecific(path)\n            cached = self.bamcache.lookup(fn, \"bam\")\n            percent = (progress * 100) / total\n            report = path\n            if self.concise:\n                report = os.path.basename(report)\n            print(\"Preprocessing Models %2d%% %s\" % (percent, report))\n            sys.stdout.flush()\n            if cached and not cached.hasData():\n                self.pandaloader.loadSync(fn, self.loaderopts)\n            gc.collect()\n            ModelPool.releaseAllModels()\n            TexturePool.releaseAllTextures()\n            progress += size",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_97",
    "parent": "processed_documents/context_documents/87756ff4_eggcacher.json",
    "chunk_number": 1647
  }
}