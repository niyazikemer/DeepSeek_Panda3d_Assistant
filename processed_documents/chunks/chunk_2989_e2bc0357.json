{
  "content": "# Make a new tp that has the right area.\n            tp = TexPlacement(l, l + tw, b, b + th)\n\n            ta = float(max(tw, th)) / float(min(tw, th))\n            if ta == aspect:\n                return tp\n\n            match = min(ta, aspect) / max(ta, aspect)\n            matches.append((match, tp))\n\n        if matches:\n            return max(matches, key=lambda match: match[0])[1]\n        return None\n\n    def findHolePieces(self, area):\n        \"\"\" Returns a list of holes whose net area sums to the given\n        area, or None if there are not enough holes. \"\"\"\n\n        # First, save the original value of self.texPlacements, since\n        # we will be modifying that during this search.\n        savedTexPlacements = copy.copy(self.texPlacements)\n        savedBitmasks = []\n        for ba in self.bitmasks:\n            savedBitmasks.append(BitArray(ba))\n\n        result = []\n\n        while area > 0:",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_172",
    "parent": "processed_documents/context_documents/7b312f5b_TexMemWatcher.json",
    "chunk_number": 2989
  }
}