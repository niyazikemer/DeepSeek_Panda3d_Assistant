{
  "content": "# Check to see if this object has an unusually large\n        # ref-count.  This usually indicates that it is some\n        # sort of global, singleton, or manager object\n        # and as such no further knowledge would be gained from\n        # traversing further up the ref tree.\n        if self.isManyRef(at, path, referrers):\n            return\n\n        while referrers:\n            ref = referrers.pop()\n            self.depth += 1\n            for x in self.stepGenerator(depth + 1, path + [ref]):\n                pass\n            self.depth -= 1\n\n    def stepGenerator(self, depth, path):\n        if self.shouldPrintStats:\n            self.printStats(path)\n\n            self.shouldPrintStats = False\n\n        at = path[-1]\n\n        # check for success\n        if self.isAtRoot(at, path):\n            self.found += 1\n            raise StopIteration\n\n        if id(at) in self.visited:\n            # don't continue down this path\n            raise StopIteration",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_279",
    "parent": "processed_documents/context_documents/358f23e5_ReferrerSearch.json",
    "chunk_number": 4815
  }
}