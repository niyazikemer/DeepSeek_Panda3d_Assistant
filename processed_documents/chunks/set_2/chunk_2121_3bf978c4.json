{
  "content": "for value in fields.values():\n            if value is not None:\n                strings.add(value.encode('utf-8'))\n\n        # Sort by length descending, allowing reuse of partial strings.\n        strings = sorted(strings, key=lambda str:-len(str))\n        string_offsets = {}\n\n        # Now add the strings to the pool, and collect the offsets relative to\n        # the beginning of the pool.\n        for string in strings:\n            # First check whether it's already in there; it could be part of\n            # a longer string.\n            offset = pool.find(string + b'\\0')\n            if offset < 0:\n                offset = len(pool)\n                pool += string + b'\\0'\n            string_offsets[string] = offset\n\n        # Now go through the modules and add them to the pool as well.  These\n        # are not 0-terminated, but we later record their sizes and names in\n        # a table after the blob header.\n        moduleList = []",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_133",
    "parent": "processed_documents/context_documents/0e1163d5_FreezeTool.json",
    "chunk_number": 2121
  }
}