{
  "content": "try:\n            file, pathname, description = self.mf.find_module(baseName, path)\n        except ImportError:\n            return None\n\n        if not self.mf._dir_exists(pathname):\n            return None\n\n        # Scan the directory, looking for .py files.\n        modules = []\n        for basename in sorted(self.mf._listdir(pathname)):\n            if basename.endswith('.py') and basename != '__init__.py':\n                modules.append(basename[:-3])\n\n        return modules\n\n    def _gatherSubmodules(self, moduleName, implicit = False, newName = None,\n                          filename = None, guess = False, fromSource = None,\n                          text = None):\n        if not newName:\n            newName = moduleName\n\n        assert moduleName.endswith('.*')\n        assert newName.endswith('.*')\n\n        mdefs = {}",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_133",
    "parent": "processed_documents/context_documents/0e1163d5_FreezeTool.json",
    "chunk_number": 2077
  }
}