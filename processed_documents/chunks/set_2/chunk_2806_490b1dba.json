{
  "content": "def finishIntervalsMatching(self, pattern):\n        ivals = self.getIntervalsMatching(pattern)\n        for ival in ivals:\n            ival.finish()\n        return len(ivals)\n\n    def pauseIntervalsMatching(self, pattern):\n        ivals = self.getIntervalsMatching(pattern)\n        for ival in ivals:\n            ival.pause()\n        return len(ivals)\n\n    def step(self):\n        # This method should be called once per frame to perform all\n        # of the per-frame processing on the active intervals.\n        # Call C++ step, then do the Python stuff.\n        CIntervalManager.step(self)\n        self.__doPythonCallbacks()\n\n    def interrupt(self):\n        # This method should be called during an emergency cleanup\n        # operation, to automatically pause or finish all active\n        # intervals tagged with autoPause or autoFinish set true.\n        # Call C++ interrupt, then do the Python stuff.\n        CIntervalManager.interrupt(self)\n        self.__doPythonCallbacks()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_160",
    "parent": "processed_documents/context_documents/493662c0_IntervalManager.json",
    "chunk_number": 2806
  }
}