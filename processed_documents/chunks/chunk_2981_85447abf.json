{
  "content": "w = max(int(w / self.quantize + 0.5), 1)\n        h = max(int(h / self.quantize + 0.5), 1)\n        self.w = w\n        self.h = h\n        self.area = self.w * self.h\n\n        # We store a bitarray for each row, for fast lookup for\n        # unallocated space on the canvas.  Each Q-unit on the row\n        # corresponds to a bit in the bitarray, where bit 0 is Q-unit\n        # 0, bit 1 is Q-unit 1, and so on.  If the bit is set, the\n        # space is occupied.\n        self.bitmasks = []\n        for i in range(self.h):\n            self.bitmasks.append(BitArray())\n\n        self.canvas.setScale(1.0 / w, 1.0, 1.0 / h)\n        self.mw.setFrame(0, w, 0, h * self.top)\n\n        # Sort the regions from largest to smallest to maximize\n        # packing effectiveness.\n        texRecords = sorted(self.texRecordsByTex.values(),\n                            key=lambda tr: (tr.tw, tr.th), reverse=True)\n\n        for tr in texRecords:\n            self.placeTexture(tr)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_172",
    "parent": "processed_documents/context_documents/7b312f5b_TexMemWatcher.json",
    "chunk_number": 2981
  }
}