{
  "content": "The document introduces collision detection, enabling objects to interact without passing through each other. It explores two methods: using special geometry (spheres, polygons) for faster, long-term solutions, and allowing collisions against all geometry for quick applications. The section details these approaches along with subtopics like solids, handlers, entries, traversers, bitmasks, rapidly moving objects, examples (pusher, event, bitmask), and 3D object interaction.\n\nCollision Detection\n\nCollision detection allows for two objects to bump into each other and react. This includes not only sending messages for events, but also to keep the objects from passing through each other. Collision detection is a very powerful tool for immersion, but it is somewhat complex.\n\nThere are two ways to go about collision detection. One is to create special collision geometry, such as spheres and polygons, to determine collisions. The other is to allow collisions against all geometry. While the first is somewhat more complex and takes more effort to implement, it is much faster to execute and is a better long-term solution. For quick-and-dirty applications, though, collision with geometry can be a fine solution.\n\nThis section of the manual will address both methods.\n\ncollision-solids collision-handlers collision-entries collision-traversers collision-bitmasks rapidly-moving-objects pusher-example event-example bitmask-example clicking-on-3d-objects",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_367",
    "parent": "processed_documents/context_documents/89819cb9_f4966be4_index.json",
    "chunk_number": 5893
  }
}