{
  "content": "The provided chunk consists of methods for handling 3D widget collision detection within a larger framework that implements various geometric and ray-based collision detection algorithms. The methods include `pickWidget`, `pick3D`, and `pickGeom3D` from the `Widget` class, which are used to perform collision queries with widgets in a 3D space using origin and direction vectors.\n\ndef pickWidget(self, targetNodePath = None, skipFlags = DG.SKIP_NONE):\n        if targetNodePath is None:\n            targetNodePath = render\n        self.collideWithWidget()\n        self.pick(targetNodePath)\n        # Determine collision entry\n        return self.findCollisionEntry(skipFlags)\n\n    def pick3D(self, targetNodePath, origin, dir):\n        # Determine ray direction based upon the mouse coordinates\n        self.collider.setOrigin(origin)\n        self.collider.setDirection(dir)\n        self.ct.traverse(targetNodePath)\n        self.sortEntries()\n\n    def pickGeom3D(self, targetNodePath = None,\n                   origin = Point3(0), dir = Vec3(0, 0, -1),\n                   skipFlags = DG.SKIP_HIDDEN | DG.SKIP_CAMERA):\n        if targetNodePath is None:\n            targetNodePath = render\n        self.collideWithGeom()\n        self.pick3D(targetNodePath, origin, dir)\n        # Determine collision entry\n        return self.findCollisionEntry(skipFlags)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_186",
    "parent": "processed_documents/context_documents/eebfe557_DirectSelection.json",
    "chunk_number": 3470
  }
}