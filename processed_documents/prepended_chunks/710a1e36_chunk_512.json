{
  "content": "The provided chunk appears within a method that handles object replacement or modification in an object editor system. The context involves reparenting child nodes, copying transformation data, updating color properties, removing old geometry, registering new geometry, and updating scene graph labels\u2014likely during object replacement or model updates. This is situated within a larger codebase for managing 3D objects, including functions like duplication, actor finding, and scene graph management.\n\nThe chunk is part of an operation that replaces or modifies an object in the scene, ensuring children are correctly reparented, transformations are preserved, visual properties are updated, and scene graph references are maintained.\n\n# reparent children\n            objNP.findAllMatches(\"=OBJRoot\").reparentTo(newobj)\n\n            # reparent to parent\n            newobj.reparentTo(objNP.getParent())\n\n            # copy transform\n            newobj.setPos(objNP.getPos())\n            newobj.setHpr(objNP.getHpr())\n            newobj.setScale(objNP.getScale())\n\n            # copy RGBA data\n            self.updateObjectColor(objRGBA[0], objRGBA[1], objRGBA[2], objRGBA[3], newobj)\n\n            # delete old geom\n            del self.npIndex[NodePath(objNP)]\n            objNP.removeNode()\n\n            # register new geom\n            obj[OG.OBJ_NP] = newobj\n            obj[OG.OBJ_MODEL] = model\n            self.npIndex[NodePath(newobj)] = obj[OG.OBJ_UID]\n\n            # update scene graph label\n            self.editor.ui.sceneGraphUI.changeLabel(obj[OG.OBJ_UID], newobj.getName())",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_34",
    "parent": "processed_documents/context_documents/a86148df_ObjectMgrBase.json",
    "chunk_number": 512
  }
}