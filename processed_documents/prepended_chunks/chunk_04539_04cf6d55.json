{
  "content": "The chunk is part of a class managing jobs for leak detection in containers, scheduling periodic checks with increasing delays based on scaling factors like Fibonacci or 1.5 multipliers. It includes methods to find container paths by name for debugging or monitoring purposes.\n\n</context>\n\nThis code chunk is part of a job management system focused on detecting leaks within containerized environments. The `getPathsToContainersNamed` method facilitates the identification and retrieval of specific containers by their names, likely aiding in monitoring or debugging processes. Meanwhile, `_scheduleNextLeakCheck` handles the scheduling of periodic leak detection tasks with delays that increase based on defined scaling strategies such as Fibonacci sequences or multipliers like 1.5, ensuring efficient resource utilization while periodically checking for potential leaks.\n\n</context>\n\ndef getPathsToContainersNamed(self, name, on, doneCallback=None):\n        j =  FPTObjsNamed(name, self, on, doneCallback)\n        jobMgr.add(j)\n        return j\n\n    def _scheduleNextLeakCheck(self):\n        taskMgr.doMethodLater(self._nextCheckDelay, self._checkForLeaks,\n                              self._getCheckTaskName())\n        # delay between checks\n        # fib:    1   1   2   3   5   8   13   21   34   55   89\n        # * 2.:   1   2   4   8  16  32   64  128  256  512 1024\n        # * 1.5:  1 1.5 2.3 3.4 5.1 7.6 11.4 17.1 25.6 38.4 57.7\n        #\n        # delay from job start\n        # fib:    1   2    4    7   12   20    33    54    88    143    232\n        # * 2.:   1   3    7   15   31   63   127   255   511   1023   2047\n        # * 1.5:  1 2.5 4.75  8.1 13.2 20.8  32.2  49.3  74.9  113.3    171\n        self._nextCheckDelay = self._nextCheckDelay * self._checkDelayScale",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_256",
    "parent": "processed_documents/context_documents/e2a31346_ContainerLeakDetector.json",
    "chunk_number": 4539
  }
}