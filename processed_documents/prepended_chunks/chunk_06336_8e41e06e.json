{
  "content": "To create a node from a string containing an .egg source in Panda3D:\n\n1. Import required modules: `StringStream`, `EggData`, and `loadEggData` from `panda3d.core`.\n2. Create a `StringStream` object with your .egg source string.\n3. Read this stream into an `EggData` object.\n4. Convert the `EggData` object to a `NodePath` using `loadEggData`.\n\nExample code:\n\n```python\nfrom panda3d.core import StringStream, EggData, loadEggData\n\ndef create_node_from_egg_string(egg_text):\n    egg_stream = StringStream(egg_text)\n    egg_data = EggData()\n    egg_data.read(egg_stream)\n    node_path = NodePath(loadEggData(egg_data))\n    return node_path\n```\n\nOptimized bytecode (.pyo) is not generated by default, but you may tell the interpreter to generate them instead of the regular .pyc. When '-O' is added to the command, all assert statements are removed before compiling. When '-OO' is added instead of '-O', all __doc__ strings are removed as well before compiling. Note that these optimizations currently do not significantly improve performance. The following illustrates how to do this (replace python with ppython on Windows):\n\npython -O file.py\npython -OO file.py\n\nNote: if you wish to run the Python interpreter without generating compiled bytecode files at all, then add '-B' to the command. The following illustrates how to do this (replace python with ppython on Windows):\n\npython -B file.py\n\nWhy are my animations/intervals sometimes skipped when I run something heavy on the CPU before playing them?\n\nIf you'll run this example code you might not see the position interval.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_459",
    "parent": "processed_documents/context_documents/ee381fc4_01b9b4da_faq.json",
    "chunk_number": 6336
  }
}