{
  "content": "The code chunk contains file operation methods (`write()`, `flush()`, `fileno()`, etc.) within a Python class designed for log management, enabling automatic log rotation based on time and size constraints.\n\ndef write(self, data: str) -> int | None:\n        \"\"\"\n        Write the data to either the current log or a new one,\n        depending on the return of shouldRotate() and whether\n        the new file can be opened.\n        \"\"\"\n        if self.shouldRotate():\n            self.rotate()\n        if hasattr(self, \"file\"):\n            r = self.file.write(data)\n            self.file.flush()\n            return r\n        return None\n\n    def flush(self) -> None:\n        return self.file.flush()\n\n    def fileno(self) -> int:\n        return self.file.fileno()\n\n    def isatty(self) -> bool:\n        return self.file.isatty()\n\n    def __next__(self):\n        return next(self.file)\n    next = __next__\n\n    def read(self, size):\n        return self.file.read(size)\n\n    def readline(self, size):\n        return self.file.readline(size)\n\n    def readlines(self, sizehint):\n        return self.file.readlines(sizehint)\n\n    def xreadlines(self):\n        return self.file.xreadlines()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_102",
    "parent": "processed_documents/context_documents/f7306926_RotatingLog.json",
    "chunk_number": 1666
  }
}