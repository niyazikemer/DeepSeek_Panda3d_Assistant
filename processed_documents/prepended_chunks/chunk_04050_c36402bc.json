{
  "content": "The `handleAvatarControls` method is a core function of an avatar control system, responsible for managing user input (keyboard and mouse) to update the avatar's movement, rotation, jumping, and animations. It interacts with physics and collision detection systems to ensure realistic character behavior. This method is called periodically by the task manager to handle real-time avatar controls.\n\ndef handleAvatarControls(self, task):\n        \"\"\"\n        Check on the arrow keys and update the avatar.\n        \"\"\"\n        if __debug__:\n            if self.wantDebugIndicator:\n                onScreenDebug.append(\"localAvatar pos = %s\\n\"%(base.localAvatar.getPos().pPrintValues(),))\n                onScreenDebug.append(\"localAvatar h = % 10.4f\\n\"%(base.localAvatar.getH(),))\n                onScreenDebug.append(\"localAvatar anim = %s\\n\"%(base.localAvatar.animFSM.getCurrentState().getName(),))\n        #assert self.debugPrint(\"handleAvatarControls(task=%s)\"%(task,))\n        physObject=self.actorNode.getPhysicsObject()\n        #rotAvatarToPhys=Mat3.rotateMatNormaxis(-self.avatarNodePath.getH(), Vec3.up())\n        #rotPhysToAvatar=Mat3.rotateMatNormaxis(self.avatarNodePath.getH(), Vec3.up())\n        contact=self.actorNode.getContactVector()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_225",
    "parent": "processed_documents/context_documents/29172b8e_PhysicsWalker.json",
    "chunk_number": 4050
  }
}