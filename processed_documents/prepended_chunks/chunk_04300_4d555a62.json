{
  "content": "This code snippet implements an `irisIn` transition effect within a visual effects system, allowing developers to create a dynamic iris in animation by scaling a polygon on the `aspect2d` plane over time. The method uses asynchronous futures (`AsyncFuture`) for handling non-blocking operations and integrates seamlessly with other transition effects like fade-in/out, letterboxing, and similar visual transitions commonly used in graphical user interfaces or game development environments.\n\nif finishIval:\n            transitionIval.append(finishIval)\n        return transitionIval\n\n    def irisIn(self, t=0.5, finishIval=None, blendType = 'noBlend'):\n        \"\"\"\n        Play an iris in transition over t seconds.\n        Places a polygon on the aspect2d plane then lerps the scale\n        of the iris polygon up so it looks like we iris in. When the\n        scale lerp is finished, it parents the iris polygon to hidden.\n        \"\"\"\n        if t == 0:\n            self.iris.detachNode()\n            fut = AsyncFuture()\n            fut.setResult(None)\n            return fut\n        else:\n            self.transitionIval = self.getIrisInIval(t, finishIval, blendType)\n            self.__transitionFuture = AsyncFuture()\n            self.transitionIval.start()\n            return self.__transitionFuture",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_244",
    "parent": "processed_documents/context_documents/04f671e4_Transitions.json",
    "chunk_number": 4300
  }
}