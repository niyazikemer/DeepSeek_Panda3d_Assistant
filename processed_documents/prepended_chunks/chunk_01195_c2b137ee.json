{
  "content": "The `playbackTask` function is part of a class that manages an animation or simulation playback system. The function handles the advancement of time during playback, adjusting based on the playback speed factor (`playbackSF`). It interacts with the GUI to update the current time display and stops playback under specific conditions, such as reaching the end of a non-looping animation or surpassing a refine record stop point. This method is crucial for controlling the flow and timing during playback, ensuring smooth execution and proper handling of edge cases like loop termination and playback speed adjustments.\n\n**Context:**\n\nThe `playbackTask` function is situated within a class responsible for managing the playback of recorded animations or simulations, particularly focusing on camera movements or similar time-dependent data. The surrounding code includes methods for setting up GUI elements, managing display regions and cameras, handling recording states, and controlling playback through widgets like time sliders. This chunk implements the core logic for advancing time during playback, stopping when necessary, and updating the UI accordingly.\n\ndef playbackTask(self, state):\n        time = ClockObject.getGlobalClock().getFrameTime()\n        dTime = self.playbackSF * (time - state.lastTime)\n        state.lastTime = time\n        if self.loopPlayback:\n            cTime = (state.currentTime + dTime) % self.maxT\n        else:\n            cTime = state.currentTime + dTime\n        # Stop task if not looping and at end of curve\n        # Or if refining curve and past recordStop\n        if self.recordingType.get() == 'Refine' and cTime > self.recordStop:\n            # Go to recordStop\n            self.getWidget('Playback', 'Time').set(self.recordStop)\n            # Then stop playback\n            self.stopPlayback()\n            # Also kill record task\n            self.toggleRecordVar()\n            return Task.done\n        elif self.loopPlayback == 0 and cTime > self.maxT:\n            # Go to maxT\n            self.getWidget('Playback', 'Time').set(self.maxT)\n            # Then stop playback\n            self.stopPlayback()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_65",
    "parent": "processed_documents/context_documents/78026bc9_MopathRecorder.json",
    "chunk_number": 1195
  }
}