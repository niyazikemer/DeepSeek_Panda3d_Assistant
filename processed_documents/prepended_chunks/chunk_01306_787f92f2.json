{
  "content": "The code chunk belongs to the `ForceGroup` class within the `panda3d.core` module. This class manages a collection of forces applied to objects within a scene graph node. The included methods facilitate access to the associated node, its path, and provide list-like operations for managing the group's forces.\n\n```python\nclass ForceGroup:\n    \"\"\"\n    Manages a collection of forces affecting an object within a scene graph node.\n    Provides utilities for accessing the node, navigating its path, and handling\n    the force collection with list-like operations.\n    \"\"\"\n\n    def __init__(self):\n        # Initializes the node and associated forces.\n\n    def addForce(self, force):\n        \"\"\"\n        Adds a new force to the group.\n        \n        :param force: The force to be added.\n        \"\"\"\n        self.node.addForce(force)\n\n    # Other methods for managing forces...\n\n    def getNode(self):\n        \"\"\"Returns the node associated with this ForceGroup.\"\"\"\n        return self.node\n\n    def getNodePath(self):\n        \"\"\"Returns the node path of the associated node.\"\"\"\n        return self.node.getPath()\n\n    def __getitem__(self, index):\n        \"\"\"\n        Allows access to forces by index.\n        \n        :param index: Index of the force to retrieve.\n        :return: The force at the specified index.\n        :raises IndexError: If the index is out of bounds.\n        \"\"\"\n        num_forces = self.node.getNumForces()\n        if index < 0 or index >= num_forces:\n            raise IndexError(\"ForceGroup index out of range.\")\n        return self.node.getForce(index)\n\n    def __len__(self):\n        \"\"\"Returns the number of forces in the group.\"\"\"\n        return self.node.getNumForces()\n\n    def asList(self):\n        \"\"\"\n        Converts the collection of forces into a list.\n        \n        :return: A list containing all forces in the group.\n        \"\"\"\n        force_list = []\n        for i in range(len(self)):\n            force_list.append(self[i])\n        return force_list\n```\n\ndef getNode(self):\n        return self.node\n\n    def getNodePath(self):\n        return self.nodePath\n\n    # Utility functions\n    def __getitem__(self, index):\n        numForces = self.node.getNumForces()\n        if index < 0 or index >= numForces:\n            raise IndexError\n        return self.node.getForce(index)\n\n    def __len__(self):\n        return self.node.getNumForces()\n\n    def asList(self):\n        l = []\n        for i in range(self.node.getNumForces()):\n            l.append(self.node.getForce(i))\n        return l",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_72",
    "parent": "processed_documents/context_documents/c074401f_ForceGroup.json",
    "chunk_number": 1306
  }
}