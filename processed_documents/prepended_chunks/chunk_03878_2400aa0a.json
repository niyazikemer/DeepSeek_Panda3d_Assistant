{
  "content": "The provided code chunk introduces three new methods (`getAllTasks`, `getTasks`, and `getDoLaters`) within a Python class (likely `TaskManager` or similar) designed to manage asynchronous tasks. These methods are part of a larger codebase that handles task management, event handling, and possibly performance optimizations for real-time applications like games or simulations.\n\nThe chunk is situated in the context of a class that provides functionality for managing tasks, including adding, removing, stepping through, and yielding tasks. The `getAllTasks` method returns all tasks (active and sleeping), while `getTasks` returns only active tasks and `getDoLaters` returns sleeping tasks. These methods are intended to provide introspection into the task management system, allowing developers to inspect the state of tasks being managed.\n\nThe chunk appears in a section of code that includes other task management functionality, such as adding tasks, removing tasks, stepping through tasks, and handling frame time management. The methods in the chunk would be useful for debugging, profiling, or monitoring the state of tasks within the system.\n\nIn the broader context of the document, this chunk is part of a class that likely serves as a central hub for managing asynchronous operations, with additional features like reference counting checks (as seen in the `checkLeak` function), task scheduling, and potentially performance optimizations. The methods introduced in the chunk are designed to provide developers with tools to understand and control the flow of tasks within their application.\n\nThe context is further enriched by the presence of other methods related to task management, such as `addTask`, `removeTask`, `step`, and `doYield`, which together form a comprehensive system for handling asynchronous operations efficiently. The addition of these three new methods enhances the introspection capabilities of the task manager, allowing developers to gain deeper insights into how their tasks are being handled.\n\nIn summary, the provided code chunk is part of a robust task management system within a Python application, designed to handle asynchronous operations with features like task scheduling, reference counting, and now enhanced introspection through the addition of methods to retrieve lists of tasks.\n\ndef getAllTasks(self) -> list[AsyncTask]:\n        \"\"\"Returns list of all tasks, active and sleeping, in\n        arbitrary order. \"\"\"\n        return list(self.mgr.getTasks())\n\n    def getTasks(self) -> list[AsyncTask]:\n        \"\"\"Returns list of all active tasks in arbitrary order. \"\"\"\n        return list(self.mgr.getActiveTasks())\n\n    def getDoLaters(self) -> list[AsyncTask]:\n        \"\"\"Returns list of all sleeping tasks in arbitrary order. \"\"\"\n        return list(self.mgr.getSleepingTasks())",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_210",
    "parent": "processed_documents/context_documents/3377b266_Task.json",
    "chunk_number": 3878
  }
}