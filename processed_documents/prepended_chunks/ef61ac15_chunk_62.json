{
  "content": "This code chunk is part of a function or method responsible for resolving and processing type information within the Sphinx documentation generation framework. Specifically, it handles type lookups for both C++ (`cpp`) and Python (`py`) domains, determining the correct type name and its associated domain-specific attributes (e.g., `type`, `enum`, `struct`, etc.). This functionality is critical for ensuring accurate cross-references and documentation output when generating API references for code written in these languages.\n\nitype = idb.lookup_type(modname, search)\n        if itype:\n            # Grab the original type name.\n            if domain == 'cpp':\n                type_name = interrogate_type_scoped_name(itype)\n                if interrogate_type_is_typedef(itype):\n                    return ('type', type_name)\n                elif interrogate_type_is_enum(itype):\n                    return ('enum', type_name)\n                elif interrogate_type_is_struct(itype):\n                    return ('struct', type_name)\n                elif interrogate_type_is_class(itype):\n                    return ('class', type_name)\n                elif interrogate_type_is_union(itype):\n                    return ('union', type_name)\n            elif domain == 'py':\n                type_name = idb.get_type_name(itype, mangle=False, scoped=True)\n                prefix = interrogate_type_module_name(itype)\n                if prefix:\n                    prefix += '.'",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_4",
    "parent": "processed_documents/context_documents/5d34b79e_f7df0e75_6676e524_conf.json",
    "chunk_number": 62
  }
}