{
  "content": "The provided code chunk is part of a class (likely `MemoryExplorer`) designed to analyze and visualize memory usage of 3D objects in a Panda3D scene. The methods:\n\n1. `makeList()`: Creates hierarchical memory analysis items for both 3D (`render`) and 2D (`render2d`) nodes.\n2. `buildList()`: Recursively populates the hierarchy by examining each node's children.\n3. `analyze()`: Calculates vertex bytes, number of faces, and texture memory usage for each node in the hierarchy.\n4. `refresh()`: Rebuilds and re-analyzes the scene to update memory statistics.\n\nThis code is used to generate a memory profile of the 3D scene graph, enabling visualization of geometry and texture memory consumption.\n\nfor child in item.getChildren():\n                self.addChildCtrl(child, item.getVertexBytes())\n\n            self.setTitle(item.getPathName(), item.getVertexBytes())\n\n    #--------------------------------------------------------------------------\n    # List & Analyze\n    #--------------------------------------------------------------------------\n    def makeList(self):\n        self.renderItem = MemoryExplorerItem(None, base.render)\n        self.buildList(self.renderItem)\n\n        self.render2dItem = MemoryExplorerItem(None, base.render2d)\n        self.buildList(self.render2dItem)\n\n    def buildList(self, parentItem):\n        for nodePath in parentItem.nodePath.getChildren():\n            item = MemoryExplorerItem(parentItem, nodePath)\n            parentItem.addChild(item)\n            self.buildList(item)\n\n    def analyze(self):\n        self.renderItem.analyze()\n        self.render2dItem.analyze()\n\n    def refresh(self):\n        self.makeList()\n        self.analyze()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_194",
    "parent": "processed_documents/context_documents/1e329885_MemoryExplorer.json",
    "chunk_number": 3603
  }
}