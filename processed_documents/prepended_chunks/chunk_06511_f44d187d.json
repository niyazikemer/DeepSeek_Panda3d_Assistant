{
  "content": "The given code chunk is situated within a section discussing how to create and manage asynchronous tasks using `GenericAsyncTask` in C++. The context explains the process of instantiating a task with a specific name and function, adding it to the task manager, handling arbitrary arguments via parameters, allowing multiple independent tasks with the same name, and provides methods to remove tasks either by name or reference in both Python and C++ environments. This section is crucial for understanding basic task creation and management operations.\n\nPT(GenericAsyncTask) task;\ntask = new GenericAsyncTask(\"MyTaskName\", &example_task, nullptr);\n\ntask_mgr->add(task);\n\nYou can add an arbitrary argument to the call through the third parameter.\n\nAlthough normally each task is given a unique name, you may also create multiple different tasks with the same name. This can be convenient for locating or removing many task functions at the same time. Each task remains independent of the others, even if they have the same name; this means that a task function returning a \"done\" status will not affect any other task functions.\n\npython\n\nTo remove the task and stop it from executing, call taskMgr.remove(). You can pass in either the name of the task, or the task object (which was returned by taskMgr.add(), above).\n\ntaskMgr.remove('MyTaskName')\n\ncpp\n\nTo remove the task and stop it from executing, you can call task->remove().\n\ntask->remove();",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_499",
    "parent": "processed_documents/context_documents/6c715f42_5c9f8c24_tasks.json",
    "chunk_number": 6511
  }
}