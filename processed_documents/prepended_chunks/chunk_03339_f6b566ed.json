{
  "content": "The new code chunk introduces two methods, `centerCamNow` and `centerCamIn`, which handle centering the camera on a specific marker's position. These functions are designed to stop any ongoing camera manipulation tasks, record an undo point, calculate the necessary position relative to the marker, and then smoothly animate the camera to that position. The `centerCamNow` method immediately centers the view by calling `centerCamIn` with a duration of 0, while `centerCamIn` allows for a specified animation time. This functionality complements existing methods in the document that manage camera positioning relative to selected objects or markers, providing additional tools for quickly re-centering the view during scene navigation or object manipulation.\n\n**Context:**  \nThe new functions provide utility for centering the camera's view on a specific marker's position, either immediately or over an animated interval. They are situated alongside other camera and scene manipulation methods that manage tasks such as maintaining selected objects relative to a widget, moving views to fit selections, or repositioning markers based on user input. These functions enhance the ability to quickly adjust the viewport to focus on a specific point of interest within the 3D environment.\n\n```python\n\"\"\"\nThe following functions allow for centering the camera's view on a specific marker \neither immediately or over an animated interval. They complement existing camera \nmanipulation methods, providing tools to quickly re-center the view during scene \nnavigation or object interaction.\n\"\"\"\n\ndef centerCamNow(self):\n    self.centerCamIn(0.)\n\ndef centerCamIn(self, t):\n    self.__stopManipulateCamera()\n     # Record undo point\n    direct  = ShowBaseGlobal.direct\n    direct.pushUndo([direct.camera])\n     # Determine marker location\n    markerToCam  = self.coaMarker.getPos(direct.camera)\n    dist  = Vec3(markerToCam  - DG.ZERO_POINT).length()\n    scaledCenterVec  = Y_AXIS * dist\n    delta  = markerToCam  - scaledCenterVec\n    self.camManipRef.setPosHpr(direct.camera, Point3(0), Point3(0))\n    ival  = direct.camera.posInterval(CAM_MOVE_DURATION,\n                                     Point3(delta),\n                                     other=self.camManipRef,\n                                     blendType='easeInOut')\n    ival  = Sequence(ival, Func(self.updateCoaMarkerSizeOnDeath),\n                     name  = 'manipulateCamera')\n    self.__startManipulateCamera(ival  = ival)\n```\n\ndef centerCamNow(self):\n        self.centerCamIn(0.)\n\n    def centerCamIn(self, t):\n        self.__stopManipulateCamera()\n        # Record undo point\n        direct = ShowBaseGlobal.direct\n        direct.pushUndo([direct.camera])\n        # Determine marker location\n        markerToCam = self.coaMarker.getPos(direct.camera)\n        dist = Vec3(markerToCam - DG.ZERO_POINT).length()\n        scaledCenterVec = Y_AXIS * dist\n        delta = markerToCam - scaledCenterVec\n        self.camManipRef.setPosHpr(direct.camera, Point3(0), Point3(0))\n        ival = direct.camera.posInterval(CAM_MOVE_DURATION,\n                                         Point3(delta),\n                                         other=self.camManipRef,\n                                         blendType='easeInOut')\n        ival = Sequence(ival, Func(self.updateCoaMarkerSizeOnDeath),\n                        name = 'manipulateCamera')\n        self.__startManipulateCamera(ival = ival)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_181",
    "parent": "processed_documents/context_documents/b7d65bc2_DirectCameraControl.json",
    "chunk_number": 3339
  }
}