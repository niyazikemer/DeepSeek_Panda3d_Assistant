{
  "content": "The provided code chunk is part of an event handling system that maps various camera controls to user inputs. These include predefined views (spawnMoveToView), swinging the camera around widgets, zooming in/out, and managing tasks related to camera manipulation. The events are set up using self.accept() calls in the enableMouseFly method, allowing users to trigger specific camera behaviors through key presses or commands.\n\n</context>\n\n['DIRECT-spwanMoveToView-4', self.spawnMoveToView, 4],\n            ['DIRECT-spwanMoveToView-5', self.spawnMoveToView, 5],\n            ['DIRECT-spwanMoveToView-6', self.spawnMoveToView, 6],\n            ['DIRECT-spwanMoveToView-7', self.spawnMoveToView, 7],\n            ['DIRECT-spwanMoveToView-8', self.spawnMoveToView, 8],\n            ['DIRECT-swingCamAboutWidget-0', self.swingCamAboutWidget, -90.0, t],\n            ['DIRECT-swingCamAboutWidget-1', self.swingCamAboutWidget,  90.0, t],\n            ['DIRECT-removeManipulateCameraTask', self.removeManipulateCameraTask],\n            ['DIRECT-zoomInCam', self.zoomCam, 0.5, t],\n            ['DIRECT-zoomOutCam', self.zoomCam, -2.0, t],\n        ]\n        # set this to true to prevent the camera from rolling\n        self.lockRoll = False\n        # NIK - flag to determine whether to use maya camera controls\n        self.useMayaCamControls = 0\n        self.altDown = 0\n        self.perspCollPlane = None # [gjeon] used for new LE",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_181",
    "parent": "processed_documents/context_documents/b7d65bc2_DirectCameraControl.json",
    "chunk_number": 3303
  }
}