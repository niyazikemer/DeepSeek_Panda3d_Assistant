{
  "content": "This code chunk is part of a class designed to manage parent-child relationships in a large grid system. It includes static methods to track and reuse shared \"cell origin\" nodes efficiently across multiple instances, ensuring optimal memory usage and performance when handling large grids that exceed 16-bit coordinate limits.\n\n# this lets GridParents share CellOrigins\n    GridZone2CellOrigin: dict[tuple, NodePath] = {}\n    GridZone2count: dict[tuple, int] = {}\n    @staticmethod\n    def getCellOrigin(grid, zoneId):\n        tup = (grid, zoneId)\n        if tup not in GridParent.GridZone2count:\n            GridParent.GridZone2count[tup] = 0\n            # For readability when debugging, append the zone to the name\n            GridParent.GridZone2CellOrigin[tup] = grid.attachNewNode(\"cellOrigin-%s\" % zoneId)\n            # Get grid cell origin\n            cellPos = grid.getZoneCellOrigin(zoneId)\n            # Set the gridNode's position\n            GridParent.GridZone2CellOrigin[tup].setPos(*cellPos)\n        GridParent.GridZone2count[tup] += 1\n        return GridParent.GridZone2CellOrigin[tup]\n    @staticmethod\n    def releaseCellOrigin(grid, zoneId):\n        tup = (grid, zoneId)\n        GridParent.GridZone2count[tup] -= 1\n        if GridParent.GridZone2count[tup] == 0:",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_322",
    "parent": "processed_documents/context_documents/ac8cc70f_GridParent.json",
    "chunk_number": 5539
  }
}