{
  "content": "This code chunk contains several methods related to managing and retrieving container objects within a system designed to detect and prevent memory leaks. The `getContainerByIdGen` and `getContainerNameByIdGen` methods are generator functions that provide lazy evaluation of containers and their string representations, respectively. The `getContainerById` and `getContainerNameById` methods iterate over these generators to return concrete results or default values if the container ID is not found. The `removeContainerById` method safely removes a container by its ID from the system. Finally, the `run` method initializes monitoring tasks for detecting leaks and pruning old object references, which are critical for maintaining efficient memory usage.\n\ndef getContainerByIdGen(self, id, **kwArgs):\n        # return a generator to look up a container\n        return self._id2ref[id].getContainerGen(**kwArgs)\n\n    def getContainerById(self, id):\n        for result in self._id2ref[id].getContainerGen():\n            pass\n        return result\n\n    def getContainerNameByIdGen(self, id, **kwArgs):\n        return self._id2ref[id].getEvalStrGen(**kwArgs)\n\n    def getContainerNameById(self, id):\n        if id in self._id2ref:\n            return repr(self._id2ref[id])\n        return '<unknown container>'\n\n    def removeContainerById(self, id):\n        if id in self._id2ref:\n            self._id2ref[id].destroy()\n            del self._id2ref[id]\n\n    def run(self):\n        # start looking for containers\n        self._findContainersJob = FindContainers(\n            '%s-findContainers' % self.getJobName(), self)\n        jobMgr.add(self._findContainersJob)\n\n        self._scheduleNextLeakCheck()\n        self._scheduleNextPruning()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_256",
    "parent": "processed_documents/context_documents/e2a31346_ContainerLeakDetector.json",
    "chunk_number": 4537
  }
}