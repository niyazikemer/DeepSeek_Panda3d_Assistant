{
  "content": "The chunk defines custom state transition filters (`filterYellow` and `filterGreen`) in an FSM class, illustrating how optional filter methods can be implemented to handle specific state transitions. The context explains that these filters determine allowed state changes and integrate with the default filtering mechanism for unexpected requests.\n\ndef filterYellow(self, request, args):\n            if request in ['Red']:\n                return (request,) + args\n            return None\n\n        def filterGreen(self, request, args):\n            if request in ['Yellow']:\n                return (request,) + args\n            return None\n\n    As above, the filterState() functions are optional.  If any is\n    omitted, the defaultFilter() method is called instead.  A standard\n    implementation of defaultFilter() is provided, which may be\n    overridden in a derived class to change the behavior on an\n    unexpected transition.\n\n    If self.defaultTransitions is left unassigned, then the standard\n    implementation of defaultFilter() will return None for any\n    lowercase transition name and allow any uppercase transition name\n    (this assumes that an uppercase name is a request to go directly\n    to a particular state by name).",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_144",
    "parent": "processed_documents/context_documents/4baea650_FSM.json",
    "chunk_number": 2627
  }
}