{
  "content": "This chunk is part of a class that handles force fields or particle systems, specifically providing functionality to print and document force parameters. The `printParams` method writes out configuration details for linear and angular forces, including their properties like amplitude, radius, falloff type, and vector masks. It's used to generate readable parameter documentation for simulation setups.\n\ndef printParams(self, file = sys.stdout, targ = 'self'):\n        file.write('# Force parameters\\n')\n        for i in range(self.node.getNumForces()):\n            f = self.node.getForce(i)\n            fname = 'force%d' % i\n            if isinstance(f, LinearForce):\n                amplitude = f.getAmplitude()\n                massDependent = f.getMassDependent()\n                if isinstance(f, LinearCylinderVortexForce):\n                    file.write(fname + ' = LinearCylinderVortexForce(%.4f, %.4f, %.4f, %.4f, %d)\\n' % (f.getRadius(), f.getLength(), f.getCoef(), amplitude, massDependent))\n                elif isinstance(f, LinearDistanceForce):\n                    radius = f.getRadius()\n                    falloffType = f.getFalloffType()\n                    ftype = 'FTONEOVERR'\n                    if falloffType == LinearDistanceForce.FTONEOVERR:\n                        ftype = 'FTONEOVERR'\n                    elif falloffType == LinearDistanceForce.FTONEOVERRSQUARED:",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_72",
    "parent": "processed_documents/context_documents/c074401f_ForceGroup.json",
    "chunk_number": 1307
  }
}