{
  "content": "This section provides an overview of matrix representation in Panda3D, addressing common questions about storage formats. It introduces the concept that there are four possible ways to represent matrices due to independent choices in storage and typesetting orders. The section aims to clarify which format Panda uses by first explaining the problem of matrix representation.\n\n```python\n\"\"\"\nThis section explains the different ways matrices can be represented in Panda3D,\nfocusing on whether they're stored in row-major or column-major format.\nIt clarifies that there are four possible representations due to varying storage and typesetting choices,\nand it identifies which specific method Panda employs.\nThe content starts by addressing a common question about matrix storage formats\nand proceeds to explain the underlying concepts and Panda's approach.\n\"\"\"\n```\n\nMatrix Representation\n\nPeriodically, the question arises: does Panda store matrices in column-major or row-major format? Unfortunately, people who ask that question often fail to realize that there are four ways to represent matrices, two of which are called \"column major,\" and two of which are called \"row major.\" So the answer to the question is not very useful. This section explains the four possible ways to represent matrices, and then explains which one panda uses.\n\nThe Problem\n\nIn graphics, matrices are mainly used to transform vertices. So one way to write a matrix is to write the four transform equations that it represents. Assuming that the purpose of a matrix is to transform an input-vector $\\begin{pmatrix}x_i&y_i&z_i&w_i\\end{pmatrix}$ into an output vector $\\begin{pmatrix}x_o&y_o&z_o&w_o\\end{pmatrix}$, the four equations are:",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_380",
    "parent": "processed_documents/context_documents/b47f4c51_26b6fb2e_matrix-representation.json",
    "chunk_number": 5956
  }
}