{
  "content": "The chunk contains two methods: `get()` and `mouseDown()`. \n\n- **`get()`**: This method retrieves the current value of the floater. It's a straightforward accessor that returns the value stored in the instance variable `self.value`.\n\n- **`mouseDown()`**: This is an event handler for when the mouse button is pressed on the floater widget. It:\n  - Sets the widget's relief to `SUNKEN`, indicating it is active.\n  - Executes any pre-defined callback (`preCallback`) if set.\n  - Initializes the velocity scale factor (`velocitySF`).\n  - Adds a task to the task manager (`taskMgr.add()`) for continuous updates, starting with the current frame time.\n\nThe methods are part of a class implementing a graphical user interface (GUI) element designed for real-time interaction, such as adjusting values through mouse movements. The `mouseDown()` method sets up initial conditions for subsequent interactions, while `get()` provides access to the widget's current state.\n\ndef get(self):\n        \"\"\"\n        self.get()\n        Get current floater value\n        \"\"\"\n        return self.value\n\n    ## Canvas callback functions\n    # Floater velocity controller\n    def mouseDown(self, event):\n        \"\"\" Begin mouse interaction \"\"\"\n        # Exectute user redefinable callback function (if any)\n        self['relief'] = tk.SUNKEN\n        if self['preCallback']:\n            self['preCallback'](*self['callbackData'])\n        self.velocitySF = 0.0\n        self.updateTask = taskMgr.add(self.updateFloaterTask,\n                                        'updateFloater')\n        self.updateTask.lastTime = ClockObject.getGlobalClock().getFrameTime()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_195",
    "parent": "processed_documents/context_documents/1702bab6_Floater.json",
    "chunk_number": 3617
  }
}