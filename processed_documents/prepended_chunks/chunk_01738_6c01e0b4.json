{
  "content": "The chunk introduces two new methods: `readHeader()` for parsing datagram headers and extracting packet number and type, and `makeCamOffsetDatagram()` for creating camera offset messages in a cluster system. These methods expand the functionality of an existing class that manages communication between distributed processes, enabling support for camera offset data transmission alongside other cluster operations like command strings, time synchronization, and process coordination.\n\ndef readHeader(self, datagram):\n        dgi = PyDatagramIterator(datagram)\n        number = dgi.getUint32()\n        dtype = dgi.getUint8()\n        self.notify.debug(\"Packet %d type %d received\" % (number, dtype))\n        return (dgi, dtype)\n\n    def makeCamOffsetDatagram(self, xyz, hpr):\n        datagram = PyDatagram()\n        datagram.addUint32(self.packetNumber)\n        self.packetNumber = self.packetNumber + 1\n        datagram.addUint8(CLUSTER_CAM_OFFSET)\n        datagram.addFloat32(xyz[0])\n        datagram.addFloat32(xyz[1])\n        datagram.addFloat32(xyz[2])\n        datagram.addFloat32(hpr[0])\n        datagram.addFloat32(hpr[1])\n        datagram.addFloat32(hpr[2])\n        return datagram",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_108",
    "parent": "processed_documents/context_documents/44463235_ClusterMsgs.json",
    "chunk_number": 1738
  }
}