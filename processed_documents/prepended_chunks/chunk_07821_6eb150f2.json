{
  "content": "The chunk provides an introduction to rendering text in Panda3D using the TextNode interface, which is a fundamental method for displaying text with high customization control. It explains how to create and set up a TextNode, including setting the text content and positioning it within either 2D (e.g., render2d or aspect2d) or 3D space. The chunk also references additional API documentation for OnscreenText and mentions the importance of proper scaling when using certain nodes like aspect2d. This section serves as an entry point before diving into more advanced text customization options such as frames, cards, and decal effects covered later in the document.\n\ntextObject.destroy()\n\nA full list of arguments that can be passed to the constructor is available on the ~.direct.gui.OnscreenText.OnscreenText page of the API reference.\n\nText Nodes\n\npython\n\nThe most fundamental way to render text in Panda3D is via the .TextNode interface. This may be a little more work than the onscreentext or directlabel objects, but it gives you a lot more control over the appearance of the text.\n\ncpp\n\nRendering text in Panda3D is done using the .TextNode interface.\n\nTo use a TextNode, simply create one and call ~.TextNode.set_text() to set the actual text to display, and then parent the TextNode wherever you like (you can put it under ~builtins.aspect2d to make a 2-d onscreen text, or you can put it in the 3-d world for in-the-world text). Note that if you parent the text to render2d or aspect2d, you will probably need to give it a fairly small scale, since the coordinate space of the whole screen in render2d is in the range (-1, 1).\n\npython",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_723",
    "parent": "processed_documents/context_documents/1b6ddfee_8dcb8f12_rendering-text.json",
    "chunk_number": 7821
  }
}