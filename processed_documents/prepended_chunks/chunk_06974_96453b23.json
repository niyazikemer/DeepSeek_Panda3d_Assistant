{
  "content": "The chunk is an example of using the `GeomVertexFormat.get_v3n3c4t2()` method to define a vertex format with position, normal, color, and UV attributes. This section demonstrates how to create a `GeomVertexData` object, pack vertex data into a buffer using `struct.pack`, and assign this packed data to the vertex array for rendering.\n\n```python\n\"\"\"\nExample: Vertex Data Packing with get_v3n3c4t2()\n\nDemonstrates packing vertex attributes (position, normal, color, UV) into a buffer using struct.pack and assigning them to GeomVertexData.\n\"\"\"\nimport struct\n\nv_format = GeomVertexFormat.get_v3n3c4t2()\nstride = v_format.arrays[0].stride\nv_data = GeomVertexData('name', v_format, GeomEnums.UH_static)\nv_data.unclean_set_num_rows(4)\nv_array = v_data.modify_array(0)\nview = memoryview(v_array).cast('B')\n\nvalues = bytearray()\n\n# Pack vertex attributes for the first vertex\nvalues.extend(struct.pack(\n    '6f4B2f',\n    -1.0, 0.0, -1.0,     # Position (v3)\n    0.0, -1.0, 0.0,      # Normal (n3)\n    255, 128, 64, 255,   # Color (c4)\n    0.0, 0.0             # UV coordinates (t2)\n))\n\n# Add data for remaining vertices and assign to vertex array\nview[:] = values\n\n# Continue with additional vertices and rendering setup as needed\n```\n\nThis example is useful for understanding how to structure and pack vertex attributes when working with geometric data in applications like Panda3D, where custom vertex formats are required.\n\nAs an example, here is some code that makes use of the .GeomVertexFormat.get_v3n3c4t2() format:\n\nimport struct\n\nv_format = GeomVertexFormat.get_v3n3c4t2()\nstride = v_format.arrays[0].stride  # the size of a data row, in bytes\nv_data = GeomVertexData('name', v_format, GeomEnums.UH_static)\nv_data.unclean_set_num_rows(4)\nv_array = v_data.modify_array(0)\nview = memoryview(v_array).cast('B')\nvalues = bytearray()\n# add the data of the 1st vertex to the bytearray\nvalues.extend(struct.pack(\n    '6f4B2f',  # the format corresponds to the GeomVertexFormat\n    -1.0, 0.0, -1.0,    # format: '3f'; the position of the 1st vertex\n    0.0, -1.0, 0.0,     # format: '3f'; the normal vector of the 1st vertex\n    255, 128, 64, 255,  # format: '4B'; the color of the 1st vertex\n    0.0, 0.0            # format: '2f'; the UVs of the 1st vertex\n))\n# add the data of the remaining vertices to the bytearray\n...\n# assign all of the values to the memoryview\nview[:] = values\n\nAltering geometry",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_561",
    "parent": "processed_documents/context_documents/17d3a4e2_f2db4098_using-memoryviews.json",
    "chunk_number": 6974
  }
}