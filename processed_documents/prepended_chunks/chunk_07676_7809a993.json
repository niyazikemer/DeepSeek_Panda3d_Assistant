{
  "content": "The provided chunk describes how to generate a card in Panda3D using CardMaker, load a texture onto it, and manage transparency for images in both Python and C++. It sits within the section on rendering images, specifically under generating cards for 2D or 3D scenes and enabling transparency.\n\ncpp\n\nCardMaker cm(\"card\");\nNodePath card = render2d.attach_new_node(cm.generate());\n\nPT(Texture) tex = TexturePool::load_texture(\"maps/noise.rgb\");\ncard.set_texture(tex);\n\nThis will generate a card that causes the image to be stretched to cover the entire screen. To preserve the aspect ratio of the image, it is necessary to instead parent it to \"aspect2d\", as well as use either .NodePath.set_scale() or .CardMaker.set_frame() to adjust the card dimensions to match the aspect ratio of the image.\n\nSee the .CardMaker class in the API reference for a full list of methods to configure the generated card.\n\nTransparency\n\nTo enable transparency in images, you must tell Panda3D to enable a transparency mode on the object, otherwise the transparent parts of the image will show up as black. This can be done using the following code:\n\npython\n\nfrom panda3d.core import TransparencyAttrib\n\nimage = OnscreenImage(image='myImage.png', pos=(0, 0, 0))\nimage.setTransparency(TransparencyAttrib.MAlpha)\n\ncpp",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_690",
    "parent": "processed_documents/context_documents/f5e8a56c_dd3d2a8a_rendering-images.json",
    "chunk_number": 7676
  }
}