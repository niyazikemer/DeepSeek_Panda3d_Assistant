{
  "content": "The chunk is situated within a section introducing Interrogate's core functionality as a capable C++ parser. This section explains how Interrogate generates scripting language bindings by using special keywords for defining published interfaces and outlines the conditions required for binding generation, providing foundational knowledge before discussing specific options and configurations in later sections.\n\nC++ Parser\n\nInterrogate contains a capable C++ parser supporting most exportable features of C++, including templates, default parameters, and function overloading. Various C++11 features are supported as well.\n\nIt also extends the C++ language with various keywords that have special meaning to Interrogate. These are used to define which interfaces are published, and some can be used to tell Interrogate to generate additional interfaces for the scripting language, such as properties and getters returning a list.\n\nFor Interrogate to generate bindings for a particular class, one of the following conditions needs to hold true:\n\nIt has one or more methods marked with __published access.\n\nThe -promiscuous option is passed to Interrogate.\n\nIt is specified by a forcetype directive in a special .N file.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_423",
    "parent": "processed_documents/context_documents/2e2b4b89_ca6cf7a0_interrogate.json",
    "chunk_number": 6145
  }
}