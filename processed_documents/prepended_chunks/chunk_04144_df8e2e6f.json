{
  "content": "The chunk contains two methods within a class managing user input states for character movement. The `monitor` method is used for debugging input states, while `setWASDTurn` switches between turning (A/D) and sliding controls using the WASD keys, essential for adjusting character movement modes.\n\ndef monitor(self, _):\n        #assert self.debugPrint(\"monitor()\")\n        #if 1:\n        #    airborneHeight=self.avatar.getAirborneHeight()\n        #    onScreenDebug.add(\"airborneHeight\", \"% 10.4f\"%(airborneHeight,))\n        #if 0:\n        #    onScreenDebug.add(\"InputState forward\", \"%d\"%(inputState.isSet(\"forward\")))\n        #    onScreenDebug.add(\"InputState reverse\", \"%d\"%(inputState.isSet(\"reverse\")))\n        #    onScreenDebug.add(\"InputState turnLeft\", \"%d\"%(inputState.isSet(\"turnLeft\")))\n        #    onScreenDebug.add(\"InputState turnRight\", \"%d\"%(inputState.isSet(\"turnRight\")))\n        #    onScreenDebug.add(\"InputState slideLeft\", \"%d\"%(inputState.isSet(\"slideLeft\")))\n        #    onScreenDebug.add(\"InputState slideRight\", \"%d\"%(inputState.isSet(\"slideRight\")))\n        return Task.cont\n\n    def setWASDTurn(self, turn):\n        self.__WASDTurn = turn\n\n        if not self.isEnabled:\n            return",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_231",
    "parent": "processed_documents/context_documents/76ec7b1d_ControlManager.json",
    "chunk_number": 4144
  }
}