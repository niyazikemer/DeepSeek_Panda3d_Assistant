{
  "content": "This code chunk is part of an algorithm within the `TexCard` class that manages placing textures on a canvas. The method is responsible for finding suitable placement areas while avoiding overlaps by examining available rows and columns through bitmask operations.\n\nThe context involves efficiently allocating space for texture placements, ensuring each new placement does not overlap with existing ones. It uses bitwise operations to track occupied regions in rows, check for empty spaces, and validate if a region can accommodate the required dimensions of the new placement.\n\n```python\n# This code chunk is part of the `addPlacement` method within the TexCard class.\n# It efficiently finds an appropriate area on the canvas to place a new texture card by examining available regions row by row using bitmasks. The algorithm ensures that the chosen region is both wide and tall enough, while avoiding overlaps with existing placements.\n\n# Separate this row into (l, r) tuples.\nbm = self.bitmasks[b]\nif bm == lastBitmask:\n    # This row is exactly the same as the row below; no\n    # need to reexamine.\n    b += 1\n    continue\n\nlastBitmask = bm\n\ntuples = self.findEmptyRuns(bm)\nnewTuples = tuples.difference(lastTuples)\n\nfor l, r in newTuples:\n    # Is this region wide enough?\n    if r - l < w:\n        continue\n\n    # Is it tall enough?\n    r = l + w\n    mask = BitArray.range(l, r - l)\n\n    t = b + 1\n    while t < b + h and \\\n          (t >= len(self.bitmasks) or (self.bitmasks[t] & mask).isZero()):\n        t += 1\n\n    if t < b + h:\n        # Not tall enough.\n        continue\n```\n\n# Separate this row into (l, r) tuples.\n            bm = self.bitmasks[b]\n            if bm == lastBitmask:\n                # This row is exactly the same as the row below; no\n                # need to reexamine.\n                b += 1\n                continue\n\n            lastBitmask = bm\n\n            tuples = self.findEmptyRuns(bm)\n            newTuples = tuples.difference(lastTuples)\n\n            for l, r in newTuples:\n                # Is this region wide enough?\n                if r - l < w:\n                    continue\n\n                # Is it tall enough?\n                r = l + w\n                mask = BitArray.range(l, r - l)\n\n                t = b + 1\n                while t < b + h and \\\n                      (t >= len(self.bitmasks) or (self.bitmasks[t] & mask).isZero()):\n                    t += 1\n\n                if t < b + h:\n                    # Not tall enough.\n                    continue",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_172",
    "parent": "processed_documents/context_documents/7b312f5b_TexMemWatcher.json",
    "chunk_number": 2995
  }
}