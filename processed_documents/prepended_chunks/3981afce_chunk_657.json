{
  "content": "The chunk appears to be part of a UI-related method in an animation editor for a 3D application. The code handles rendering numerical markers on a timeline/slider based on frame numbers, with conditional logic for different ranges (50-frame increments vs. 100-frame increments). It is situated within a function responsible for updating or drawing the animation time slider's visual representation of keyframes and timeline markers.\n\nfor i in range(1,self.frameNum/50+1):\n                self.numbers.append(self.sliderStartFrame-1+i*50)\n\n            for i in range(int(self.frameNum/50)):\n                dc.DrawLine(self.points[i][0][0], self.points[i][0][1], self.points[i][1][0], self.points[i][1][1])\n\n            for i in range(self.frameNum/50):\n                st = str(self.numbers[i])\n                tw,th = dc.GetTextExtent(st)\n                dc.DrawText(st, self.points[i][0][0]+2, 0.5)\n\n        elif self.frameNum <= 2000:\n\n            self.points.append(((self.unitWidth*99.0,self.h),(self.unitWidth*99.0,self.h-15)))\n\n            for i in range(1,int(self.frameNum/100)):\n                temp = self.points[i-1][0][0]+100*self.unitWidth\n                self.points.append(((temp,self.h),(temp,self.h-15)))\n\n            for i in range(1,self.frameNum/100+1):\n                self.numbers.append(self.sliderStartFrame-1+i*100)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_49",
    "parent": "processed_documents/context_documents/9260a80b_AnimControlUI.json",
    "chunk_number": 657
  }
}