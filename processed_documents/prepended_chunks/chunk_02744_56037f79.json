{
  "content": "This document provides an overview of classes related to animation intervals and function-based transformations in a graphics or game engine. The chunk discusses the use of functors (callable Python functions) as parameters for animation properties like position, rotation, scale, etc., which can impact performance by shifting execution from optimized C++ code to Python. It also explains the concept of 'bakeInStart', which determines whether starting values are computed once at runtime or dynamically each frame, affecting flexibility and performance trade-offs in animations.\n\n#####################################################################\n##\n##  It is legal to pass in a functor (a callable Python function that\n##  returns an appropriate value) for the any of the pos, hpr, scale,\n##  or shear parameters in the intervals below.  These will be\n##  evaluated at the time the interval starts in order to determine\n##  the actual final (or initial) position.  However, doing so forces\n##  the entire LerpInterval to be executed up in Python, instead of\n##  down in the low-level C++ code, at some performance cost.\n##\n##  If bakeInStart is true, the starting values (if unspecified) are\n##  computed at the time the interval runs for the first time, and\n##  then stored.  If bakeInStart is false, the starting values are\n##  recomputed each frame based on the current value and the time\n##  delta since the last time the interval ran, which allows show code\n##  to manipulate the node even while it is being lerped.\n##",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_156",
    "parent": "processed_documents/context_documents/d377e678_LerpInterval.json",
    "chunk_number": 2744
  }
}