{
  "content": "This chunk is part of a method `_read_dependencies_fat` within a class related to processing dynamic libraries on macOS. The code handles reading dependencies from fat binaries (multi-architecture executables) and optionally rewriting their paths if flattening is enabled. This functionality is used during the build process for creating installers or packages, particularly for handling native library dependencies.\n\n```python\ndef _read_dependencies_fat(self, fp, is_64bit, flatten=False):\n    \"\"\"\n    Read and process dynamic library dependencies from a fat binary file on macOS.\n    \n    Args:\n        fp (file object): Open file pointer to read from.\n        is_64bit (bool): Whether the binary is 64-bit.\n        flatten (bool, optional): Whether to flatten relative paths. Defaults to False.\n    \"\"\"\n```\n\n# Do we need to flatten the relative reference?\n                            if '/' in dylib and flatten:\n                                new_dylib = prefix + os.path.basename(dylib)\n                                str_size = len(cmd_data) - 16\n                                if len(new_dylib) < str_size:\n                                    fp.seek(-str_size, os.SEEK_CUR)\n                                    fp.write(new_dylib.encode('ascii').ljust(str_size, b'\\0'))\n                                else:\n                                    self.warn('Unable to rewrite dependency {}'.format(orig))\n\n                load_dylibs.append(dylib)\n\n        return load_dylibs\n\n    def _read_dependencies_fat(self, fp, is_64bit, flatten=False):\n        num_fat, = struct.unpack('>I', fp.read(4))",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_132",
    "parent": "processed_documents/context_documents/871bb042_commands.json",
    "chunk_number": 2014
  }
}