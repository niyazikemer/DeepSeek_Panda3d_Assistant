{
  "content": "The chunk defines utility functions for inspecting Python objects using an InspectorWindow. The `inspect()` function opens a window for visual inspection of object attributes and values, while `inspectorFor()` maps object types to appropriate inspector classes based on type name lookup. This code is part of an object inspection system supporting various object types like NodePaths and ClassicFSM through different inspector implementations.\n\ndef inspect(anObject):\n    \"\"\"Opens up a window for visually inspecting the details of a given Python\n    object.  See :ref:`inspection-utilities`.\n    \"\"\"\n    inspector = inspectorFor(anObject)\n    inspectorWindow = InspectorWindow(inspector)\n    inspectorWindow.open()\n    return inspectorWindow\n\n### private\n\n_InspectorMap: dict[str, str]\n\n\ndef inspectorFor(anObject):\n    typeName = type(anObject).__name__.capitalize() + 'Type'\n    if typeName in _InspectorMap:\n        inspectorName = _InspectorMap[typeName]\n    else:\n        print((\"Can't find an inspector for \" + typeName))\n        inspectorName = 'Inspector'\n    inspector = globals()[inspectorName](anObject)\n    return inspector\n\n\n### initializing",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_62",
    "parent": "processed_documents/context_documents/5e6b5c95_Inspector.json",
    "chunk_number": 1015
  }
}