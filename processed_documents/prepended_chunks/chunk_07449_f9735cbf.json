{
  "content": "The document discusses managing collision detection using `CollisionTraverser` objects in a 3D scene, focusing on how to define and optimize \"from\" and \"into\" objects for efficient collision handling. This chunk explains the flexibility of categorizing moving vs. static objects as from or into colliders, with tips on minimizing from objects for better performance.\n\nNote that it is up to you to decide how to divide the world into \"from objects\" and \"into objects\". Typically, the from objects are the moving objects in the scene, and the static objects like walls and floors are into objects, but the collision system does not require this; it is perfectly legitimate for a from object to remain completely still while an into object moves into it, and the collision will still be detected.\n\nIt is a good idea for performance reasons to minimize the number of from objects in a particular scene. For instance, the user's avatar is typically a from object; in many cases, it may be the only from object required--all of the other objects in the scene, including the walls, floors, and other avatars, might be simply into objects. If your game involves bullets that need to test for collisions with the other avatars, you will need to make either the bullets or the other avatars be from objects, but probably not both.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_648",
    "parent": "processed_documents/context_documents/8f6a9f50_903add0c_collision-traversers.json",
    "chunk_number": 7449
  }
}