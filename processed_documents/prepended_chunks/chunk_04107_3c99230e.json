{
  "content": "The provided code chunk consists of several methods in a Python class that handle various aspects of avatar control initialization and management. These methods include `getSpeeds()`, which returns movement speeds; `setAvatar()`, used to assign an avatar instance; and other functions like `initializeCollisions()` for setting up collision detection parameters, as well as methods related to managing wall and floor bitmasks, tags, collisions, and positioning within a 3D environment. This chunk is part of a larger class responsible for controlling and managing avatar movement and interaction in a virtual space.\n\ndef getSpeeds(self):\n        #assert self.debugPrint(\"getSpeeds()\")\n        return (self.speed, self.rotationSpeed, self.slideSpeed)\n\n    def setAvatar(self, avatar):\n        self.avatar = avatar\n        if avatar is not None:\n            pass # setup the avatar\n\n    def setWallBitMask(self, bitMask):\n        pass\n\n    def setFloorBitMask(self, bitMask):\n        pass\n\n    def initializeCollisions(self, collisionTraverser, avatarNodePath,\n            wallCollideMask, floorCollideMask,\n            avatarRadius = 1.4, floorOffset = 1.0, reach = 1.0):\n        assert not avatarNodePath.isEmpty()\n\n        self.cTrav = collisionTraverser\n        self.avatarNodePath = avatarNodePath\n\n    def setAirborneHeightFunc(self, getAirborneHeight):\n        pass\n\n    def deleteCollisions(self):\n        pass\n\n    def setTag(self, key, value):\n        pass\n\n    def setCollisionsActive(self, active = 1):\n        pass\n\n    def placeOnFloor(self):\n        pass\n\n    def oneTimeCollide(self):\n        pass",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_227",
    "parent": "processed_documents/context_documents/dffaf03d_DevWalker.json",
    "chunk_number": 4107
  }
}