{
  "content": "The chunk consists of two methods from the DistributedSmoothNode class: d_setParent and d_suggestResync. These methods are part of a system managing smooth motion prediction and clock synchronization across distributed nodes, ensuring accurate and consistent positioning and timing for avatars in a networked environment.\n\n```plaintext\nThis code chunk is part of the `DistributedSmoothNode` class, which manages avatar movement and clock synchronization in a networked environment. The methods handle forcing position updates after parent changes and initiating peer-to-peer clock resynchronization to ensure smooth motion prediction and accurate timekeeping.\n```\n\n@report(types = ['args'], dConfigParam = 'smoothnode')\n    def d_setParent(self, parentToken):\n        # We override this DistributedNode method to force a full position\n        # update immediately after the distributed setParent is sent.\n        # See ParentMgr.py for an explanation.\n        DistributedNode.DistributedNode.d_setParent(self, parentToken)\n\n        self.forceToTruePosition()\n        self.sendCurrentPosition()\n\n    ### Monitor clock sync ###\n\n    def d_suggestResync(self, avId, timestampA, timestampB,\n                        serverTime, uncertainty):\n        serverTimeSec = math.floor(serverTime)\n        serverTimeUSec = (serverTime - serverTimeSec) * 10000.0\n        self.sendUpdate(\"suggestResync\", [avId, timestampA, timestampB,\n                                          serverTimeSec, serverTimeUSec,\n                                          uncertainty])",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_305",
    "parent": "processed_documents/context_documents/3cb775cb_DistributedSmoothNode.json",
    "chunk_number": 5362
  }
}