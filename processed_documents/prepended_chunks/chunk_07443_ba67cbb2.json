{
  "content": "This chunk provides Python code examples demonstrating how to access and modify individual pixel values in a PNMImage object using methods like getRedVal(), getRed(), getXelVal(), and their corresponding setter counterparts. These examples are part of a guide explaining how to manipulate image data in Panda3D, specifically focusing on retrieving and setting color channels (red, green, blue) for pixels, including both normalized values (0-1 range) and 255-based integer values. The code illustrates the use of methods for getting individual channel values, fetching all channels at once, and setting pixel colors using either normalized or integer-based inputs.\n\npython\n\n# The pixel at 0,0 is red and we're using 8-bit color\nmyImage.getRedVal(0, 0) # Returns 255\nmyImage.getRed(0, 0) # Returns 1\n\ncolors = myImage.getXelVal(0,0) # Returns (255,0,0)\ncolorVal = myImage.getXel(0,0) # Returns (1,0,0)\n\nThe methods for setting pixel information are set_red(x, y, value) <.PNMImage.set_red>, set_green(x, y, value) <.PNMImage.set_green>, set_blue(x, y, value) <.PNMImage.set_blue>, set_xel(x, y, color) <.PNMImage.set_xel>, or set_red_val(x, y, value) <.PNMImage.set_red_val>, set_green_val(x, y, value) <.PNMImage.set_green_val>, set_blue_val(x, y, value) <.PNMImage.set_blue_val>, set_xel_val(x, y, color) <.PNMImage.set_xel_val>. The same as above applies regarding the dichotomy between the regular setters and the ones marked with \"val\". You can also fill an image with a color by using fill(r, g, b) <.PNMImage.fill> and fill_val(r, g, b) <.PNMImage.fill_val>.\n\npython",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_647",
    "parent": "processed_documents/context_documents/c417f3fc_7487dfe5_creating-textures.json",
    "chunk_number": 7443
  }
}