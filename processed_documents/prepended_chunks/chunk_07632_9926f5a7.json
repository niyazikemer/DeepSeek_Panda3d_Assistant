{
  "content": "To create a render-to-texture setup in Panda3D, you can use either a hidden window (GraphicsBuffer) or a visible one (GraphicsWindow). Here's how to set it up:\n\n1. **Using the Simple API (Python):**\n   - Create a texture buffer with specific dimensions and get the associated texture.\n   ```python\n   mybuffer = base.win.makeTextureBuffer(\"My Buffer\", 512, 512)\n   mytexture = mybuffer.getTexture()\n   ```\n   - Set the render priority (sort order) to ensure proper rendering order.\n   ```python\n   mybuffer.setSort(-100)\n   ```\n   - Create a camera that renders into this buffer and attach it to your scene graph.\n   ```python\n   mycamera = base.makeCamera(myscene)\n   ```\n\n2. **Using the Advanced API (C++):**\n   - Define framebuffer and window properties.\n     ```cpp\n     FrameBufferProperties fb_rop;\n     WindowProperties win_prop;\n     win_prop.setSize(512, 512);\n     ```\n   - Use `make_output` with flags to create an offscreen buffer.\n     ```cpp\n     GraphicsEngine* engine = GraphicsEngine::get_global_ptr();\n     engine->make_output(pipe, \"My Buffer\", -100, fb_rop, win_prop, BF_refuse_window,\n                         base.win.getGsg(), base.win);\n     ```\n\n3. **Integration and Testing:**\n   - Attach your 3D objects to the scene graph under the camera for rendering.\n   - Ensure compatibility of texture formats and buffer properties for effects like post-processing or accumulation.\n\nThis setup allows you to render scenes into textures efficiently, useful for various visual effects and off-screen processing tasks in Panda3D.\n\nTo generalize that a bit, although render-to-texture is usually done with a hidden window (class .GraphicsBuffer), it can also be done with a visible window (class .GraphicsWindow). You can transfer the contents of any window, hidden or not, into a texture. That's potentially useful - for example, you can transfer the contents of the main window into a texture, which you can then use when rendering the next frame. This can be used to create accumulation-buffer-like effects without an accumulation buffer.\n\nThe Simple API\n\nHere is a short snippet of code that creates a hidden window, creates a camera that renders into that window, and creates a scene graph for that camera:\n\npython\n\nmybuffer = base.win.makeTextureBuffer(\"My Buffer\", 512, 512)\nmytexture = mybuffer.getTexture()\nmybuffer.setSort(-100)\nmycamera = base.makeCamera(mybuffer)\nmyscene = NodePath(\"My Scene\")\nmycamera.reparentTo(myscene)\n\ncpp",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_681",
    "parent": "processed_documents/context_documents/ae63d583_6da000bc_low-level-render-to-texture.json",
    "chunk_number": 7632
  }
}