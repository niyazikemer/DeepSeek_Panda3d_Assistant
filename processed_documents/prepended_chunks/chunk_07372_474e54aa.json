{
  "content": "The chunk provides an introductory example of how to create and customize a clickable button using the `PGButton` class in PGui, demonstrating the use of textures and frame styles. It is situated within a section that introduces basic PGui C++ modules following discussions about various DirectGUI components like DirectButton, etc., but focusing on PGui's implementation for creating interactive GUI elements.\n\nLet's take a look at some PGui functions.\n\nThe PGui C++ modules\n\n[PGButton]\n\n#include \"pgButton.h\"\n\nwith PGButton you can create a freely definable clickable button.\n\nIt can hold four different states:\n\nExample usage, creating a texture for each state:\n\nPT(PGButton) my_button;\nmy_button = new PGButton(\"MyButton\");\nmy_button->setup(\"Button\", 0.1);\nPT(Texture) button_ready = TexturePool::load_texture(\"button.png\");\nPT(Texture) button_rollover = TexturePool::load_texture(\"button_active.png\");\nPT(Texture) button_pressed = TexturePool::load_texture(\"button_pressed.png\");\nPT(Texture) button_inactive = TexturePool::load_texture(\"button_inactive.png\");\n\n// PGFrameStyle is a powerful way to change the appearance of the button:\nPGFrameStyle my_style = my_button->get_frame_style(0); // frame_style(0): ready state\nmy_style.set_type(PGFrameStyle::T_flat);",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_631",
    "parent": "processed_documents/context_documents/5bc2b973_67d10b58_index.json",
    "chunk_number": 7372
  }
}