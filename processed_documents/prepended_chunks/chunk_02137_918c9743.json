{
  "content": "The chunk is part of a method `_replace_symbol` in a custom module loader that handles platform-specific operations. It detects CPU architecture bitness (32/64-bit) and replaces symbols in binary files, particularly managing macOS universal binaries when targeting specific bitness.\n\nContext: The code detects CPU architecture bitness (32/64-bit) within a custom module loader for replacing symbols in binary files, especially handling macOS universal binaries.\n\nif (cputype & 0x1000000) != 0:\n                    bitnesses.add(64)\n                else:\n                    bitnesses.add(32)\n            return tuple(bitnesses)\n\n    def _replace_symbol(self, data, symbol_name, replacement, bitness=None):\n        \"\"\"We store a custom section in the binary file containing a header\n        containing offsets to the binary data.\n        If bitness is set, and the binary in question is a macOS universal\n        binary, it only replaces for binaries with the given bitness. \"\"\"",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_133",
    "parent": "processed_documents/context_documents/0e1163d5_FreezeTool.json",
    "chunk_number": 2137
  }
}