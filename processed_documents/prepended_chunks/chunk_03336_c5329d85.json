{
  "content": "The given code chunk is part of a method responsible for calculating and applying a smooth camera rotation based on a specified rotation axis. This functionality is crucial within the broader context of 3D camera manipulation in a graphical environment, where precise control over the camera's orientation relative to objects or markers is essential. The chunk specifically handles determining the angle of rotation from the current view to a new orientation and then smoothly transitioning the camera to this new position.\n\nrotAxis.normalize()\n        # Find angle between rot Axis and render X_AXIS\n        rotAngle = rad2Deg(math.acos(CLAMP(rotAxis.dot(DG.X_AXIS), -1, 1)))\n        # Determine sign or rotation angle\n        if rotAxis[1] < 0:\n            rotAngle *= -1\n        # Position ref CS at coa marker with xaxis aligned with rot axis\n        self.camManipRef.setPos(self.coaMarker, Vec3(0))\n        self.camManipRef.setHpr(render, rotAngle, 0, 0)\n        # Reparent Cam to ref Coordinate system\n        parent = direct.camera.getParent()\n        direct.camera.wrtReparentTo(self.camManipRef)\n        # Rotate ref CS to final orientation\n        ival = self.camManipRef.hprInterval(CAM_MOVE_DURATION,\n                                            (rotAngle, orbitAngle, 0),\n                                            other = render,\n                                            blendType = 'easeInOut')\n        ival = Sequence(ival, Func(self.reparentCam, parent),",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_181",
    "parent": "processed_documents/context_documents/b7d65bc2_DirectCameraControl.json",
    "chunk_number": 3336
  }
}