{
  "content": "The provided code chunk is situated within the `__init__` method of the `ContainerManager` class. This method initializes the necessary containers to track objects, starting with fundamental containers such as built-ins, global variables, and optional modules like 'base'.\n\n# set up the base containers, the ones that hold most objects\n        ref = ObjectRef(Indirection(evalStr='builtins.__dict__'), id(builtins.__dict__))\n        self._id2baseStartRef[id(builtins.__dict__)] = ref\n        # container for objects that want to make sure they are found by\n        # the object exploration algorithm, including objects that exist\n        # just to measure things such as C++ memory usage, scene graph size,\n        # framerate, etc. See LeakDetectors.py\n        if not hasattr(builtins, \"leakDetectors\"):\n            builtins.leakDetectors = {}\n        ref = ObjectRef(Indirection(evalStr='leakDetectors'), id(builtins.leakDetectors))\n        self._id2baseStartRef[id(builtins.leakDetectors)] = ref\n        for i in self._addContainerGen(builtins.__dict__, ref):\n            pass\n        try:\n            base\n        except Exception:\n            pass\n        else:\n            ref = ObjectRef(Indirection(evalStr='base.__dict__'), id(base.__dict__))",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_256",
    "parent": "processed_documents/context_documents/e2a31346_ContainerLeakDetector.json",
    "chunk_number": 4491
  }
}