{
  "content": "The provided code chunk demonstrates how to implement multi-pass rendering in Panda3D by setting up multiple rendering passes with different visual effects using shader applications. The Python and C++ examples show how to assign specific RenderStates to nodes based on camera tags, allowing objects to be rendered differently under each camera view. This technique is useful for applying visual effects such as toon shading or blur during multi-pass rendering.\n\npython\n\n# Assume we have Shader instances toon_shader and blur_shader\n# and we have a Camera whose NodePath is myCamera\n\n# Create a temporary node in order to create a usable RenderState.\ntempnode = NodePath(\"temp node\")\ntempnode.setShader(toon_shader)\nbase.cam.setTagStateKey(\"Toon Shading\")\nbase.cam.setTagState(\"True\", tempnode.getState())\n\ntempnode = NodePath(\"temp node\")\ntempnode.setShader(blur_shader)\nmyCamera.node().setTagStateKey(\"Blur Shading\")\nmyCamera.node().setTagState(\"True\", tempnode.getState())\n\n# this makes myNodePath and its children get toonShaded\n# when rendered by the default camera\nmyNodePath.setTag(\"Toon Shading\", \"True\")\n# ....\n# now if you want myNodePath to be blurred when seen by myCamera,\n# it's as easy as adding a tag\nmyNodePath.setTag(\"Blur Shading\", \"True\")\n\ncpp\n\n// Assume we have Shader instances toon_shader and blur_shader\n// and we have a Camera whose NodePath is myCamera",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_386",
    "parent": "processed_documents/context_documents/64e38fe4_b8963543_multi-pass-rendering.json",
    "chunk_number": 5979
  }
}