{
  "content": "The chunk defines methods (`getT()`, `start()`, `loop()`, `pause()`, `resume()`, `resumeUntil()`) that control the playback and state management of an interval, allowing for starting, pausing, resuming, and looping operations. These are instance methods within a class (likely `Interval` or similar) that manages timeline or animation intervals.\n\ndef getT(self):\n        return self.currT\n\n    def start(self, startT = 0.0, endT = -1.0, playRate = 1.0):\n        \"\"\" Starts the interval.  Returns an awaitable. \"\"\"\n        self.setupPlay(startT, endT, playRate, 0)\n        return self.__spawnTask()\n\n    def loop(self, startT = 0.0, endT = -1.0, playRate = 1.0):\n        self.setupPlay(startT, endT, playRate, 1)\n        self.__spawnTask()\n\n    def pause(self):\n        if self.getState() == CInterval.SStarted:\n            self.privInterrupt()\n        self.privPostEvent()\n        self.__removeTask()\n        return self.getT()\n\n    def resume(self, startT = None):\n        if startT is not None:\n            self.setT(startT)\n        self.setupResume()\n        if not self.isPlaying():\n            self.__spawnTask()\n\n    def resumeUntil(self, endT):\n        duration = self.getDuration()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_164",
    "parent": "processed_documents/context_documents/2f6531c1_Interval.json",
    "chunk_number": 2837
  }
}