{
  "content": "The provided chunk includes two key methods in an Actor class:\n\n- `pose()`: Positions the actor based on a specific frame of an animation\n- `setBlend()`: Controls how animations blend together and interpolate frames\n\nThese methods are part of a comprehensive set of functions for managing 3D character animation, including features like:\n- Animation control (play, pose, blend)\n- LOD management (level of detail)\n- Part/subpart manipulation\n- Joint/exposure controls\n- Frame/time-based operations\n\nThe context is a detailed implementation of an Actor class with extensive documentation strings explaining each method's purpose and functionality. The code appears to be part of a 3D animation system or game engine framework, providing low-level control over character animations and model rendering.\n\ndef pose(self, animName, frame, partName=None, lodName=None):\n        \"\"\"pose(self, string, int, string=None)\n        Pose the actor in position found at given frame in the specified\n        animation for the specified part. If no part is specified attempt\n        to apply pose to all parts.\"\"\"\n        for control in self.getAnimControls(animName, partName, lodName):\n            control.pose(frame)\n\n    def setBlend(self, animBlend = None, frameBlend = None,\n                 blendType = None, partName = None):\n        \"\"\"\n        Changes the way the Actor handles blending of multiple\n        different animations, and/or interpolation between consecutive\n        frames.\n\n        The animBlend and frameBlend parameters are boolean flags.\n        You may set either or both to True or False.  If you do not\n        specify them, they do not change from the previous value.",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_177",
    "parent": "processed_documents/context_documents/2763abe9_Actor.json",
    "chunk_number": 3119
  }
}