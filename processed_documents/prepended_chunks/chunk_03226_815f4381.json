{
  "content": "The provided code chunk is part of a larger document that defines a Grid class responsible for aligning 3D objects to a grid system. The specific methods in question, `_gridAlignX`, `_gridAlignY`, and `_gridAlignZ`, handle the alignment of object positions along each axis (X, Y, Z) to predefined grid points based on spacing. These methods ensure that offsets from the nearest grid point are minimized, creating a clean, aligned layout. The chunk focuses on the Y and Z coordinate adjustments, mirroring the X-axis method structure to maintain consistency across all axes.\n\nThe succinct context is:\n\nThe chunk implements the `_gridAlignY` and `_gridAlignZ` methods within the Grid class, which align object positions along the Y and Z axes to a grid system by snapping offsets to the nearest grid points.\n\nif offsetY < 0.0:\n            signY = -1.0\n        else:\n            signY = 1.0\n        modY = math.fabs(offsetY) % ShowBaseGlobal.direct.grid.gridSpacing\n        floorY = math.floor(math.fabs(offsetY) / ShowBaseGlobal.direct.grid.gridSpacing)\n        if modY < ShowBaseGlobal.direct.grid.gridSpacing / 2.0:\n            offsetY = signY * floorY * ShowBaseGlobal.direct.grid.gridSpacing\n        else:\n            offsetY = signY * (floorY + 1) * ShowBaseGlobal.direct.grid.gridSpacing\n\n        if offsetZ < 0.0:\n            signZ = -1.0\n        else:\n            signZ = 1.0\n        modZ = math.fabs(offsetZ) % ShowBaseGlobal.direct.grid.gridSpacing\n        floorZ = math.floor(math.fabs(offsetZ) / ShowBaseGlobal.direct.grid.gridSpacing)\n        if modZ < ShowBaseGlobal.direct.grid.gridSpacing / 2.0:\n            offsetZ = signZ * floorZ * ShowBaseGlobal.direct.grid.gridSpacing\n        else:\n            offsetZ = signZ * (floorZ + 1) * ShowBaseGlobal.direct.grid.gridSpacing",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_179",
    "parent": "processed_documents/context_documents/4f678cc8_DirectManipulation.json",
    "chunk_number": 3226
  }
}