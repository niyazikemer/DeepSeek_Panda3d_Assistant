{
  "content": "The \"Shader Basics\" section provides an introduction to shaders within Panda3D, covering the supported shading languages (GLSL and Cg), recommendations for using GLSL unless targeting DirectX due to Cg's discontinuation. It outlines various shader types involved in the rendering pipeline, serving as the foundational information before detailed technical discussions on loading, setting, inputs, attributes, and compilation processes. This section is essential for understanding the basics of Panda3D's shading system.\n\nShader Basics\n\nOverview of Shaders\n\nPanda3D supports two shading languages: GLSL and Cg. This section assumes that you have a working knowledge of a shader language. If not, it would be wise to read about GLSL or Cg before trying to understand how they fit into Panda3D.\n\nThough Panda3D has used only Cg in the past, it is recommended that you create new shaders in GLSL unless you want to target DirectX as well, since the NVIDIA Cg toolkit is no longer being maintained.\n\nThere are various types of shaders, each capable of describing a different stage in the rendering process. In the most simple case, a model simply has a vertex shader, which describes how each vertex is processed, and a fragment shader (also called a pixel shader in DirectX parlance), describing how the color of each visible pixel on the model is determined. A shader pipeline can be composed of one or more of the following types of shaders:",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_462",
    "parent": "processed_documents/context_documents/8ddfa146_94b58d23_shader-basics.json",
    "chunk_number": 6359
  }
}