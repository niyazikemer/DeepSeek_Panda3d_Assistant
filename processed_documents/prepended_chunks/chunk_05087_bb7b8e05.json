{
  "content": "The chunk consists of two methods from a Python class related to profiling functionality: \n\n1. `_getNextFilename()`: Generates unique filenames by appending an incrementing counter to a base name.\n\n2. `run()`: Manages execution of the profiler, including checking for existing profilers and running the target function with or without profiling based on whether another profiler is already active.\n\nThe code is part of a larger class that implements profiling functionality in Python, handling cases where multiple profiling sessions might be attempted concurrently while ensuring proper cleanup and resource management.\n\ndef _getNextFilename(self):\n        filename = '%s-%s' % (self._filenameBase, self._filenameCounter)\n        self._filenameCounter += 1\n        return filename\n\n    def run(self):\n        # make sure this instance doesn't get destroyed inside self._func\n        self.acquire()\n\n        if not self._aggregate:\n            self._reset()\n\n        # if we're already profiling, just run the func and don't profile\n        if 'globalProfileSessionFunc' in builtins.__dict__:\n            self.notify.warning('could not profile %s' % self._func)\n            result = self._func()\n            if self._duration is None:\n                self._duration = 0.\n        else:\n            # put the function in the global namespace so that profile can find it\n            assert hasattr(self._func, '__call__')\n            builtins.globalProfileSessionFunc = self._func\n            builtins.globalProfileSessionResult = [None]",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_288",
    "parent": "processed_documents/context_documents/1629146a_ProfileSession.json",
    "chunk_number": 5087
  }
}