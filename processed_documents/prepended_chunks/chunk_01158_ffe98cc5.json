{
  "content": "This chunk appears to be part of an application implementing undo/redo functionality through direct manipulation of node paths in a scene graph (likely related to Panda3D). The code provides methods for pushing state changes onto undo/redo stacks, handling hooks when undo/redo operations are performed, and managing the UI state of undo/redo buttons based on whether there are available actions in the respective stacks.\n\nself.mainNotebook.setnaturalsize()\n\n    def pushUndo(self, fResetRedo = 1):\n        base.direct.pushUndo([self.nodePath])\n\n    def undoHook(self, nodePathList = []):\n        # Reflect new changes\n        pass\n\n    def pushUndoHook(self):\n        # Make sure button is reactivated\n        self.undoButton.configure(state = 'normal')\n\n    def undoListEmptyHook(self):\n        # Make sure button is deactivated\n        self.undoButton.configure(state = 'disabled')\n\n    def pushRedo(self):\n        base.direct.pushRedo([self.nodePath])\n\n    def redoHook(self, nodePathList = []):\n        # Reflect new changes\n        pass\n\n    def pushRedoHook(self):\n        # Make sure button is reactivated\n        self.redoButton.configure(state = 'normal')\n\n    def redoListEmptyHook(self):\n        # Make sure button is deactivated\n        self.redoButton.configure(state = 'disabled')",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_65",
    "parent": "processed_documents/context_documents/78026bc9_MopathRecorder.json",
    "chunk_number": 1158
  }
}