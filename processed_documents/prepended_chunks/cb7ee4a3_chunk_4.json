{
  "content": "The provided code chunk defines static methods and variables in the `DistancePhasedNode` class responsible for managing unique instance identifiers. These identifiers are crucial for distinguishing between different instances when handling collision events, ensuring each phase node can operate independently without interference from others.\n\n```python\nnotify  = directNotify.newCategory(\"DistancePhasedObject\")\n__InstanceSequence  = 0\n__InstanceDeque: list[int]  = []\n\n@staticmethod\ndef __allocateId():\n    \"\"\"Give each phase node a unique id in order to filter out collision events from other phase nodes. We do it in this manner so the client doesn't need to worry about giving each phase node a unique name.\"\"\"\n    if DistancePhasedNode.__InstanceDeque:\n        return DistancePhasedNode.__InstanceDeque.pop(0)\n    else:\n        id  = DistancePhasedNode.__InstanceSequence\n        DistancePhasedNode.__InstanceSequence += 1\n        DistancePhasedNode.__InstanceSequence &= 65535\n        return id\n\n@staticmethod\ndef __deallocateId(id):\n    \"\"\"Reuse abandoned ids.\"\"\"\n    if DistancePhasedNode is not None:\n        DistancePhasedNode.__InstanceDeque.append(id)\n```\n\nnotify = directNotify.newCategory(\"DistancePhasedObject\")\n    __InstanceSequence = 0\n    __InstanceDeque: list[int] = []\n\n    @staticmethod\n    def __allocateId():\n        \"\"\"\n        Give each phase node a unique id in order to filter out\n        collision events from other phase nodes.  We do it in\n        this manner so the client doesn't need to worry about\n        giving each phase node a unique name.\n        \"\"\"\n        if DistancePhasedNode.__InstanceDeque:\n            return DistancePhasedNode.__InstanceDeque.pop(0)\n        else:\n            id = DistancePhasedNode.__InstanceSequence\n            DistancePhasedNode.__InstanceSequence += 1\n            DistancePhasedNode.__InstanceSequence &= 65535\n            return id\n\n    @staticmethod\n    def __deallocateId(id):\n        \"\"\"\n        Reuse abandoned ids.\n        \"\"\"\n        if DistancePhasedNode is not None:\n            DistancePhasedNode.__InstanceDeque.append(id)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_0",
    "parent": "processed_documents/5be12928_DistancePhasedNode.json",
    "chunk_number": 4
  }
}