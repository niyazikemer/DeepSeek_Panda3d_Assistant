{
  "content": "The Factory class is a manager that maintains a mapping of object types to their respective constructor functions. It allows for on-demand object creation by looking up the appropriate constructor based on the specified type. This class is designed to be subclassed, with subclasses typically registering their specific object types and constructors using the _registerTypes method. The create() method facilitates the instantiation of objects by invoking the registered constructor for a given type.\n\nclass Factory:\n    \"\"\"This class manages a list of object types and their corresponding constructors.\n    Objects may be created on-demand from their type. Object types may be any hashable\n    piece of unique data (such as a string).\n\n    This class is intended to be derived from. Subclasses should call self._registerTypes\n    to set up type constructors.\"\"\"\n    notify = directNotify.newCategory('Factory')\n\n    def __init__(self):\n        self._type2ctor = {}\n\n    def create(self, type, *args, **kwArgs):\n        return self._type2ctor[type](*args, **kwArgs)\n\n    def _registerType(self, type, ctor):\n        if type in self._type2ctor:\n            self.notify.debug('replacing %s ctor %s with %s' %\n                              (type, self._type2ctor[type], ctor))\n        self._type2ctor[type] = ctor\n    def _registerTypes(self, type2ctor):\n        for type, ctor in list(type2ctor.items()):\n            self._registerType(type, ctor)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_272",
    "parent": "processed_documents/context_documents/fd898044_Factory.json",
    "chunk_number": 4766
  }
}