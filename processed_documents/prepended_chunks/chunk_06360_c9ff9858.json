{
  "content": "The provided chunk is situated within a comprehensive guide on computer graphics shaders, detailing various types such as vertex, fragment, geometry, tessellation, and compute shaders. The chunk specifically addresses the structure and requirements of GLSL shaders, explaining their separation into distinct files, the main function, and version directives, while also introducing compute shaders as an advanced topic separate from traditional pipelines.\n\n**Context:**\nThis section explains how GLSL shaders are structured in separate files for different stages (vertex, fragment, geometry), the necessity of specifying a #version directive to ensure compatibility with specific OpenGL versions, and introduces compute shaders as a specialized type that operates outside the standard rendering pipeline.\n\nThere is also another advanced type of shader called a Compute shader <compute-shaders>, which stands on its own and does not fit into the pipeline above.\n\nYou will usually only find a vertex and fragment shader, since geometry and tessellation shaders are relatively new features that are useful only in more specific cases.\n\nGLSL Shaders\n\nGLSL shaders are always separated up into separate files for vertex, fragment and geometry shaders, with the main entry point being called main(). All GLSL shaders begin with a #version line indicating the version of the GLSL standard that the shader is written in, which maps to a corresponding version of OpenGL. For example, version 120 will require OpenGL 2.1, version 150 requires OpenGL 3.2, and version 330 requires OpenGL 3.3.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_462",
    "parent": "processed_documents/context_documents/8ddfa146_94b58d23_shader-basics.json",
    "chunk_number": 6360
  }
}