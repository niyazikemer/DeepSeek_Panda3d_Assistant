{
  "content": "The `loadModel` method is a core function within the `Actor` class that initializes and loads 3D model data into the actor's structure, specifying part and LOD (Level of Detail) names to organize the model hierarchy. It ensures each new part added to the actor is unique by checking against existing parts and logs debug information for clarity. This method is fundamental for setting up the model within the animation and joint control framework, enabling subsequent operations like binding animations and manipulating joints.\n\nif animControl:\n                                controls.append(animControl)\n\n        return controls\n\n    def loadModel(self, modelPath, partName=\"modelRoot\", lodName=\"lodRoot\",\n                  copy = True, okMissing = None, autoBindAnims = True):\n        \"\"\"Actor model loader. Takes a model name (ie file path), a part\n        name(defaults to \"modelRoot\") and an lod name(defaults to \"lodRoot\").\n        \"\"\"\n        assert partName not in self.__subpartDict\n\n        assert Actor.notify.debug(\"in loadModel: %s, part: %s, lod: %s, copy: %s\" % \\\n                                  (modelPath, partName, lodName, copy))",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_177",
    "parent": "processed_documents/context_documents/2763abe9_Actor.json",
    "chunk_number": 3135
  }
}