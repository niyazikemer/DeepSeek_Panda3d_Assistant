{
  "content": "The provided code snippet is part of a larger Python script that appears to be implementing a graphical user interface (GUI) component for configuring physics forces in a simulation or game engine context. The specific chunk being highlighted defines checkbuttons within a container frame (`cbf`) for controlling force direction masks along the X, Y, and Z axes, as well as toggling mass dependency for the force effect. These controls likely form part of a panel or dialog box where users can adjust properties of physics forces applied to objects in 3D space.\n\nThe code suggests that:\n- The `createCheckbutton` method is used to generate toggle buttons.\n- Each checkbutton corresponds to enabling/disabling force application along specific axes (X, Y, Z).\n- There is also a checkbutton for controlling whether the force's effect depends on object mass.\n- These controls are packed into a container frame (`cbf`) and then added to the main interface layout.\n\nThe context is centered around configuring physics simulation parameters through a graphical user interface.\n\ntoggleMassDependent,\n                               force.getMassDependent())\n        self.createCheckbutton(cbf, pageName, forceName + ' Mask X',\n                               'On: enable force along X axis',\n                               setVectorMasks, 1)\n        self.createCheckbutton(cbf, pageName, forceName + ' Mask Y',\n                               'On: enable force along X axis',\n                               setVectorMasks, 1)\n        self.createCheckbutton(cbf, pageName, forceName + ' Mask Z',\n                               'On: enable force along X axis',\n                               setVectorMasks, 1)\n        cbf.pack(fill = 'x', expand = 0)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_56",
    "parent": "processed_documents/context_documents/44a6f4d1_ParticlePanel.json",
    "chunk_number": 888
  }
}