{
  "content": "The provided code chunk implements drag-and-drop functionality for tree items and handles the display of context (popup) menus. The `onDrag` method prevents dragging the root item by checking if the current item is not the root, then prepares a text data object with the item's label for drag-and-drop operations using wxPython's `DropSource`. The `onShowPopup` method converts screen coordinates to client coordinates, retrieves the item under the mouse cursor, and displays a context menu with options like expanding/collapsing all children, deleting the node, or renaming it. This allows users to interact with tree items efficiently through both drag-and-drop actions and contextual operations.\n\n```python\n\"\"\"\nThe following code chunk implements drag-and-drop functionality for tree items \nand handles the display of context (popup) menus in a scene graph UI. The `onDrag` \nmethod prevents dragging the root item by checking if the current item is not the \nroot, then prepares a text data object with the item's label for drag-and-drop \noperations using wxPython's `DropSource`. The `onShowPopup` method converts screen \ncoordinates to client coordinates, retrieves the item under the mouse cursor, and \ndisplays a context menu with options like expanding/collapsing all children, \ndeleting the node, or renaming it. This allows users to interact with tree items \nefficiently through both drag-and-drop actions and contextual operations.\n\"\"\"\n```\n\nif item != self.tree.GetRootItem(): # prevent dragging root item\n            text = self.tree.GetItemText(item)\n            print(\"Starting SceneGraphUI drag'n'drop with %s...\" % repr(text))\n\n            tdo = wx.TextDataObject(text)\n            tds = wx.DropSource(self.tree)\n            tds.SetData(tdo)\n            tds.DoDragDrop(True)\n\n    def onShowPopup(self, event):\n        pos = event.GetPosition()\n        pos = self.ScreenToClient(pos)\n\n        item, flags = self.tree.HitTest(pos)\n        if not item.IsOk():\n            return\n        self.currItem = item\n        itemId = self.tree.GetItemData(item)\n        if not itemId:\n            return\n        self.currObj = self.editor.objectMgr.findObjectById(itemId)\n        if self.currObj:\n            self.PopupMenu(self.menu, pos)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_25",
    "parent": "processed_documents/context_documents/0e31b16d_SceneGraphUIBase.json",
    "chunk_number": 372
  }
}