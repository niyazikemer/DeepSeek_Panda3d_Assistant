{
  "content": "The context provided explains how to set up a CollisionNode and attach a CollisionRay to detect clickable 3D objects in Panda3D. It involves initializing necessary components like the traverser, handler, and attaching them to the camera for accurate mouse interaction detection. Additionally, it demonstrates tagging objects with specific identifiers to facilitate correct object recognition post-collision, ensuring the parent node containing the tag is retrieved when an object is clicked. This setup is essential for implementing interactive 3D environments where user input needs to precisely target intended objects.\n\npickerNode = new CollisionNode(\"mouseRay\");\npickerNP = camera.attach_new_node (pickerNode);\npickerNode->set_from_collide_mask(GeomNode::get_default_collide_mask());\npickerRay = new CollisionRay();\npickerNode->add_solid(pickerRay);\nmyHandler = new CollisionHandlerQueue();\nmyTraverser.add_collider(pickerNP, myHandler);\n\nFor any object that you want to be pickable you should add a flag to it. The easiest way is to use the ~.NodePath.set_tag() function:\n\npython\n\nobject1.setTag('myObjectTag', '1')\nobject2.setTag('myObjectTag', '2')\n\ncpp\n\nobject1.set_tag(\"myObjectTag\", \"1\");\nobject2.set_tag(\"myObjectTag\", \"2\");\n\nThe above example sets the tag 'myObjectTag' on two objects in your graph that you want to designate as pickable. We will check for the presence of this tag after we get the response back from the collision system.\n\npython",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_642",
    "parent": "processed_documents/context_documents/89de807b_91a421cd_clicking-on-3d-objects.json",
    "chunk_number": 7419
  }
}