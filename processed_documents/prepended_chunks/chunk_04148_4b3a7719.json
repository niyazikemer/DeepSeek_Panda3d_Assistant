{
  "content": "The chunk defines support classes for the InputState class, including token classes (WatchToken and ForceToken) for managing event subscriptions and forced state values respectively, as well as a TokenGroup class for grouping multiple tokens together. These helper classes provide mechanisms for cleanly releasing resources and managing input state operations within the InputState system.\n\nContext:\nThe code chunk contains supporting classes that work with the main InputState class to manage event watching, state forcing, and tokenized resource management. Specifically:\n\n- InputStateWatchToken: Manages event subscriptions and releases them properly\n- InputStateForceToken: Handles forced state values and cleanup\n- InputStateTokenGroup: Groups multiple tokens together for batch operations\n\nThese classes provide the necessary infrastructure for cleanly managing input states and associated resources in the InputState system.\n\nclass InputStateWatchToken(InputStateToken, DirectObject.DirectObject):\n    def release(self):\n        self._inputState._ignore(self)\n        self.ignoreAll()\n\n\nclass InputStateForceToken(InputStateToken):\n    def release(self):\n        self._inputState._unforce(self)\n\n\nclass InputStateTokenGroup:\n    def __init__(self):\n        self._tokens = []\n\n    def addToken(self, token):\n        self._tokens.append(token)\n\n    def release(self):\n        for token in self._tokens:\n            token.release()\n        self._tokens = []\n\n    #snake_case alias:\n    add_token = addToken",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_232",
    "parent": "processed_documents/context_documents/f48bff8b_InputState.json",
    "chunk_number": 4148
  }
}