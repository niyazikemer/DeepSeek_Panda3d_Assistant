{
  "content": "The chunk is part of a larger code block that constructs the 'Properties' tab in an object editor interface. It handles different types of UI elements (ENTRY, SLIDE, SPIN) by checking their property definitions and creating corresponding widgets based on their configuration. The context involves iterating over property definitions and conditionally building UI components for each property type within the Properties tab setup.\n\n**Context:**\nThe code chunk is part of a loop that processes property definitions to construct the 'Properties' tab in an object editor interface. It checks if the property type matches ENTRY, SLIDE, or SPIN conditions and creates corresponding UI elements (widgets) based on the property's configuration details. This section is crucial for dynamically building the Properties tab with appropriate input fields for each defined property type.\n\nif propType == OG.PROP_UI_ENTRY:\n                propUI = ObjectPropUIEntry(self.propsPane, key)\n                propUI.setValue(value)\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_SLIDE:\n                if len(propDef) <= OG.PROP_RANGE:\n                    continue\n                propRange = propDef[OG.PROP_RANGE]\n\n                if value is None:\n                    continue\n\n                if propDataType != OG.PROP_FLOAT:\n                    value = float(value)\n\n                propUI = ObjectPropUISlider(self.propsPane, key, value, propRange[OG.RANGE_MIN], propRange[OG.RANGE_MAX])\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_SPIN:\n                if len(propDef) <= OG.PROP_RANGE:\n                    continue\n                propRange = propDef[OG.PROP_RANGE]\n\n                if value is None:\n                    continue",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_22",
    "parent": "processed_documents/context_documents/2853beeb_ObjectPropertyUI.json",
    "chunk_number": 341
  }
}