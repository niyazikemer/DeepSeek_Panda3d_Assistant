{
  "content": "The `enableHandles` method enables specific or multiple manipulation handles (e.g., 'x-Post', 'y-Ring') for 3D object interaction. It accepts a list of handle names or shortcut strings like 'all' to enable all handles, improving user interface interactivity by controlling which visual elements are active during object manipulation.\n\ndef enableHandles(self, handles):\n        if isinstance(handles, list):\n            for handle in handles:\n                self.enableHandle(handle)\n        elif handles == 'x':\n            self.enableHandles(['x-post','x-ring','x-disc', 'x-scale'])\n        elif handles == 'y':\n            self.enableHandles(['y-post','y-ring','y-disc', 'y-scale'])\n        elif handles == 'z':\n            self.enableHandles(['z-post','z-ring','z-disc', 'z-scale'])\n        elif handles == 'post':\n            self.enableHandles(['x-post','y-post','z-post'])\n        elif handles == 'ring':\n            self.enableHandles(['x-ring','y-ring','z-ring'])\n        elif handles == 'disc':\n            self.enableHandles(['x-disc','y-disc','z-disc'])\n        elif handles == 'scale':\n            self.enableHandles(['x-scale','y-scale','z-scale'])\n        elif handles == 'all':\n            self.enableHandles(['x-post','x-ring','x-disc','x-scale',",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_179",
    "parent": "processed_documents/context_documents/4f678cc8_DirectManipulation.json",
    "chunk_number": 3265
  }
}