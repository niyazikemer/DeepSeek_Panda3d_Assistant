{
  "content": "The given chunk appears in a section discussing \"Awaitables\" in both Python and C++ contexts within Panda3D. It describes various objects and operations that can be awaited, including model loading, event handling, texture preparation, and mentions Panda3D's AsyncFuture class for asynchronous operations. The experimental nature of certain features is also noted. This information appears after explaining the basics of coroutines and their integration with Panda3D's task system, and before discussing more advanced topics related to coroutines and async programming in Panda3D.\n\nAny Python object that implements a suitable __await__ method.\n\nSome examples of operations that satisfy one or more of the above conditions:\n\nModel load operations, see async-loading.\n\nmessenger.future('event'), to suspend the coroutine until an event is fired from outside the coroutine.\n\ntex.prepare() <.Texture.prepare>, to wait for a texture to finish uploading to the graphics card. The returned value is the prepared .TextureContext object.\n\ncpp\n\nPanda3D provides the .AsyncFuture class to represent an operation that is currently underway. Any operation that returns this class is considered an asynchronous operation.\n\nExperimental feature\n\nAs of Panda3D 1.10, this is still an experimental feature, and some behavior may change in future versions. The upcoming version of Panda3D, 1.11, will improve support for cancellation of futures in particular.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_689",
    "parent": "processed_documents/context_documents/0a46205a_9afad06b_coroutines.json",
    "chunk_number": 7673
  }
}