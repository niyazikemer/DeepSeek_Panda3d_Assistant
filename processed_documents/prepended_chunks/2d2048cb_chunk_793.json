{
  "content": "The provided code chunk implements an `updateEffectsMenus` method that dynamically updates two menus in a graphical user interface (GUI) application. The method clears existing menu entries and rebuilds them by iterating over a dictionary of effects (`self.effectsDict`). For each effect, it adds a command to the effects label menu to select the effect and a checkbutton to the effects enable menu to toggle the effect's enabled state.\n\nThis code is part of a larger class that manages GUI elements related to effects, such as enabling/disabling them and selecting which effect to work with. The method ensures that both menus reflect the current state of available effects, allowing users to interactively manage their effects within an application.\n\ndef updateEffectsMenus(self):\n        # Get rid of old effects entries if any\n        self.effectsEnableMenu.delete(0, 'end')\n        self.effectsLabelMenu.delete(5, 'end')\n        self.effectsLabelMenu.add_separator()\n        # Add in a checkbutton for each effect (to toggle on/off)\n        keys = sorted(self.effectsDict.keys())\n        for name in keys:\n            effect = self.effectsDict[name]\n            self.effectsLabelMenu.add_command(\n                label = effect.getName(),\n                command = (lambda s = self,\n                           e = effect: s.selectEffectNamed(e.getName()))\n            )\n            effectActive = tk.IntVar()\n            effectActive.set(effect.isEnabled())\n            self.effectsEnableMenu.add_checkbutton(\n                label = effect.getName(),\n                variable = effectActive,\n                command = (lambda s = self,\n                           e = effect,",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_56",
    "parent": "processed_documents/context_documents/44a6f4d1_ParticlePanel.json",
    "chunk_number": 793
  }
}