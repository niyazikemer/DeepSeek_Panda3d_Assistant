{
  "content": "The provided code chunk contains methods for managing object control mappings, including setting priorities and offsets, which are used to organize and prioritize controlled objects within a system that handles camera and object positioning, likely in a networked environment for real-time collaboration. These methods facilitate mapping of named objects to their controlled counterparts with adjustable properties to influence their behavior and ordering during runtime.\n\ndef redoSortedPriorities(self):\n        self.sortedControlMappings = sorted(\n            [self.controlPriorities[key], key] for key in self.objectMappings\n        )\n\n    def addControlMapping(self, objectName, controlledName, offset = None,\n                          priority = 0):\n        if objectName not in self.controlMappings:\n            self.controlMappings[objectName] = controlledName\n            if offset is None:\n                offset = Vec3(0,0,0)\n            self.controlOffsets[objectName]  = offset\n            self.controlPriorities[objectName] = priority\n            self.redoSortedPriorities()\n        else:\n            self.notify.debug('attempt to add duplicate controlled object: ' + objectName)\n\n    def setControlMappingOffset(self, objectName, offset):\n        if objectName in self.controlMappings:\n            self.controlOffsets[objectName] = offset",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_109",
    "parent": "processed_documents/context_documents/dcc9d8a7_ClusterServer.json",
    "chunk_number": 1756
  }
}