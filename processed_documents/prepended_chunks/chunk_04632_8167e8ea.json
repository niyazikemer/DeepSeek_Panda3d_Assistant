{
  "content": "This function is situated in a section dedicated to performance analysis tools, specifically handling issues related to memory leaks during profiling.\n\n</context>\nThe `_profileWithoutGarbageLeak` function is designed for code profiling without causing memory leaks. It fits within the document's utilities for analyzing and optimizing code execution.\n\n</context>\n\nThe given chunk defines `_profileWithoutGarbageLeak`, a utility function that profiles code while preventing memory leaks, fitting into a section of performance analysis and debugging tools in the document.\n\n</context>\nThe `_profileWithoutGarbageLeak` function is a profiling tool aimed at safely analyzing code without causing memory leaks, placed among other profiling and debugging utilities in the document.\n\n</context>\nThis function sits within a collection of tools for profiling and debugging, specifically addressing memory leak issues during performance analysis.\n\n</context>\n\nThe given chunk is a utility function `_profileWithoutGarbageLeak` designed to profile code executions safely by preventing memory leaks, fitting into the document's section dedicated to profiling and debugging utilities.\n\ndef _profileWithoutGarbageLeak(cmd, filename):\n        # The profile module isn't necessarily installed on every Python\n        # installation, so we import it here, instead of in the module\n        # scope.\n        import profile\n        # this is necessary because the profile module creates a memory leak\n        Profile = profile.Profile\n        statement = cmd\n        sort = -1\n        #### COPIED FROM profile.run ####\n        prof = Profile()\n        try:\n            prof = prof.run(statement)\n        except SystemExit:\n            pass\n        if filename is not None:\n            prof.dump_stats(filename)\n        else:\n            #return prof.print_stats(sort)  #DCR\n            prof.print_stats(sort) #DCR\n        #################################\n        # eliminate the garbage leak\n        del prof.dispatcher",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_263",
    "parent": "processed_documents/context_documents/34ee3f4f_PythonUtil.json",
    "chunk_number": 4632
  }
}