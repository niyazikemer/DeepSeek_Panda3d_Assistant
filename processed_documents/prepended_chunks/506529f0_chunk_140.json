{
  "content": "The code chunk is part of a larger Python script that handles custom processing of documentation strings (docstrings) for an extension or plugin related to **Sphinx** and **Doxygen**. It specifically deals with detecting and formatting deprecation warnings in docstrings. The surrounding context involves parsing special tags within docstrings, such as `@return`, `@param`, and `@deprecated`, and converting them into a format compatible with Sphinx's documentation system.\n\nThe chunk processes the `@deprecated` tag by extracting its description and appending it to the list of processed lines in the form of a deprecation warning. It uses a helper function, `convert_doxygen_format()`, to convert the raw docstring content into a properly formatted string for inclusion in the final documentation output.\n\n**Sphinx**, **Doxygen**, **docstring processing**, **deprecation handling**, **documentation conversion**, **custom tags parsing**\n\nnewlines.append('')\n                continue\n            elif special == 'param':\n                #TODO\n                #if extra is not None:\n                #    _, name, desc = strline.split(' ', 2)\n                #    extra['param:' + name] = desc\n                continue\n            elif special == 'deprecated':\n                if newlines and newlines[-1]:\n                    newlines.append('')\n\n                if ' ' in strline:\n                    _, value = strline.split(' ', 1)\n\n                    # I'd love to use the proper Sphinx deprecated tag, but it\n                    # requires a version number, whereas Doxygen doesn't.\n                    newlines.append('**Deprecated**: ' + convert_doxygen_format(value, name, domain))\n                else:\n                    newlines.append('**Deprecated**')",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_8",
    "parent": "processed_documents/context_documents/5d34b79e_6676e524_conf.json",
    "chunk_number": 140
  }
}