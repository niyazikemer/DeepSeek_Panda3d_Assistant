{
  "content": "The chunk is part of a method within a class responsible for managing direct manipulation tools in a 3D modeling or visualization application. It sets up a task to handle mouse-controlled rolling (rotation around the point of interest) by initializing camera transformations relative to a marker and capturing initial screen coordinates for tracking rotation angles.\n\n```plaintext\nThe chunk is part of a method in a class handling direct manipulation tools, where it spawns a task to manage mouse roll input. It sets up the camera's position and orientation relative to a marker, captures screen coordinates for centering the roll operation, and initializes variables to track the rotation angle, allowing the user to smoothly rotate the view around an object using the mouse.\n```\n\nif self.lockRoll:\n                # flatten roll\n                self.camManipRef.setR(0)\n            direct.camera.setTransform(self.camManipRef, wrt)\n        return Task.cont\n\n    def spawnMouseRollTask(self):\n        # Kill any existing tasks\n        self.__stopManipulateCamera()\n        # Set at markers position in render coordinates\n        direct = ShowBaseGlobal.direct\n        self.camManipRef.setPos(self.coaMarkerPos)\n        self.camManipRef.setHpr(direct.camera, DG.ZERO_POINT)\n        t = Task.Task(self.mouseRollTask)\n        t.coaCenter = getScreenXY(self.coaMarker)\n        t.lastAngle = getCrankAngle(t.coaCenter)\n        # Store the camera/manipRef offset transform\n        t.wrt = direct.camera.getTransform(self.camManipRef)\n        self.__startManipulateCamera(task = t)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_181",
    "parent": "processed_documents/context_documents/b7d65bc2_DirectCameraControl.json",
    "chunk_number": 3326
  }
}