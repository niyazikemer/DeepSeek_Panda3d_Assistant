{
  "content": "The function `_get_thread_wrapper` is part of a Python module implementing threading primitives using Panda's core threading system. This module provides lock management, thread identification, local storage, and other essential concurrency utilities. The specific function ensures each thread has an associated wrapper object for managing thread-specific data and interactions within the Panda environment.\n\ndef _get_thread_wrapper(thread, wrapperClass):\n    \"\"\" Returns the thread wrapper for the indicated thread.  If there\n    is not one, creates an instance of the indicated wrapperClass\n    instead. \"\"\"\n\n    threadId = thread.getPythonIndex()\n    if threadId == -1:\n        # The thread has never been assigned a threadId.  Go assign one.\n\n        global _nextThreadId\n        _threadsLock.acquire()\n        try:\n            threadId = _nextThreadId\n            _nextThreadId += 1\n\n            thread.setPythonIndex(threadId)\n            wrapper = wrapperClass(thread, threadId)\n            _threads[threadId] = (thread, {}, wrapper)\n            return wrapper\n\n        finally:\n            _threadsLock.release()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_205",
    "parent": "processed_documents/context_documents/c7f84a43_thread.json",
    "chunk_number": 3799
  }
}