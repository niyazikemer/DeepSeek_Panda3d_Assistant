{
  "content": "The provided code chunk is situated within a method of the `ShowBase` class, which is part of a graphics library. This specific section is responsible for creating a cubemap texture from a given source. The process involves setting up the necessary camera nodes, adjusting their projection planes to match those of the source lens, rendering frames, and capturing the result as an image or screenshot. This functionality is typically used for generating environment maps or reflective surfaces in 3D graphics applications.\n\nContext: Graphics method for creating cubemap textures by rendering frames from a specified source.\n\nif sourceLens is None:\n            sourceLens = self.camLens\n\n        if hasattr(source, \"getWindow\"):\n            source = source.getWindow()\n\n        rig = NodePath(namePrefix)\n        buffer = source.makeCubeMap(namePrefix, size, rig, cameraMask, 1)\n        if buffer is None:\n            raise Exception(\"Could not make cube map.\")\n\n        # Set the near and far planes from the default lens.\n        lens = rig.find('**/+Camera').node().getLens()\n\n        lens.setNearFar(sourceLens.getNear(), sourceLens.getFar())\n\n        # Now render a frame to fill up the texture.\n        rig.reparentTo(camera)\n        self.graphicsEngine.openWindows()\n        self.graphicsEngine.renderFrame()\n        self.graphicsEngine.renderFrame()\n        self.graphicsEngine.syncFrame()\n\n        tex = buffer.getTexture()\n        saved = self.screenshot(namePrefix = namePrefix,\n                                defaultFilename = defaultFilename,\n                                source = tex)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_283",
    "parent": "processed_documents/context_documents/be1afc59_ShowBase.json",
    "chunk_number": 4993
  }
}