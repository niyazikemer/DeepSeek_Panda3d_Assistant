{
  "content": "\"\"\"\nThis code snippet provides the implementation of internal token classes for the `InputState` module in Panda3D. These tokens (`InputStateToken`, `InputStateWatchToken`) are used to manage event handling and state forcing via the `messenger` system, ensuring proper cleanup when tokens are released. The token system helps track input states (e.g., keyboard, mouse events) and provides a clean way to invalidate or force specific states within the application.\n\nThe code includes:\n- Base `InputStateToken` class with serialization and invalidation.\n- `InputStateWatchToken`, which inherits from `DirectObject` for event management.\n- Helper classes for managing forced input states via `_unforce`.\n\nThese tokens are meant to be used internally by `InputState` methods like `watchWithModifiers()` and `force()`.\n\"\"\"\n\nfrom direct.directnotify import DirectNotifyGlobal\nfrom direct.showbase import DirectObject\nfrom direct.showbase.PythonUtil import SerialNumGen\nfrom direct.showbase.MessengerGlobal import messenger\n\n\n# internal class, don't create these on your own\nclass InputStateToken:\n    _SerialGen = SerialNumGen()\n    Inval = 'invalidatedToken'\n\n    def __init__(self, inputState):\n        self._id = InputStateToken._SerialGen.next()\n        self._hash = self._id\n        self._inputState = inputState\n\n    def release(self):\n        # subclasses will override\n        assert False\n\n    def isValid(self):\n        return self._id != InputStateToken.Inval\n\n    def invalidate(self):\n        self._id = InputStateToken.Inval\n\n    def __hash__(self):\n        return self._hash\n\n    #snake_case alias:\n    is_valid = isValid\n\n\nclass InputStateWatchToken(InputStateToken, DirectObject.DirectObject):\n    def release(self):\n        self._inputState._ignore(self)\n        self.ignoreAll()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_232",
    "parent": "processed_documents/context_documents/f48bff8b_InputState.json",
    "chunk_number": 4147
  }
}