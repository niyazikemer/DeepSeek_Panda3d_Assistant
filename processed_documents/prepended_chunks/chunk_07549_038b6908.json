{
  "content": "This chunk explains why a cube has 24 vertices rather than just 8, highlighting the trade-offs between vertex sharing and the need for unique per-face color and UV data. It appears early in a section that introduces the fundamentals of how 3D models are structured and rendered by GPUs, emphasizing the practical implications of vertex design on performance and visual quality before moving into more advanced topics like textures and shaders.\n\nThe cube has six faces. Each face has four different vertices. Therefore this cube has 24 vertices. Theoretically a cube only needs eight vertices with each vertex being shared by three faces. The problem with this is that each vertex can only have one color, but what happens if we want each of the six faces to be a different color? This is impossible if the cube is only defined with eight vertices. There are more disadvantages if we only define the cube with eight vertices, which we will talk about later on. The only advantage of having fewer vertices is that we have to send fewer vertices to the graphic card but in almost all applications vertices are not a limiting factor. The memory consumption of vertices in comparison to the memory consumption of textures is negligible. Besides the color entry for a vertex, a vertex also has one UV entry associated with it.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_664",
    "parent": "processed_documents/context_documents/84ac09f0_3f7e393a_part-1.json",
    "chunk_number": 7549
  }
}