{
  "content": "\"\"\"The `orbitFly` method within the `DirectJoyboxOrbit` class manages orbital movement control using analog inputs. It calculates positioning adjustments based on scaled input values, applies rotational transformations via `orbitNode`, and handles node positioning relative to a reference coordinate system. This method is central to implementing joystick-driven orbital mechanics in the document's context of 3D scene manipulation and camera controls, overriding default normalization for specific input channels to enhance precision.\"\"\"\n\ndef orbitFly(self):\n        # Do nothing if no nodePath selected\n        if self.nodePath is None:\n            return\n        hprScale = (self.normalizeChannel(L_SLIDE, 0.1, 100) *\n                    DirectJoybox.hprMultiplier)\n        posScale = (self.normalizeChannel(R_SLIDE, 0.1, 100) *\n                    DirectJoybox.xyzMultiplier)\n        r = -0.01 * posScale * self.aList[R_TWIST] * self.deltaTime\n        rx = hprScale * self.aList[R_LEFT_RIGHT] * self.deltaTime\n        ry = -hprScale * self.aList[R_FWD_BACK] * self.deltaTime\n        x = posScale * self.aList[L_LEFT_RIGHT] * self.deltaTime\n        z = posScale * self.aList[L_FWD_BACK] * self.deltaTime\n        h = -1 * hprScale * self.aList[L_TWIST] * self.deltaTime\n        # Move dcs\n        self.nodePath.setX(self.nodePath, x)\n        self.nodePath.setZ(self.nodePath, z)\n        self.nodePath.setH(self.nodePath, h)\n        self.orbitNode(rx, ry, 0)\n        pos = self.nodePath.getPos(self.refCS)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_113",
    "parent": "processed_documents/context_documents/60fa0dd8_DirectJoybox.json",
    "chunk_number": 1813
  }
}