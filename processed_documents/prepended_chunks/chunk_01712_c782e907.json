{
  "content": "The provided code chunk belongs to the `ClusterClient` class, which is responsible for managing communication with server processes in a distributed rendering system. The methods `sendCamFrustum` and `sendNamedMovementDone` are part of the client's functionality to send specific commands or data to connected servers. \n\n- `sendCamFrustum`: This method sends camera frustum parameters (focal length, film size, and film offset) to the server, ensuring synchronization of camera settings across distributed nodes.\n- `sendNamedMovementDone`: This method signals that a named movement operation has been completed, likely used for coordinating tasks or animations in a cluster environment.\n\nThese methods contribute to the overall functionality of the `ClusterClient` class by enabling precise control and synchronization of rendering parameters and operations across multiple processes.\n\ndef sendCamFrustum(self, focalLength, filmSize, filmOffset):\n        ClusterClient.notify.info(\"send cam frustum...\")\n        ClusterClient.notify.info(\n            ((\"packet %d\" % self.msgHandler.packetNumber) +\n             (\" fl, fs, fo=%0.3f, (%0.3f, %0.3f), (%0.3f, %0.3f)\" %\n              (focalLength, filmSize[0], filmSize[1],\n               filmOffset[0], filmOffset[1])))\n        )\n        datagram = self.msgHandler.makeCamFrustumDatagram(\n            focalLength, filmSize, filmOffset)\n        self.cw.send(datagram, self.tcpConn)\n\n    def sendNamedMovementDone(self):\n\n        datagram = self.msgHandler.makeNamedMovementDone()\n        self.cw.send(datagram, self.tcpConn)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_105",
    "parent": "processed_documents/context_documents/99faa2ac_ClusterClient.json",
    "chunk_number": 1712
  }
}