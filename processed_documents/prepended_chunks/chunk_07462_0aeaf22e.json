{
  "content": "The code chunk is situated within a guide that explains how to load and animate a Panda model in C++. The section provides instructions for creating a custom Actor class to handle model loading, animation binding using AnimControl or AnimControlCollection, and demonstrates how to ensure animations display correctly by calling loop_animations.\n\nload the Actor Model\n\nload the animations\n\nbind the model and the animations using AnimControl or AnimControlCollection\n\nThe next sample will load the panda model and the walk animation. the call: window->loop_animations(0); does the magic of binding all the loaded models and their animations under the node path: render . it's very important to note that any animations loaded after the above call will not show until the same method is called again. also any animations loaded under a node path which doesn't belong to render (for example: render_2d) will not show even if the call: window->loop_animations(0); is made. For such animations to show, other steps must be applied (more on this later).\n\nloading-and-animating-the-panda-model.cxx\n\nWe are first loading the model file and the animation file like ordinary models. Then, we are simply calling loop_animations(0) to loop all animations.\n\nRun the Program\n\nThe result is a panda walking in place as if on a treadmill:",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_651",
    "parent": "processed_documents/context_documents/066a58cd_94f760c0_loading-and-animating-the-panda-model.json",
    "chunk_number": 7462
  }
}