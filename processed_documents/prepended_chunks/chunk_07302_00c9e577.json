{
  "content": "The chunk about collision detection with ODE should be situated within the section that introduces the foundational concepts of setting up a physics simulation in Panda3D using ODE, specifically after explaining the initial setup and before detailing specific collision solid types. This placement ensures readers understand the overall process of configuring collisions before exploring individual collision shapes, enhancing comprehension and search retrieval for relevant terms like \"collision detection,\" \"ODE,\" \"autoCollide,\" and related setups.\n\n**Context:**\n\nTo effectively utilize Panda3D's physics engine with ODE, it's essential to first grasp how collision detection is managed. The following section outlines the necessary steps to configure collision detection, ensuring objects interact realistically within your simulation.\n\nCollision Detection with ODE\n\nCollision Detection\n\nThere are two types of collision detection: the kind that immediately makes the objects bounce back on a collision, and the kind that instead of making the objects bounce back immediately creates control joints instead. The latter is the method the Open Dynamics Engine uses. Normally, you would use near callbacks to make the control joints and have the objects bounce back. However, Panda3D has an autoCollide feature that automatically does these things for you.\n\nThese are the steps needed to have your objects collide with each other:\n\nCreate an OdeSpace (explained below). Use setAutoCollideWorld(world) to let the OdeSpace know in which world you want to collide things.\n\nCreate an OdeJointGroup() to hold the contact joints. Use space.setAutoCollideJointGroup to let the space know in which OdeJointGroup you would like to store the contact joints.\n\nConfigure the surface table for the world.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_624",
    "parent": "processed_documents/context_documents/cde8e306_e796df8b_collision-detection.json",
    "chunk_number": 7302
  }
}