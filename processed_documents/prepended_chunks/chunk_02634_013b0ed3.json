{
  "content": "The provided code chunk introduces three new utility methods to the FSM class: `getCurrentStateOrTransition`, `isInTransition`, and `forceTransition`. These methods enhance the FSM's introspection and control capabilities:\n\n- `getCurrentStateOrTransition()` provides insight into the FSM's current operational status, whether it is in a stable state or actively transitioning.\n- `isInTransition()` offers a quick check to determine if the FSM is mid-transition.\n- `forceTransition()` allows for direct state changes bypassing normal filters, useful for emergency overrides.\n\nThese methods are situated within the overall document as part of the FSM's state management utilities.\n\ndef getCurrentStateOrTransition(self):\n        # Returns the current state if we are in a state now, or the\n        # transition we are performing if we are currently within\n        # the enter or exit function for a state.\n        self.fsmLock.acquire()\n        try:\n            if self.state:\n                return self.state\n            return '%s -> %s' % (self.oldState, self.newState)\n        finally:\n            self.fsmLock.release()\n\n    def isInTransition(self):\n        self.fsmLock.acquire()\n        try:\n            return self.state is None\n        finally:\n            self.fsmLock.release()\n\n    def forceTransition(self, request, *args):\n        \"\"\"Changes unconditionally to the indicated state.  This\n        bypasses the filterState() function, and just calls\n        exitState() followed by enterState().\n\n        If the FSM is currently undergoing a transition, this will\n        queue up the new transition.",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_144",
    "parent": "processed_documents/context_documents/4baea650_FSM.json",
    "chunk_number": 2634
  }
}