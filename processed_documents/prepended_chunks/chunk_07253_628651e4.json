{
  "content": "This chunk describes how to handle mouse movement within a game window when using \"absolute\" mode, ensuring continuous event reporting while keeping the cursor centered for better control. The code example demonstrates how to schedule a Task to re-center the mouse position, treating it as relative input.\n\n```python\n# Example: Handling Mouse Centering in Absolute Mode\n\nimport direct.task.Task\n\ndef center_mouse(task):\n    mw = base.mouseWatcherNode\n    if mw.hasMouse():\n        x, y = mw.getMouseX(), mw.getMouseY()\n        props = base.win.getProperties()\n        base.win.movePointer(0, props.getWidth() // 2, props.getHeight() // 2)\n        return direct.task.Task.continue\ntaskMgr.add(center_mouse, 'center_mouse_task')\n```\n\nThis code continuously tracks the mouse position and re-centers it, providing relative movement input suitable for game controls.\n\nThis is effectively the same as \"absolute\" mode, but you can be assured the mouse will remain within the window as long as the mode is in effect and the window remains open.\n\nThe mouse will report events continuously, but it will stick to the edges of the window. So, for a game, this is probably still not desirable.\n\nTo accommodate this, you can schedule a Task to fetch the current mouse position, manually re-center the mouse afterward, and otherwise behave as if the mouse events were generated by the relative mode.\n\nFor example:\n\npython\n\nmw = base.mouseWatcherNode\n\nif mw.hasMouse():\n    # get the position, which at center is (0, 0)\n    x, y = mw.getMouseX(), mw.getMouseY()\n\n    # move mouse back to center\n    props = base.win.getProperties()\n    base.win.movePointer(0,\n                         props.getXSize() // 2,\n                         props.getYSize() // 2)\n    # now, x and y can be considered relative movements",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_615",
    "parent": "processed_documents/context_documents/3cd15a53_530afc8e_mouse-support.json",
    "chunk_number": 7253
  }
}