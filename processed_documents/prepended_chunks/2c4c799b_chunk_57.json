{
  "content": "This class extends Sphinx's autodoc functionality by defining a custom documenter that excludes certain types from autosummary, enhancing control over documentation generation.\n\n```python\nclass ExcludeDocumenter(autodoc.Documenter):\n    \"\"\"Special documenter that excludes certain types from autosummary. It works by matching our desired excluded types, but because it has a special objtype not recognized by autosummary, it won't be included.\"\"\"\n    objtype = \"exclude\"\n    priority = 99\n\n    @classmethod\n    def can_document_member(cls, member, membername, isattr, parent):\n        if membername:\n            return False\n        if isinstance(member, type) and member.__name__.startswith(\"PointerToBase_ReferenceCountedVector_\"):\n            return True\n        return False\n\n    def generate(self, *args, **kwargs):\n        return\n```\n\nclass ExcludeDocumenter(autodoc.Documenter):\n    \"\"\"Special documenter that excludes certain types from autosummary.\n\n    It works by matching our desired excluded types, but because it has a\n    special objtype not recognized by autosummary, it won't be included.\"\"\"\n\n    objtype = \"exclude\"\n\n    priority = 99\n\n    @classmethod\n    def can_document_member(cls, member, membername, isattr, parent):\n        # We only want to trigger autosummary, which always passes the empty\n        # string as membername.\n        if membername:\n            return False\n\n        if isinstance(member, type):\n            if member.__name__.startswith(\"PointerToBase_ReferenceCountedVector_\"):\n                return True\n\n        return False\n\n    def generate(self, *args, **kwargs):\n        # This should never even be invoked by autodoc.\n        return",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_4",
    "parent": "processed_documents/context_documents/5d34b79e_f7df0e75_6676e524_conf.json",
    "chunk_number": 57
  }
}