{
  "content": "The provided chunk defines the `DirectTimecodeReader` class, which is part of a collection of classes for handling VRPN (Virtual Reality Peripheral Network) devices in a Python application. The class manages timecode data synchronization by initializing time components (hours, minutes, seconds, frames), attaching to the data graph, and providing methods like `enable()`. This context situates it within a suite of tools for processing input from various peripherals, enhancing searchability by highlighting its role in VRPN device management.\n\nclass DirectTimecodeReader(AnalogNode, DirectObject):\n    timecodeReaderCount = 0\n    def __init__(self, vrpnClient, device):\n        # Keep track of number of timecodeReader created\n        DirectTimecodeReader.timecodeReaderCount += 1\n        # Create a new dial node for the given device\n        AnalogNode.__init__(self, vrpnClient, device)\n        # Create a unique name for this dial object\n        self.name = ('DirectTimecodeReader-' +\n                     repr(DirectTimecodeReader.timecodeReaderCount))\n        # Initialize components of timecode\n        self.frames = 0\n        self.seconds = 0\n        self.minutes = 0\n        self.hours = 0\n\n        # Attach node to data graph\n        try:\n            self._base = base\n        except NameError:\n            self._base = simbase\n        self.nodePath = self._base.dataRoot.attachNewNode(self)\n\n    def enable(self):\n        self.nodePath.reparentTo(self._base.dataRoot)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_112",
    "parent": "processed_documents/context_documents/37437624_DirectDeviceManager.json",
    "chunk_number": 1785
  }
}