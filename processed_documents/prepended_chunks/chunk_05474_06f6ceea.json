{
  "content": "The document describes the `ParentMgr` class in Python, which manages parent-child relationships between avatars and other objects using unique identifiers called tokens. It explains how the system handles object registration, unregistration, and maintains a list of pending operations when parents are not immediately available. The chunk sits within this context, discussing how the order of object manifestation can be managed through DC file definitions or handled dynamically via pending reparents to avoid strict ordering dependencies.\n\nSince the order of object manifestation depends on the order of the\n    classes in the DC file, we could maintain an ordering of DC definitions\n    that ensures that the necessary objects are manifested before avatars.\n    However, it's easy enough to keep a list of pending reparents and thus\n    support the general case without requiring any strict ordering in the DC.\n    \"\"\"\n\n    notify = DirectNotifyGlobal.directNotify.newCategory('ParentMgr')",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_316",
    "parent": "processed_documents/context_documents/b7c366d2_ParentMgr.json",
    "chunk_number": 5474
  }
}