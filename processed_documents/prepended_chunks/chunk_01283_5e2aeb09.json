{
  "content": "The given code chunk appears to be part of a method responsible for writing out the configuration parameters of a particle system renderer, specifically handling the case where the renderer type is \"SpriteParticleRenderer\". This chunk fits within a larger class that manages particle systems, as indicated by methods like `setFactory`, `setEmitter`, and `writeParams`. The code handles writing out animation frame configurations and texture sources for sprite-based particle renderers.\n\nif lifeScale == SparkleParticleRenderer.SPSCALE:\n                lScale = \"SPSCALE\"\n            file.write(targ + '.renderer.setLifeScale(SparkleParticleRenderer.' + lScale + ')\\n')\n        elif self.rendererType == \"SpriteParticleRenderer\":\n            file.write('# Sprite parameters\\n')\n            if self.renderer.getAnimateFramesEnable():\n                file.write(targ + '.renderer.setAnimateFramesEnable(True)\\n')\n                rate = self.renderer.getAnimateFramesRate()\n                if rate:\n                    file.write(targ + '.renderer.setAnimateFramesRate(%.3f)\\n'%rate)\n            animCount = self.renderer.getNumAnims()\n            for x in range(animCount):\n                anim = self.renderer.getAnim(x)\n                if anim.getSourceType() == SpriteAnim.STTexture:\n                    file.write(targ + '.renderer.addTextureFromFile(\\'%s\\')\\n' % (anim.getTexSource(),))\n                else:",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_69",
    "parent": "processed_documents/context_documents/b3935c67_Particles.json",
    "chunk_number": 1283
  }
}