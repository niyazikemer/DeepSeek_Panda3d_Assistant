{
  "content": "The provided document explains how to handle keyboard inputs in Panda3D by distinguishing between physical keys and their corresponding events. The chunk discusses cases where certain keys, such as modifier keys (e.g., shift) and numpad keys, produce multiple or indistinguishable events, and provides examples of accepting key events using the `self.accept` method for handling presses, releases, and autorepeats. This context is important for developers to understand how to properly detect and respond to user input in their applications.\n\nSome physical keys are distinguishable from the events that they fire, and some are not. The modifier keys distinguish between left and right, but send a neutral event as well. (e.g. the left shift key sends both \"lshift\" and \"shift\" events when pressed) Save for \"num_lock\", \"*\", and \"+\" the numpad keys are indistinguishable from the main keyboard counterparts. (e.g. when Num Lock is on the both the numpad and keyboard 1 keys send \"1\")\n\nHere are some examples in code:\n\npython\n\n# Calls the function __spam() on the k key event.\nself.accept('k', self.__spam)\n\n# Calls __spam(eggs, sausage, bacon) on release of the K key.\nself.accept('k-up', self.__spam, [eggs, sausage, bacon,])\n\n# Exit on pressing the escape button.\nself.accept('escape', sys.exit)\n\n# Call spamAndEggs when up is pressed and at autorepeat if held.\nself.accept('arrow_up', self.spamAndEggs)\nself.accept('arrow_up-repeat', self.spamAndEggs)",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_711",
    "parent": "processed_documents/context_documents/66219fe4_571e1192_keyboard-support.json",
    "chunk_number": 7757
  }
}