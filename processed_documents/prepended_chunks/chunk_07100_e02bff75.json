{
  "content": "This chunk of code demonstrates the process of creating and setting up a rigid body node with a box shape for use in a physics simulation. The Python example creates a `BulletBoxShape` with dimensions (0.5, 0.5, 0.5), assigns it to a `BulletRigidBodyNode`, sets its mass to 1.0, attaches it to the render tree, positions it at (0, 0, 2), and adds it to the physics world. The C++ version achieves the same functionality using pointers and slightly different syntax but follows the same logical steps. Both examples are part of a larger document explaining how to set up and run a basic Bullet Physics simulation in Panda3D, demonstrating how to create dynamic objects that interact with the ground plane.\n\npython\n\nfrom panda3d.bullet import BulletBoxShape\n\nshape = BulletBoxShape(Vec3(0.5, 0.5, 0.5))\n\nnode = BulletRigidBodyNode('Box')\nnode.setMass(1.0)\nnode.addShape(shape)\n\nnp = render.attachNewNode(node)\nnp.setPos(0, 0, 2)\n\nworld.attachRigidBody(node)\n\ncpp\n\n...\nPT(BulletBoxShape) box_shape = new BulletBoxShape(LVecBase3(0.5, 0.5, 0.5));\nPT(BulletRigidBodyNode) box_rigid_node = new BulletRigidBodyNode(\"Box\");\n\nbox_rigid_node->set_mass(1.0f); // Gravity affects this rigid node.\nbox_rigid_node->add_shape(box_shape);\n\nNodePath np_box = window->get_render().attach_new_node(box_rigid_node);\nnp_box.set_pos(0, 0, 2);\nphysics_world->attach(box_rigid_node);\n...",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_584",
    "parent": "processed_documents/context_documents/b9e9e720_9e249116_hello-world.json",
    "chunk_number": 7100
  }
}