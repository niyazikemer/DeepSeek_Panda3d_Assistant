{
  "content": "The `CommonFilters` class in the provided code snippet is designed to implement various image post-processing effects, such as bloom and cartoon ink, which enhance or modify rendered images. These filters are implemented using the Cg shading language. The class includes methods to enable or disable these filters, affecting how the final image is displayed.\n\n# Context for Chunk Insertion:\n\nThe `CommonFilters` class encompasses a collection of common image post-processing effects, leveraging the Cg shading language for implementation. It provides functionalities such as bloom and cartoon ink, each with specific methods to apply or remove them. The current structure consolidates all filters into a single module due to the complexity of integrating multiple shaders seamlessly, aiming for a more efficient framework in future developments.\n\nThe chunk explains that this class is part of an image processing system using Cg shaders, listing its features and acknowledging the need for a better modular approach. It's situated within a discussion about image post-processing techniques in computer graphics, emphasizing filter composition challenges.\n\n\"\"\"\nClass CommonFilters implements certain common image\npostprocessing filters.  See the :ref:`common-image-filters` page for\nmore information about how to use these filters.\n\nThese filters are written in the Cg shading language.\n\"\"\"\n\n# It is not ideal that these filters are all included in a single\n# monolithic module.  Unfortunately, when you want to apply two filters\n# at the same time, you have to compose them into a single shader, and\n# the composition process isn't simply a question of concatenating them:\n# you have to somehow make them work together.  I suspect that there\n# exists some fairly simple framework that would make this automatable.\n# However, until I write some more filters myself, I won't know what\n# that framework is.  Until then, I'll settle for this\n# clunky approach.  - Josh",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_218",
    "parent": "processed_documents/context_documents/1aaad34b_CommonFilters.json",
    "chunk_number": 3949
  }
}