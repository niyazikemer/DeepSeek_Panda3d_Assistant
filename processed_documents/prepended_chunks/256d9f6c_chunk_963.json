{
  "content": "The functions `setVFov` and `resetFov` are being added to a class that manages display region settings in a graphics application. These methods handle adjustments to the vertical field of view (VFOV) and allow resetting both horizontal and vertical FOVs to default values while maintaining code organization and functionality.\n\n```python\n    def setVFov(self, vFov):\n        \"\"\"\n        Adjusts the vertical field of view (VFOV), optionally maintaining aspect ratio if locked.\n        \n        Args:\n            vFov (float): The new vertical field of view value in degrees.\n        \"\"\"\n        dr = self.activeDisplayRegion\n        if dr:\n            if self.lockedFov.get():\n                sf = vFov / dr.getVfov()\n                hFov = min(dr.getHfov() * sf, 170.0)\n                dr.setFov(hFov, vFov)\n                self.hFov.set(hFov, 0)\n            else:\n                dr.setVfov(vFov)\n\n    def resetFov(self):\n        \"\"\"\n        Resets both horizontal and vertical fields of view to their default values.\n        \"\"\"\n        dr = self.activeDisplayRegion\n        if dr:\n            dr.setFov(45.0, 33.75)\n            self.hFov.set(45.0, 0)\n            self.vFov.set(33.75, 0)\n```\n\ndef setVFov(self, vFov):\n        dr = self.activeDisplayRegion\n        if dr:\n            if self.lockedFov.get():\n                sf = vFov/dr.getVfov()\n                hFov = min(dr.getHfov() * sf, 170.0)\n                dr.setFov(hFov, vFov)\n                # Update scale\n                self.hFov.set(hFov, 0)\n            else:\n                # Just set horizontal\n                dr.setVfov(vFov)\n\n    def resetFov(self):\n        dr = self.activeDisplayRegion\n        if dr:\n            dr.setFov(45.0, 33.75)\n            self.hFov.set(45.0, 0)\n            self.vFov.set(33.75, 0)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_60",
    "parent": "processed_documents/context_documents/65f40986_DirectSessionPanel.json",
    "chunk_number": 963
  }
}