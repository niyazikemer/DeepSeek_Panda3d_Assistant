{
  "content": "The provided code chunk is a method within the `ContainerLeakDetector` class designed to simulate container leaks for testing purposes. It creates intentional memory leaks using non-weak references and periodically removes some references to test garbage collection.\n\ndef _createContainerLeak():\n    def leakContainer(task=None):\n        base = getBase()\n        if not hasattr(base, 'leakContainer'):\n            base.leakContainer = {}\n        # use tuples as keys since they can't be weakref'd, and use an instance\n        # since it can't be repr/eval'd\n        # that will force the leak detector to hold a normal 'non-weak' reference\n\n        class LeakKey:\n            pass\n        base.leakContainer[(LeakKey(),)] = {}\n        # test the non-weakref object reference handling\n        if random.random() < .01:\n            key = random.choice(list(base.leakContainer.keys()))\n            ContainerLeakDetector.notify.debug(\n                'removing reference to leakContainer key %s so it will be garbage-collected' % safeRepr(key))\n            del base.leakContainer[key]\n        taskMgr.doMethodLater(10, leakContainer, 'leakContainer-%s' % serialNum())\n        if task:\n            return task.done\n    leakContainer()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_256",
    "parent": "processed_documents/context_documents/e2a31346_ContainerLeakDetector.json",
    "chunk_number": 4469
  }
}