{
  "content": "The chunk is situated within a class that manages various resource loading tasks, such as models, fonts, textures, and sounds. The methods in this section pertain to handling asynchronous requests and managing their states. Specifically, `cancelRequest` and `isRequestPending` are deprecated methods that now issue warnings and redirect users to newer alternatives (`cb.cancel()` and `cb.done()`, respectively). Additionally, the `loadModelOnce` method is introduced, which deals with loading a model in a way that ensures it's only loaded once, possibly for optimization purposes. These methods are part of an object-oriented design aimed at efficiently managing resource loading processes.\n\n</context>\n\nThe chunk is part of a class handling asynchronous resource management, including deprecated request cancellation and checking methods, along with a new method to load models once.\n\nThis is now deprecated: call cb.cancel() instead. \"\"\"\n        if __debug__:\n            warnings.warn(\"This is now deprecated: call cb.cancel() instead.\", DeprecationWarning, stacklevel=2)\n        cb.cancel()\n\n    def isRequestPending(self, cb):\n        \"\"\" Returns true if an asynchronous loading or flatten request\n        issued earlier is still pending, or false if it has completed or\n        been cancelled.\n\n        This is now deprecated: call cb.done() instead. \"\"\"\n        if __debug__:\n            warnings.warn(\"This is now deprecated: call cb.done() instead.\", DeprecationWarning, stacklevel=2)\n        return bool(cb.requests)\n\n    def loadModelOnce(self, modelPath):\n        \"\"\"\n        modelPath is a string.",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_250",
    "parent": "processed_documents/context_documents/7b86925a_Loader.json",
    "chunk_number": 4381
  }
}