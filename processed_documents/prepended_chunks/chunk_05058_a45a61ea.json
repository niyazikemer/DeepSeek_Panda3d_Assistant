{
  "content": "The given code chunk is part of an event dispatching system implemented in a `Messenger` class. The method `__dispatch` processes event callbacks by iterating over registered acceptors, invoking their handler functions with any additional arguments, and removing non-persistent listeners from tracking structures after execution. This mechanism ensures efficient event handling and cleanup within the system.\n\n**Context:**  \nThe code chunk implements the core event dispatching logic in the `Messenger` class, where events are processed by iterating through registered handlers, executing them, and managing listener persistence.\n\ndef __dispatch(self, acceptorDict, event, sentArgs, foundWatch):\n        for id in list(acceptorDict.keys()):\n            # We have to make this apparently redundant check, because\n            # it is possible that one object removes its own hooks\n            # in response to a handler called by a previous object.\n            #\n            # NOTE: there is no danger of skipping over objects due to\n            # modifications to acceptorDict, since the for..in above\n            # iterates over a list of objects that is created once at\n            # the start\n            callInfo = acceptorDict.get(id)\n            if callInfo:\n                method, extraArgs, persistent = callInfo\n                # If this object was only accepting this event once,\n                # remove it from the dictionary\n                if not persistent:\n                    # This object is no longer listening for this event\n                    eventDict = self.__objectEvents.get(id)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_286",
    "parent": "processed_documents/context_documents/370368dd_Messenger.json",
    "chunk_number": 5058
  }
}