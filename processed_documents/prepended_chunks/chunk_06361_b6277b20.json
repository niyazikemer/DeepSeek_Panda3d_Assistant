{
  "content": "The provided chunk offers a practical guide to writing GLSL shaders in Panda3D, focusing on an example that demonstrates texture manipulation. This should be situated right after introducing how to load and apply shaders, providing immediate context for users to understand both the setup and implementation of custom shader code.\n\n```plaintext\nIn the document, this section provides a concrete example of creating GLSL vertex and fragment shaders in Panda3D. It follows the explanation of loading shaders and setting shader inputs, giving readers an actionable guide on writing their own shaders.\n```\n\nIn the future, Panda3D will automatically convert the shader to the appropriate version of GLSL supported by the graphics card. In the meantime, it is recommended to write your shaders in GLSL 150 or later, unless you need to support very old graphics hardware, in which case it may be necessary to target GLSL 120.\n\nExample Shader\n\nThis example applies the first texture of the model using the first texture coordinate set, but switches the red and blue channels around.\n\nThis is the vertex shader, named myshader.vert:\n\n#version 150\n\n// Uniform inputs\nuniform mat4 p3d_ModelViewProjectionMatrix;\n\n// Vertex inputs\nin vec4 p3d_Vertex;\nin vec2 p3d_MultiTexCoord0;\n\n// Output to fragment shader\nout vec2 texcoord;\n\nvoid main() {\n  gl_Position = p3d_ModelViewProjectionMatrix * p3d_Vertex;\n  texcoord = p3d_MultiTexCoord0;\n}\n\nThis is the fragment shader, named myshader.frag:\n\n#version 150\n\nuniform sampler2D p3d_Texture0;\n\n// Input from vertex shader\nin vec2 texcoord;",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_462",
    "parent": "processed_documents/context_documents/8ddfa146_94b58d23_shader-basics.json",
    "chunk_number": 6361
  }
}