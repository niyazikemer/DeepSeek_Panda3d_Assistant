{
  "content": "The `setCollideMask` method allows you to recursively set the \"into\" collide mask for a NodePath and all its children. This is useful for enabling or modifying collision detection properties across multiple nodes at once. The optional parameters allow for fine-grained control, such as changing specific bits of the mask or targeting only certain types of nodes (e.g., CollisionNodes).\n\npython\n\nnodePath.setCollideMask(newMask, bitsToChange, nodeType)\n\ncpp\n\nnode_path.set_collide_mask(new_mask, bits_to_change, node_type);\n\nThe parameter newMask specifies the new mask to apply. The remaining parameters are optional; if they are omitted, then every node at nodePath level and below is assigned newMask as the new into collide mask. However, if bitsToChange is specified, it represents the set of bits that are to be changed from the original; bits that are 0 in bitsToChange will not be modified at each node level. If nodeType is specified, it should be a TypeHandle that represents the type of node that will be modified, e.g. .CollisionNode.get_class_type() to affect only CollisionNodes.\n\nExamples:\n\npython\n\nnodePath.setCollideMask(BitMask32(0x10))\n\ncpp\n\nnode_path.set_collide_mask(BitMask32(0x10));\n\nThis sets the into collide mask of nodePath, and all children of nodePath, to the hexadecimal value 0x10, regardless of the value each node had before.\n\npython",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_725",
    "parent": "processed_documents/context_documents/8c4f78b1_4a8f1002_collision-bitmasks.json",
    "chunk_number": 7839
  }
}