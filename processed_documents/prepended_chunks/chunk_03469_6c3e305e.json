{
  "content": "This code chunk is part of the `Selection` class within a set of tools designed for 3D selection and collision detection in Direct3D applications. The chunk implements core functionality for mouse-based object selection using Panda3D's collision system, including handling bitmask filtering and geometric collision checks. It provides essential methods for setting up and performing selections based on user input coordinates (mouse positions), making it a key component of the application's interaction logic.\n\nThe code is situated within a broader library that includes various selection tools (`SelectionRay`, `SelectionSegment`, `SelectionSphere`, `SelectionBox`), each tailored for different types of 3D selection tasks. This specific chunk focuses on mouse-driven selections, collision detection, and filtering based on bitmasks or geometric properties, enabling precise object interaction in 3D environments.\n\nThe code's context revolves around user input handling, scene traversal for collisions, and result processing, making it crucial for applications requiring interactive 3D selection capabilities.\n\nif base.direct:\n            self.collider.setFromLens(base.direct.camNode, mx, my)\n        else:\n            self.collider.setFromLens(base.camNode, mx, my)\n        self.ct.traverse(targetNodePath)\n        self.sortEntries()\n\n    def pickBitMask(self, bitMask = BitMask32.allOff(),\n                    targetNodePath = None,\n                    skipFlags = DG.SKIP_ALL):\n        if targetNodePath is None:\n            targetNodePath = render\n        self.collideWithBitMask(bitMask)\n        self.pick(targetNodePath)\n        # Determine collision entry\n        return self.findCollisionEntry(skipFlags)\n\n    def pickGeom(self, targetNodePath = None, skipFlags = DG.SKIP_ALL,\n                 xy = None):\n        if targetNodePath is None:\n            targetNodePath = render\n        self.collideWithGeom()\n        self.pick(targetNodePath, xy = xy)\n        # Determine collision entry\n        return self.findCollisionEntry(skipFlags)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_186",
    "parent": "processed_documents/context_documents/eebfe557_DirectSelection.json",
    "chunk_number": 3469
  }
}