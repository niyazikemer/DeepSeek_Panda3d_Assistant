{
  "content": "The chunk is part of a step-by-step guide demonstrating the implementation of basic AI behavior using the PandAI library, specifically focusing on the 'seek' functionality. This section outlines the process of obtaining an AIBehaviors reference from an AICharacter instance and invoking the seek method, followed by initiating the AI simulation loop to observe the behavior in action. The code provided illustrates how these steps are integrated into a World class setup for testing purposes.\n\n```python\n\"\"\"\nThis chunk is part of a PandAI tutorial demonstrating basic AI behavior implementation.\nIt explains how to obtain AIBehaviors from an AICharacter and initiate the seek functionality,\nfollowed by starting the AIWorld update task to observe the behavior in action within the World class.\n\"\"\"\n```\n\nStep 6:\n\nGet a reference to the AIBehaviors object of your previously created AICharacter class via the 'getAiBehaviors' function().\n\nStep 7:\n\nCall the seek function on your AIBehaviors reference (previously created). The seek function takes a NodePath or a Vector3 position to seek to.\n\nStep 8:\n\nStart your AIWorld update task which you created earlier.\n\nStep 9:\n\nWatch how your awesome seek function works!\n\nThe actual code:\n\nimport direct.directbase.DirectStart\nfrom panda3d.core import *\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.task import Task\nfrom direct.actor.Actor import Actor\n#for Pandai\nfrom panda3d.ai import *\n\nclass World(DirectObject):\n\n    def __init__(self):\n        base.disableMouse()\n        base.cam.setPosHpr(0, 0, 55, 0, -90, 0)\n\n        self.loadModels()\n        self.setAI()",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_589",
    "parent": "processed_documents/context_documents/3d40f64e_a5e34e22_getting-started.json",
    "chunk_number": 7125
  }
}