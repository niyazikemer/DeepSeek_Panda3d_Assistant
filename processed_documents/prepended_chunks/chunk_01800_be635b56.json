{
  "content": "This code chunk is part of a class definition for `DirectJoybox`, which manages input from a joystick to control 3D objects in a scene. The methods handle event responses (like button presses) and mode switching (e.g., changing between free flight and orbiting). Specifically, the chunk defines functions to accept or ignore camera-related events, set the current operational mode (`setMode`), enable heading node path adjustments (`setUseHeadingNP`), toggle in-place rotation (`setRotateInPlace`), and implement basic joystick-based movement logic (`joyboxFly`). These methods are essential for enabling smooth, interactive control over 3D objects within a scene.\n\ndef acceptUprightCameraEvent(self, button = L_UPPER):\n        self.accept(self.getEventName(button),\n                    base.direct.cameraControl.orbitUprightCam)\n\n    def ignoreUprightCameraEvent(self, button = L_UPPER):\n        self.ignore(self.getEventName(button))\n\n    def setMode(self, func, name):\n        self.disable()\n        self.updateFunc = func\n        self.modeName = name\n        self.showMode(self.modeName)\n        self.enable()\n\n    def setUseHeadingNP(self, enabled):\n        self.useHeadingNP = enabled\n\n    def setRotateInPlace(self, enabled):\n        self.rotateInPlace = enabled\n\n    def joyboxFly(self):\n        # Do nothing if no nodePath selected\n        if self.nodePath is None:\n            return\n\n        hprScale = ((self.aList[L_SLIDE] + 1.0) *\n                    50.0 * DirectJoybox.hprMultiplier)\n        posScale = ((self.aList[R_SLIDE] + 1.0) *\n                    50.0 * DirectJoybox.xyzMultiplier)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_113",
    "parent": "processed_documents/context_documents/60fa0dd8_DirectJoybox.json",
    "chunk_number": 1800
  }
}