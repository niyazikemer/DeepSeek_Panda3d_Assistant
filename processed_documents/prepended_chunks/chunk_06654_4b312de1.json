{
  "content": "This section explains how to combine the use of a general-purpose `defaultFilter` method with specific state-based filter methods in an FSM implementation. It describes that when processing requests, the FSM will prioritize using a custom `filterStateName()` method if it exists for a given state; otherwise, it will fall back to using the `defaultFilter` method. This approach allows developers to balance flexibility and code reuse while implementing FSM logic in Python.\n\nIn practice, you can mix- and-match the use of the defaultFilter method and your own custom methods. The defaultFilter method will be called only if a particular state's custom filter method does not exist. If a particular state's filterStateName method is defined, that method will be called upon a new request; it can do any custom logic you require (and it can call up to the defaultFilter method if you like).\n\ncpp\n\nThis section does not apply to C++ users.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_528",
    "parent": "processed_documents/context_documents/72c7beb9_6de13beb_fsm-with-input.json",
    "chunk_number": 6654
  }
}