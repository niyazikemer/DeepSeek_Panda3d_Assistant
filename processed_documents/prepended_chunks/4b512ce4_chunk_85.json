{
  "content": "This chunk is part of a function that processes autodoc references in Python docstrings. It specifically handles cases where custom text was used to reference a method or attribute, ensuring that snake_case names are converted to camelCase in the rendered output. This facilitates consistency between the original code and the generated documentation by adjusting the casing automatically when explicit references use different naming conventions.\n\nelif domain.name == 'py' and len(contnode.children) and node.get('refexplicit'):\n            # Custom text was used.  Replace snake_case with camelCase in it.\n            # This allows doing something like:\n            # :meth:`model.set_color() <.NodePath.set_color>`\n            # ..and still have it translate to the correct casing.\n            oldpart = target.rsplit('.', 1)[-1]\n            newpart = resolved[1].rsplit('.', 1)[-1]\n            if oldpart != newpart:\n                text = contnode.children[0].astext()\n                text = text.replace('::', '.')\n                text = text.replace('.' + oldpart + '(', '.' + newpart + '(')\n                if text.startswith(oldpart + '('):\n                    text = newpart + text[len(oldpart):]\n                contnode.children[0] = nodes.Text(text)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_4",
    "parent": "processed_documents/context_documents/5d34b79e_f7df0e75_6676e524_conf.json",
    "chunk_number": 85
  }
}