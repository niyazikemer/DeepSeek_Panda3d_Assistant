{
  "content": "This chunk is part of an `Icon` class implementation that handles image processing and format conversion, specifically focusing on generating icon files in `.ico` format. The code calculates the required row sizes (`xorsize`, `andsize`) for aligning pixel data correctly in the ICO file format, computes the total data size including headers, and writes the necessary header information to the output file using `struct.pack`. This section is used when generating 8-bit color depth icons as part of the overall image processing pipeline.\n\n# Calculate row sizes\n            xorsize = size\n            if xorsize % 4 != 0:\n                xorsize += 4 - (xorsize % 4)\n            andsize = (size + 7) >> 3\n            if andsize % 4 != 0:\n                andsize += 4 - (andsize % 4)\n            datasize = 40 + 256 * 4 + (xorsize + andsize) * size\n\n            ico.write(struct.pack('<BBHHII', 0, 0, 1, 8, datasize, dataoffs))\n            dataoffs += datasize\n\n        # Write 24/32-bpp image headers.\n        for size, image in self.images.items():\n            if size > 256:\n                continue\n            elif size == 256:\n                ico.write(b'\\0\\0')\n            else:\n                ico.write(struct.pack('<BB', size, size))",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_135",
    "parent": "processed_documents/context_documents/7b38a77d_icon.json",
    "chunk_number": 2195
  }
}