{
  "content": "The provided code chunk is part of a profiling mechanism that intercepts and profiles file operations and marshaling activities. The functions manage the installation of custom profiling hooks for specific files, retrieve or store profiling results in dictionaries, and handle cleanup of this data. This context allows developers to monitor and analyze how files are accessed and data is serialized/deserialized within their application when profiling is enabled.\n\ndef _installProfileCustomFuncs(filename):\n        assert filename not in profileFilenames\n        profileFilenames.add(filename)\n        profileFilenameList.push(filename)\n        movedOpenFuncs.append(builtins.open)\n        builtins.open = _profileOpen\n        movedDumpFuncs.append(marshal.dump)\n        marshal.dump = _profileMarshalDump\n        movedLoadFuncs.append(marshal.load)\n        marshal.load = _profileMarshalLoad\n\n    def _getProfileResultFileInfo(filename):\n        return (profileFilename2file.get(filename, None),\n                profileFilename2marshalData.get(filename, None))\n\n    def _setProfileResultsFileInfo(filename, info):\n        f, m = info\n        if f:\n            profileFilename2file[filename] = f\n        if m:\n            profileFilename2marshalData[filename] = m\n\n    def _clearProfileResultFileInfo(filename):\n        profileFilename2file.pop(filename, None)\n        profileFilename2marshalData.pop(filename, None)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_263",
    "parent": "processed_documents/context_documents/34ee3f4f_PythonUtil.json",
    "chunk_number": 4629
  }
}