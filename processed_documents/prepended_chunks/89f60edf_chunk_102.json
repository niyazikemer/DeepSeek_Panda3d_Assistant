{
  "content": "The chunk contains methods (`collide`, `collide2`, `collide3`, `collide4`) that handle collision events between objects in a 3D scene using Panda3D, along with part of the `initCollisionSphere` method for setting up collision detection. These methods respond to 'into-' and 'outof-' collision events by modifying object appearance (color changes) or logging messages about collisions.\n\nprint(\"WERT\")\n\n    def collide(self, collEntry):\n        print(\"WERT: object has collided into another object\")\n        collParent = collEntry.getFromNodePath().getParent()\n        Sequence(\n            Func(collParent.setColor, (1, 0, 0, 1)),\n            Wait(0.2),\n            Func(collParent.setColor, (0, 1, 0, 1)),\n            Wait(0.2),\n            Func(collParent.setColor, (1, 1, 1, 1)),\n        ).start()\n\n    def collide2(self, collEntry):\n        print(\"WERT.: object is no longer colliding with another object\")\n\n    def collide3(self, collEntry):\n        print(\"WERT2: object has collided into another object\")\n\n    def collide4(self, collEntry):\n        print(\"WERT2: object is no longer colliding with another object\")\n\n    def initCollisionSphere(self, obj, show=False):\n        # Get the size of the object for the collision sphere.\n        bounds = obj.getChild(0).getBounds()\n        center = bounds.getCenter()\n        radius = bounds.getRadius() * 1.1",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_7",
    "parent": "processed_documents/context_documents/91ec09dc_dd7a764d_event-example.json",
    "chunk_number": 102
  }
}