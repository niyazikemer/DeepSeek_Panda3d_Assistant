{
  "content": "This section explains how to supply translation matrices to a shader by using the \"trans_x_to_y\" parameter, which allows converting between different coordinate systems in Panda3D. It highlights that this method provides a flexible way to handle nearly any required transform matrix, though not all combinations may be practical or commonly used.\n\nIn OpenGL, \"clip space\" and \"API clip space\" are equivalent.\n\nSupplying Translation Matrices to a Shader\n\nYou can use a shader parameter named \"trans_x_to_y\" to automatically obtain a matrix that converts any coordinate system to any other. The words x and y can be \"model,\" \"world,\" \"view,\" \"apiview,\" \"clip,\" or \"apiclip.\" Using this notation, you can build up almost any transform matrix that you might need. Here is a short list of popular matrices that can be recreated using this syntax. Of course, this isn't even close to exhaustive: there are seven keywords, so there are 7x7 possible matrices, of which 7 are the identity matrix.",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_557",
    "parent": "processed_documents/context_documents/84f019c6_7f49f363_coordinate-spaces.json",
    "chunk_number": 6955
  }
}