{
  "content": "This chunk is part of a Python class definition for an `Actor` class, which appears to be used for managing 3D character models and animations. The code includes methods for handling joints, parts, and level-of-detail (LOD) management in a graphical context. Specifically, the chunk defines a method `getJoints` that retrieves a list of joints from named parts or all parts, matching a specified joint name pattern. This is part of a larger document containing many utility functions for actor manipulation, such as binding animations, managing LODs, and accessing model components.\n\nThe code in this chunk is situated within the context of a class that handles 3D character models, allowing users to query and manage joints (likely\u9aa8\u9abc or articulation points) within parts of the model. The method `getJoints` provides flexibility by supporting pattern matching for joint names and optionally operating on specific LODs.\n\nThe surrounding code includes functions for managing actor components such as parts, bundles, animations, and transformations. This suggests that the class is part of a 3D animation or game development framework, likely using Panda3D or a similar library, given the mention of `GlobPattern` and other terms common in 3D graphics programming.\n\nIn summary, this chunk is from a comprehensive Python class for managing 3D actors, focusing on methods to retrieve joints based on patterns and optional constraints.\n\n# Get a handle to the joint.\n        joint = bundle.findChild(jointName)\n\n        if joint:\n            joint.clearNetTransforms()\n            joint.clearLocalTransforms()\n        else:\n            Actor.notify.warning(\"no joint named %s!\" % (jointName))\n\n    def getJoints(self, partName = None, jointName = '*', lodName = None):\n        \"\"\" Returns the list of all joints, from the named part or\n        from all parts, that match the indicated jointName.  The\n        jointName may include pattern characters like \\\\*. \"\"\"\n\n        joints=[]\n        pattern = GlobPattern(jointName)\n\n        if lodName is None and self.mergeLODBundles:\n            # Get the common bundle.\n            partBundleDicts = [self.__commonBundleHandles]",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_177",
    "parent": "processed_documents/context_documents/2763abe9_Actor.json",
    "chunk_number": 3092
  }
}