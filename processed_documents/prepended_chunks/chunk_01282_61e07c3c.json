{
  "content": "The document appears to be a Python class implementation managing particle effects in a 3D graphics framework like Panda3D. The code handles factory, emitter, renderer, and force components for particle systems, along with methods for enabling/disabling particles, setting up components, adding/removing forces, rendering, printing parameters, calculating pool size ranges, and accelerating particle simulations.\n\nThe chunk appears to be part of a method that writes configuration parameters to a file or string, specifically handling the \"SparkleParticleRenderer\" type. The code extracts and formats renderer-specific properties such as center color, edge color, birth radius, death radius, and life scale, then writes them to an output target (likely a Python script or configuration file).\n\nKey functionalities in the surrounding context include:\n1. Renderer-specific parameter serialization\n2. Particle effect customization\n3. Configuration generation for different particle renderer types\n\nThe code is part of a larger system for generating and managing particle effects, with this chunk focused on writing configuration parameters for sparkle-style particle renderers.\n\nContext: The document implements a particle effect management class with methods for configuring and simulating various types of particle systems in 3D graphics.\n\nelif self.rendererType == \"SparkleParticleRenderer\":\n            file.write('# Sparkle parameters\\n')\n            sColor = self.renderer.getCenterColor()\n            file.write((targ + '.renderer.setCenterColor(Vec4(%.2f, %.2f, %.2f, %.2f))\\n' % (sColor[0], sColor[1], sColor[2], sColor[3])))\n            sColor = self.renderer.getEdgeColor()\n            file.write((targ + '.renderer.setEdgeColor(Vec4(%.2f, %.2f, %.2f, %.2f))\\n' % (sColor[0], sColor[1], sColor[2], sColor[3])))\n            file.write(targ + '.renderer.setBirthRadius(%.4f)\\n' % self.renderer.getBirthRadius())\n            file.write(targ + '.renderer.setDeathRadius(%.4f)\\n' % self.renderer.getDeathRadius())\n            lifeScale = self.renderer.getLifeScale()\n            lScale = \"SPNOSCALE\"\n            if lifeScale == SparkleParticleRenderer.SPSCALE:\n                lScale = \"SPSCALE\"\n            file.write(targ + '.renderer.setLifeScale(SparkleParticleRenderer.' + lScale + ')\\n')",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_69",
    "parent": "processed_documents/context_documents/b3935c67_Particles.json",
    "chunk_number": 1282
  }
}