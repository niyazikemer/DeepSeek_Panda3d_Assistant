{
  "content": "The document provides a comprehensive overview of texture compression techniques, including disk-based formats like JPEG and PNG, in-memory block compression methods (e.g., DXT, 3Dc), pre-compressed TXO files, DDS format, and runtime texture caching. The chunk discusses the concept of in-memory block compression as an alternative to traditional image file compression, explains how it works by compressing small pixel blocks, highlights its benefits like reduced memory usage while sacrificing minimal quality, and outlines how to enable runtime compression via configuration settings.\n\nThere is a different option, however, for compressing texture images in-memory. Most modern graphics cards can use a handful of run-time compression algorithms to render directly from a texture that has been compressed in-memory. This is called block compression. It's not really very much like JPEG compression internally, but you can think of it in the same way. It does have some things in common: it reduces the size of the image dramatically (4 times or even 8 times smaller), and it sacrifices a tiny bit of image quality.\n\nMost block compression methods (such as DXT and 3Dc) operate on blocks of 4 by 4 pixels. Therefore, it is recommended that your texture size is a multiple of 4 in both dimensions, or extra padding will have to be applied.\n\nRuntime texture compression\n\nThe easiest way to enable compressed texture images is to put the following in your Config.prc file:\n\ncompressed-textures 1",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_591",
    "parent": "processed_documents/context_documents/e855bf7e_76bdc2be_texture-compression.json",
    "chunk_number": 7136
  }
}