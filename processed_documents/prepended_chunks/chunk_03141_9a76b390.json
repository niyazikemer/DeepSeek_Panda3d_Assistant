{
  "content": "The chunk defines the `__prepareBundle` method in an `Actor` class, which handles model loading and bundle preparation. This method initializes a node path as a bundle for an actor's part under a specified LOD (Level of Detail), ensuring proper naming and structure within the scene graph. It is crucial for setting up the actor's model components correctly in the Panda3D framework.\n\nContext: The `__prepareBundle` method in the Actor class prepares a node path as a bundle for an actor's part, ensuring proper initialization under a specific LOD to maintain correct model structure and naming within the scene graph.\n\ndef __prepareBundle(self, bundleNP, partModel,\n                        partName=\"modelRoot\", lodName=\"lodRoot\"):\n        assert partName not in self.__subpartDict\n\n        # Rename the node at the top of the hierarchy, if we\n        # haven't already, to make it easier to identify this\n        # actor in the scene graph.\n        if not self.gotName:\n            self.node().setName(bundleNP.node().getName())\n            self.gotName = 1\n\n        bundleDict = self.__partBundleDict.get(lodName, None)\n        if bundleDict is None:\n            # make a dictionary to store these parts in\n            bundleDict = {}\n            self.__partBundleDict[lodName] = bundleDict\n            self.__updateSortedLODNames()\n\n        node = bundleNP.node()\n        # A model loaded from disk will always have just one bundle.\n        assert node.getNumBundles() == 1\n        bundleHandle = node.getBundleHandle(0)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_177",
    "parent": "processed_documents/context_documents/2763abe9_Actor.json",
    "chunk_number": 3141
  }
}