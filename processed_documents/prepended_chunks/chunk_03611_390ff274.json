{
  "content": "The `FloaterWidget` is a customizable GUI component designed to create slider or input field-like widgets with adjustable appearance and behavior settings. It serves as a foundational class, enabling developers to configure aspects such as size, relief, border width, background color, numerical precision, and command execution on value changes. This widget is integral for creating more complex user interface elements like `Floater` and `FloaterGroup`, which extend its functionality with specific features tailored for grouped or specialized input handling.\n\n```python\nclass FloaterWidget(Pmw.MegaWidget):\n    \"\"\"\n    A customizable GUI component serving as the base class for creating slider or input field-like widgets.\n    \n    Features:\n        - Customizable appearance (relief, borderwidth, background).\n        - Configurable behavior (initial value, numerical precision).\n        - Support for command execution upon value updates.\n        \n    This widget is designed to be extended by other classes such as `Floater` and `FloaterGroup`, which build upon its core functionality to provide specialized input handling capabilities.\n    \n    Usage:\n        The class provides a flexible foundation for creating various input components with adjustable settings, enabling developers to tailor the widget's appearance and behavior to meet specific application requirements.\n    \"\"\"\n    def __init__(self, parent=None, **kw):\n```\n\nclass FloaterWidget(Pmw.MegaWidget):\n    def __init__(self, parent = None, **kw):\n        #define the megawidget options\n        INITOPT = Pmw.INITOPT\n        optiondefs = (\n            # Appearance\n            ('width',           FLOATER_WIDTH,      INITOPT),\n            ('height',          FLOATER_HEIGHT,     INITOPT),\n            ('relief',          tk.RAISED,          self.setRelief),\n            ('borderwidth',     2,                  self.setBorderwidth),\n            ('background',      'grey75',           self.setBackground),\n            # Behavior\n            # Initial value of floater, use self.set to change value\n            ('value',           0.0,            INITOPT),\n            ('numDigits',       2,              self.setNumDigits),\n            # Command to execute on floater updates\n            ('command',         None,           None),\n            # Extra data to be passed to command function\n            ('commandData',     [],             None),",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_195",
    "parent": "processed_documents/context_documents/1702bab6_Floater.json",
    "chunk_number": 3611
  }
}