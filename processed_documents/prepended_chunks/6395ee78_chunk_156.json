{
  "content": "The provided chunk of code is part of a larger setup for customizing Sphinx's behavior when generating documentation. Specifically, it defines how inheritance diagrams are rendered by modifying the `generate_dot` function in the `InheritanceGraph` class. This function sets up graph attributes and constructs nodes and edges based on class information to create accurate and styled inheritance diagrams.\n\n```plaintext\nSphinx extension setup for customizing autodoc behavior, including handling inheritance diagrams with modified dot generation.\n```\n\ndef generate_dot(self, name, urls={}, env=None,\n                 graph_attrs={}, node_attrs={}, edge_attrs={}):\n    g_attrs = self.default_graph_attrs.copy()\n    n_attrs = self.default_node_attrs.copy()\n    e_attrs = self.default_edge_attrs.copy()\n    g_attrs.update(graph_attrs)\n    n_attrs.update(node_attrs)\n    e_attrs.update(edge_attrs)\n    if env:\n        g_attrs.update(env.config.inheritance_graph_attrs)\n        n_attrs.update(env.config.inheritance_node_attrs)\n        e_attrs.update(env.config.inheritance_edge_attrs)\n\n    res = []  # type: List[str]\n    res.append('strict digraph %s {\\n' % name)\n    res.append(self._format_graph_attrs(g_attrs))\n\n    for name, fullname, bases, tooltip in sorted(self.class_info):\n        if name == 'DTOOL_SUPER_BASE':\n            continue",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_8",
    "parent": "processed_documents/context_documents/5d34b79e_6676e524_conf.json",
    "chunk_number": 156
  }
}