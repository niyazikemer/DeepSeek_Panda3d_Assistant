{
  "content": "The provided code chunk contains two essential functions in a particle effect management system: \n\n1. `addForce(self, f)` - Manages adding new forces to a force group and updates the UI with force widgets for user interaction.\n\n2. `createNewEffect(self)` - Handles creation of new particle effects by prompting user input for the effect name, initializing default parameters for particles (birth rate, litter size, etc.), and setting up necessary components (factory, renderer, emitter). The newly created effect is then added to a dictionary of effects, UI elements are updated, and the effect is enabled and attached to the main render scene.\n\nThese functions together provide core functionality for defining and managing particle simulation effects within the application's framework.\n\ndef addForce(self, f):\n        if self.forceGroup is None:\n            self.createNewForceGroup()\n        self.forceGroup.addForce(f)\n        self.addForceWidget(self.forceGroup, f)\n\n    ## SYSTEM COMMANDS ##\n    def createNewEffect(self):\n        name = askstring('Particle Panel', 'Effect Name:',\n                         parent = self.parent)\n        if name:\n            particles = Particles.Particles()\n            particles.setBirthRate(0.02)\n            particles.setLitterSize(10)\n            particles.setLitterSpread(0)\n            particles.setFactory(\"PointParticleFactory\")\n            particles.setRenderer(\"PointParticleRenderer\")\n            particles.setEmitter(\"SphereVolumeEmitter\")\n            particles.enable()\n            effect = ParticleEffect.ParticleEffect(name, particles)\n            self.effectsDict[name] = effect\n            self.updateMenusAndLabels()\n            self.selectEffectNamed(name)\n            effect.reparentTo(render)\n            effect.enable()",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_56",
    "parent": "processed_documents/context_documents/44a6f4d1_ParticlePanel.json",
    "chunk_number": 880
  }
}