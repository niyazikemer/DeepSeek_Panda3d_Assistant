{
  "content": "This chunk appears in the section of the document discussing how to distribute Panda3D applications written in C++. It comes after explaining how to build Panda3D from source with optimizations enabled and before transitioning into sections focused on Python application distribution tools. The context provides specific guidance for shipping C++ applications, including handling built files or using static compilation, followed by a note that the remaining section pertains to Python users only.\n\nAfter building Panda3D from source, it will be necessary to take the files in the built/bin directory (and, on platforms other than Windows, the built/lib directory) and ship them together with the executable file of the game. You can alternatively choose to compile Panda3D statically, using the --static flag. This allows you to link the Panda3D libraries into the executable, obviating the need to ship them separately. However, this method is only advisable if the application consists of a single executable, and is not divided up into multiple libraries or executable files that all use the Panda3D API.\n\nThe rest of this section focuses on explaining the distribution tools available to Python users of the engine, and is not relevant for C++ users.\n\nTable of Contents\n\nbuilding-binaries list-of-build-options packaging-binaries troubleshooting thirdparty-licenses",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_655",
    "parent": "processed_documents/context_documents/35c36c78_6052939f_index.json",
    "chunk_number": 7502
  }
}