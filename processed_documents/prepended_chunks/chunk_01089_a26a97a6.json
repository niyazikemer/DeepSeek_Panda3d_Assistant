{
  "content": "The FSM Inspector is a tool designed for visual inspection of state machines, providing an interactive viewer that allows users to explore the structure and behavior of their state transitions. The chunk describes how to initialize the viewer with optional parameters and highlights its key features, including right-click menu options for requesting transitions, middle mouse button panning for navigating larger diagrams, and a print option for generating layout-augmented Python code. It also notes an issue with Tk and Emacs interactions and suggests a workaround procedure.\n\n3) Pop open a viewer::\n\n    import FSMInspector\n    insp = FSMInspector.FSMInspector(fsm)\n\nor if you wish to be fancy::\n\n    insp = FSMInspector.FSMInspector(fsm, title = fsm.getName())\n\nFeatures:\n\n  - Right mouse button over a state pops up a menu allowing you to\n    request a transition to that state\n  - Middle mouse button will grab the canvas and slide things around if\n    your state machine is bigger than the viewing area\n  - There are some self explanatory menu options up at the top, the most\n    useful being: \"print ClassicFSM layout\" which will print out Python\n    code which will create an ClassicFSM augmented with layout\n    information for the viewer so everything shows up in the same place\n    the next time you inspect the state machine\n\nCaveat\n------\n\nThere is an unexplained problem with using Tk and emacs right now which\noccasionally results in everything locking up.  This procedure seems to\navoid the problem for me::",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_64",
    "parent": "processed_documents/context_documents/a5e824d6_FSMInspector.json",
    "chunk_number": 1089
  }
}