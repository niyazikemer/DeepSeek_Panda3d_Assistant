{
  "content": "The chunk describes how to handle keyboard inputs involving non-typable characters and special function keys. It includes a function example `printRepeat` demonstrating how to manage repeated key presses, and lists various special keys (e.g., \"escape\", \"f1-12\", navigation arrows) along with notes on potential operating system interception of certain keys like \"print_creen\". This section helps developers ensure their applications can correctly capture and respond to a wide range of keyboard inputs.\n\ndef printRepeat(self, when):\n        print(\"repeat a\", when)\n\nKeys that don't type a character are labeled as follows:\n\n\"escape\", \"f\"+\"1-12\" (e.g. \"f1\",\"f2\",...\"f12\"), \"print_screen\",\n\"scroll_lock\", \"backspace\", \"insert\", \"home\", \"page_up\", \"num_lock\",\n\"tab\",  \"delete\", \"end\", \"page_down\", \"caps_lock\", \"enter\", \"arrow_left\",\n\"arrow_up\", \"arrow_down\", \"arrow_right\", \"shift\", \"lshift\", \"rshift\",\n\"control\", \"alt\", \"lcontrol\", \"lalt\", \"space\", \"ralt\", \"rcontrol\"\n\nNote that some key combinations (like print_screen on Windows) may be intercepted by the operating system and may therefore not be available. If you want to be able to catch these keys, you need to find some way to prevent the system from intercepting the events. (however, \"print_screen-up\" is still available in most cases.)",
  "metadata": {
    "doc_type": "rst",
    "doc_id": "doc_711",
    "parent": "processed_documents/context_documents/66219fe4_571e1192_keyboard-support.json",
    "chunk_number": 7756
  }
}