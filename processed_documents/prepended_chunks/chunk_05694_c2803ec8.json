{
  "content": "The chunk defines two methods for handling logical zone changes and retrieving zone data. These methods are situated within a class that manages distributed objects on an AI server, particularly dealing with zone transitions and data retrieval without going through the quiet zone.\n\n```python\n    def _retrieveCachedData(self):\n         \"\"\" This is a no-op on the AI.  \"\"\"\n\n    def handleLogicalZoneChange(self, newZoneId, oldZoneId):\n        \"\"\"\n        this function gets called as if we never go through the\n        quiet zone. Note that it is called once you reach the newZone,\n        and not at the time that you leave the oldZone.\n        \"\"\"\n        messenger.send(self.getLogicalZoneChangeEvent(),\n                       [newZoneId, oldZoneId])\n\n    def getZoneData(self):\n         # Call this to get an AIZoneData object for the current zone. This class will hold onto it as self._zoneData\n         # setLocation destroys self._zoneData if we move away to a different zone\n        if self._zoneData is None:\n            from otp.ai.AIZoneData import AIZoneData   # type: ignore[import]\n            self._zoneData = AIZoneData(self.air, self.parentId, self.zoneId)\n        return self._zoneData\n\n    def setAI(self, aiChannel):\n        self.air.setAI(self.doId, aiChannel)\n```\n\ndef handleLogicalZoneChange(self, newZoneId, oldZoneId):\n        \"\"\"this function gets called as if we never go through the\n        quiet zone. Note that it is called once you reach the newZone,\n        and not at the time that you leave the oldZone.\"\"\"\n        messenger.send(self.getLogicalZoneChangeEvent(),\n                       [newZoneId, oldZoneId])\n\n    def getZoneData(self):\n        # Call this to get an AIZoneData object for the current zone.\n        # This class will hold onto it as self._zoneData\n        # setLocation destroys self._zoneData if we move away to\n        # a different zone\n        if self._zoneData is None:\n            from otp.ai.AIZoneData import AIZoneData  # type: ignore[import-not-found]\n            self._zoneData = AIZoneData(self.air, self.parentId, self.zoneId)\n        return self._zoneData",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_335",
    "parent": "processed_documents/context_documents/475c6ed3_DistributedObjectAI.json",
    "chunk_number": 5694
  }
}