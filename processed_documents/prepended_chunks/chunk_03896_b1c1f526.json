{
  "content": "The provided code chunk is part of an exception handling mechanism designed to manage specific errors encountered during task scheduling and execution. It is situated within the `TaskManager` class, which manages tasks in a Python application. The chunk specifically handles `IOError` with error code 4, stopping the task manager when this occurs, while allowing other exceptions to propagate normally. This code would typically be placed around areas where sleep operations or similar blocking calls are made, such as within the `doYield` method or its example implementation, to gracefully handle interruptions and prevent issues caused by unexpected errors during these operations.\n\n**Succinct Context:**\nThe code chunk handles specific exceptions like IOError with error code 4 in the TaskManager's execution loop, ensuring tasks stop correctly when interrupted. It is placed within the exception handling blocks surrounding sleep operations in methods like `doYield` or related task management functions to prevent crashes and manage interruptions smoothly.\n\n# often gives this IOError during the sleep function:\n                    #     IOError: [Errno 4] Interrupted function call\n                    # So, let's just handle that specific exception and stop.\n                    # All other IOErrors should still get raised.\n                    # Only problem: legit IOError 4s will be obfuscated.\n                    if code == 4:\n                        self.stop()\n                    else:\n                        raise\n                except Exception as e:\n                    if self.extendedExceptions:\n                        self.stop()\n                        print_exc_plus()\n                    else:\n                        from direct.showbase import ExceptionVarDump\n                        if ExceptionVarDump.wantStackDumpLog and \\\n                           ExceptionVarDump.dumpOnExceptionInit:\n                            ExceptionVarDump._varDump__print(e)\n                        raise\n                except:",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_210",
    "parent": "processed_documents/context_documents/3377b266_Task.json",
    "chunk_number": 3896
  }
}