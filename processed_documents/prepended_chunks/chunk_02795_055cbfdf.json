{
  "content": "The provided chunk is part of a Python implementation of a `LerpFunctionInterval` class designed to manage time-based linear interpolation (lerp) between two values. The code initializes the interval with specified parameters and implements the `privStep` method, which handles evaluating the function at different times during the lerp process by computing interpolated values based on the blend type and duration.\n\n# Initialize superclass\n        Interval.Interval.__init__(self, name, duration)\n\n    def privStep(self, t):\n        # Evaluate the function\n        #print(\"doing priv step\", t)\n        if t >= self.duration:\n            # Set to end value\n            self.function(*[self.toData] + self.extraArgs)\n        elif self.duration == 0.0:\n            # Zero duration, just use endpoint\n            self.function(*[self.toData] + self.extraArgs)\n        else:\n            # In the middle of the lerp, compute appropriate blended value\n            bt = self.blendType(t/self.duration)\n            data = (self.fromData * (1 - bt)) + (self.toData * bt)\n            # Evaluate function\n            self.function(*[data] + self.extraArgs)\n\n        # Print debug information\n        #assert self.notify.debug('updateFunc() - %s: t = %f' % (self.name, t))\n\n        self.state = CInterval.SStarted\n        self.currT = t\n\n# New interface",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_156",
    "parent": "processed_documents/context_documents/d377e678_LerpInterval.json",
    "chunk_number": 2795
  }
}