{
  "content": "The provided code chunk demonstrates the creation and setup of an FSM (Finite State Machine) using the `FSMInspector` library, showcasing how states are defined with transitions, enter/exit actions, and visual positioning through `inspectorPos`. The example illustrates initializing an FSM with three states ('yellow', 'red', 'green'), each specifying transitions and visualization coordinates, followed by creating an FSM Inspector instance for viewing the state machine. This serves as a practical implementation example complementing the State class description in the main document.\n\nimport FSMInspector\n\n    inspector = FSMInspector.FSMInspector(fsm, title = fsm.getName())\n\n    # Note, the inspectorPos argument is optional, the inspector will\n    # automagically position states on startup\n    fsm = ClassicFSM.ClassicFSM('stopLight', [\n        State.State('yellow',\n                    enterState,\n                    exitState,\n                    ['red'],\n                    inspectorPos = [95.9, 48.0]),\n        State.State('red',\n                    enterState,\n                    exitState,\n                    ['green'],\n                    inspectorPos = [0.0, 0.0]),\n        State.State('green',\n                    enterState,\n                    exitState,\n                    ['yellow'],\n                    inspectorPos = [0.0, 95.9])],\n            'red',\n            'red')\n\n3) Pop open a viewer::\n\n    import FSMInspector\n    insp = FSMInspector.FSMInspector(fsm)\n\nor if you wish to be fancy::",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_64",
    "parent": "processed_documents/context_documents/a5e824d6_FSMInspector.json",
    "chunk_number": 1088
  }
}