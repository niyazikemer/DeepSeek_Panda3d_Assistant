{
  "content": "The chunk defines `mouseRotateTask`, a method managing camera rotation via mouse input. It checks if the camera uses an OrthographicLens and returns early if so. Otherwise, it adjusts deltaX and deltaY based on constraints, then rotates the camera using these deltas multiplied by the field of view when shift is pressed. This function is crucial for handling 3D viewport navigation through mouse movements.\n\ndef mouseRotateTask(self, state):\n        # If the cam is orthogonal, don't rotate.\n        direct = ShowBaseGlobal.direct\n        if (hasattr(direct.cam.node(), \"getLens\") and\n            direct.cam.node().getLens().__class__.__name__ == \"OrthographicLens\"):\n            return\n        # If moving outside of center, ignore motion perpendicular to edge\n        if ((state.constrainedDir == 'y') and (abs(direct.dr.mouseX) > 0.9)):\n            deltaX = 0\n            deltaY = direct.dr.mouseDeltaY\n        elif ((state.constrainedDir == 'x') and (abs(direct.dr.mouseY) > 0.9)):\n            deltaX = direct.dr.mouseDeltaX\n            deltaY = 0\n        else:\n            deltaX = direct.dr.mouseDeltaX\n            deltaY = direct.dr.mouseDeltaY\n        if direct.fShift:\n            direct.camera.setHpr(direct.camera,\n                                 (deltaX * direct.dr.fovH),\n                                 (-deltaY * direct.dr.fovV),\n                                 0.0)",
  "metadata": {
    "doc_type": "python",
    "doc_id": "doc_181",
    "parent": "processed_documents/context_documents/b7d65bc2_DirectCameraControl.json",
    "chunk_number": 3323
  }
}