{
  "content": "\"\"\"This module defines a widget used to display a graphical overview of the\nscene graph using the tkinter GUI system.\n\nRequires Pmw.\"\"\"\n\n__all__ = ['SceneGraphExplorer', 'SceneGraphExplorerItem', 'explore']\n\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.showbase.MessengerGlobal import messenger\nfrom .Tree import TreeItem, TreeNode\nimport Pmw\nimport tkinter as tk\n\n# changing these strings requires changing DirectSession.py SGE_ strs too!\nDEFAULT_MENU_ITEMS = [\n    'Update Explorer',\n    'Expand All',\n    'Collapse All',\n    'Separator',\n    'Select', 'Deselect',\n    'Separator',\n    'Delete',\n    'Separator',\n    'Fit', 'Flash', 'Isolate', 'Toggle Vis', 'Show All',\n    'Separator',\n    'Set Reparent Target', 'Reparent', 'WRT Reparent',\n    'Separator',\n    'Place', 'Set Name', 'Set Color', 'Explore',\n    'Separator']\n\n\nclass SceneGraphExplorer(Pmw.MegaWidget, DirectObject):\n    \"Graphical display of a scene graph\"\n\n    def __init__(self, parent = None, nodePath = None, isItemEditable = True, **kw):\n        if nodePath is None:\n            nodePath = base.render\n\n        # Define the megawidget options.\n        optiondefs = (\n            ('menuItems',   [],   Pmw.INITOPT),\n        )\n        self.defineoptions(kw, optiondefs)\n\n        # Initialise superclass\n        Pmw.MegaWidget.__init__(self, parent)\n\n        # Initialize some class variables\n        self.nodePath = nodePath\n\n        # Create the components.\n\n        # Setup up container\n        interior = self.interior()\n        interior.configure(relief = tk.GROOVE, borderwidth = 2)\n\n        # Create a label and an entry\n        self._scrolledCanvas = self.createcomponent(\n            'scrolledCanvas',\n            (), None,\n            Pmw.ScrolledCanvas, (interior,),\n            hull_width = 200, hull_height = 300,\n            usehullsize = 1)\n        self._canvas = self._scrolledCanvas.component('canvas')\n        self._canvas['scrollregion'] = ('0i', '0i', '2i', '4i')\n        self._scrolledCanvas.resizescrollregion()\n        self._scrolledCanvas.pack(padx = 3, pady = 3, expand=1, fill = tk.BOTH)\n\n        self._canvas.bind('<ButtonPress-2>', self.mouse2Down)\n        self._canvas.bind('<B2-Motion>', self.mouse2Motion)\n        self._canvas.bind('<Configure>',\n                          lambda e, sc = self._scrolledCanvas:\n                          sc.resizescrollregion())\n        self.interior().bind('<Destroy>', self.onDestroy)\n\n        # Create the contents\n        self._treeItem = SceneGraphExplorerItem(self.nodePath, isItemEditable)\n\n        self._node = TreeNode(self._canvas, None, self._treeItem,\n                              DEFAULT_MENU_ITEMS + self['menuItems'])\n        self._node.expand()\n\n        self._parentFrame = tk.Frame(interior)\n        self._label = self.createcomponent(\n            'parentLabel',\n            (), None,\n            tk.Label, (interior,),\n            text = 'Active Reparent Target: ',\n            anchor = tk.W, justify = tk.LEFT)\n        self._label.pack(fill = tk.X)\n\n        # Add update parent label\n        def updateLabel(nodePath = None, s = self):\n            s._label['text'] = 'Active Reparent Target: ' + nodePath.getName()\n        self.accept('DIRECT_activeParent', updateLabel)\n\n        # Add update hook\n        self.accept('SGE_Update Explorer',\n                    lambda np, s = self: s.update())\n\n        # Check keywords and initialise options based on input values.\n        self.initialiseoptions(SceneGraphExplorer)\n\n    # [gjeon] to set childrenTag and fModeChildrenTag of tree node\n    def setChildrenTag(self, tag, fModeChildrenTag):\n        self._node.setChildrenTag(tag, fModeChildrenTag)\n        self._node.update()\n\n    # [gjeon] to set fSortChildren of tree node\n    def setFSortChildren(self, fSortChildren):\n        self._node.setFSortChildren(fSortChildren)\n        self._node.update()\n\n    def update(self, fUseCachedChildren = 1):\n        \"\"\" Refresh scene graph explorer \"\"\"\n        self._node.update(fUseCachedChildren)\n\n    def mouse2Down(self, event):\n        self._width = 1.0 * self._canvas.winfo_width()\n        self._height = 1.0 * self._canvas.winfo_height()\n        xview = self._canvas.xview()\n        yview = self._canvas.yview()\n        self._left = xview[0]\n        self._top = yview[0]\n        self._dxview = xview[1] - xview[0]\n        self._dyview = yview[1] - yview[0]\n        self._2lx = event.x\n        self._2ly = event.y\n\n    def mouse2Motion(self, event):\n        newx = self._left - ((event.x - self._2lx)/self._width) * self._dxview\n        self._canvas.xview_moveto(newx)\n        newy = self._top - ((event.y - self._2ly)/self._height) * self._dyview\n        self._canvas.yview_moveto(newy)\n        self._2lx = event.x\n        self._2ly = event.y\n        self._left = self._canvas.xview()[0]\n        self._top = self._canvas.yview()[0]\n\n    def onDestroy(self, event):\n        # Remove hooks\n        self.ignore('DIRECT_activeParent')\n        self.ignore('SGE_Update Explorer')\n\n    def updateSelection(self, searchKey):\n        # [gjeon] update SGE selection with directSession\n        sceneGraphItem = self._node.find(searchKey)\n        if sceneGraphItem:\n            sceneGraphItem.reveal()\n            sceneGraphItem.select()\n\n\nclass SceneGraphExplorerItem(TreeItem):\n\n    \"\"\"Example TreeItem subclass -- browse the file system.\"\"\"\n\n    def __init__(self, nodePath, isItemEditable = True):\n        self.nodePath = nodePath\n        self.isItemEditable = isItemEditable\n\n    def GetText(self):\n        type = self.nodePath.node().getType().getName()\n        name = self.nodePath.getName()\n        return type + \"  \" + name\n\n    def GetKey(self):\n        return hash(self.nodePath)\n\n    def IsEditable(self):\n        # All nodes' names can be edited nowadays.\n        return self.isItemEditable\n        #return issubclass(self.nodePath.node().__class__, NamedNode)\n\n    def SetText(self, text):\n        try:\n            self.nodePath.setName(text)\n        except AttributeError:\n            pass\n\n    def GetIconName(self):\n        return \"sphere2\" # XXX wish there was a \"file\" icon\n\n    def IsExpandable(self):\n        return self.nodePath.getNumChildren() != 0\n\n    def GetSubList(self):\n        sublist = []\n        for nodePath in self.nodePath.getChildren():\n            item = SceneGraphExplorerItem(nodePath, self.isItemEditable)\n            sublist.append(item)\n        return sublist\n\n    def OnSelect(self):\n        messenger.send('SGE_Flash', [self.nodePath])\n\n    def MenuCommand(self, command):\n        messenger.send('SGE_' + command, [self.nodePath])\n\n\ndef explore(nodePath = None):\n    if nodePath is None:\n        nodePath = base.render\n\n    tl = tk.Toplevel()\n    tl.title('Explore: ' + nodePath.getName())\n    sge = SceneGraphExplorer(parent = tl, nodePath = nodePath)\n    sge.pack(expand = 1, fill = 'both')\n    return sge\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/tkwidgets/SceneGraphExplorer.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/377f8479_SceneGraphExplorer.json",
    "doc_id": "doc_188"
  }
}