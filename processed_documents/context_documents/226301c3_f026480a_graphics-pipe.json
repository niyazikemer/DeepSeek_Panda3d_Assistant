{
  "content": "The Graphics Pipe\n\nThe .GraphicsPipe class is Panda3D's interface to the available 3-D API's, for instance OpenGL or DirectX. In order to create a window that renders using a particular API, you must have a GraphicsPipe for that API.\n\nNormally, there is one default graphics pipe created for you automatically when you import ~direct.directbase.DirectStart, accessible as base.pipe. For most applications, there is no need to create any additional graphics pipes.\n\nThere are two Config.prc variables that determine the graphics pipe or pipes that will be available to an application:\n\nNote that the name specified to each of the above variables, e.g. pandagl, actually names a Windows DLL or Unix shared-library file. Panda3D will put \"lib\" in front of the name and \".dll\" or \".so\" (according to the operating system) after the name, and then attempts to import that library. This means that \"load-display pandagl\" really means to try to import the file \"libpandagl.dll\". The various display DLL's are written so that when they are successfully imported, they will register support for the kind of GraphicsPipe they implement.\n\nYou can create additional graphics pipes, for instance to provide an in-game interface to switch between OpenGL and DirectX rendering. The easiest way to do this is to call base.makeAllPipes(). Then you can walk through the list of GraphicsPipes in base.pipeList to see all of the available GraphicsPipes available in particular environment.\n\nWhen you walk through the GraphicsPipes in base.pipeList, you can call the following interface methods on each one:",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/f026480a_graphics-pipe.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/226301c3_f026480a_graphics-pipe.json",
    "doc_id": "doc_605"
  }
}