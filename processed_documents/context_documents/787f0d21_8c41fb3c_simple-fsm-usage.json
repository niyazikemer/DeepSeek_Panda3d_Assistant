{
  "content": "Simple FSM Usage\n\npython\n\nA Panda3D FSM is implemented by defining a new Python class which inherits from the class direct.fsm.FSM.FSM (normally imported as simply FSM), and defining the appropriate enter and exit methods on the class.\n\nFSM states are represented by name strings, which should not contain spaces or punctuation marks; by Panda3D convention, state names should begin with a capital letter. An FSM is always in exactly one state a time; the name of the current state in stored in fsm.state. When it transitions from one state to another, it first calls exitOldState(), and then it calls enterNewState(), where OldState is the name of the previous state, and NewState is the name of the state it is entering. While it is making this transition, the FSM is not technically in either state, and fsm.state will be None--but you can find both old and new state names in fsm.oldState and fsm.newState, respectively.\n\nTo define a possible state for an FSM, you only need to define an enterStateName() and/or exitStateName() method on your class, where StateName is the name of the state you would like to define. The enterStateName() method should perform all the necessary action for entering your new state, and the corresponding exitStateName() method should generally undo everything that was done in enterStateName(), so that the world is returned to a neutral state.\n\nAn FSM starts and finishes in the state named \"Off\". When the FSM is created, it is already in \"Off\"; and when you destroy it (by calling fsm.cleanup() <direct.fsm.FSM.FSM.cleanup>), it automatically transitions back to \"Off\".\n\nTo request an FSM to transition explicitly to a new state, use the call fsm.request('StateName') <direct.fsm.FSM.FSM.request>, where StateName is the state you would like it to transition to.\n\nArguments to enterStateName methods\n\nNormally, both enterStateName() and exitStateName() take no arguments (other than self). However, if your FSM requires some information before it can transition to a particular state, you can define any arguments you like to the enterStateName method for that state; these arguments should be passed in to the request() call, following the state name.\n\nfrom direct.fsm.FSM import FSM\n\nclass AvatarFSM(FSM):\n\n    def enterWalk(self, speed, doorMask):\n        avatar.setPlayRate(speed, 'walk')\n        avatar.loop('walk')\n        footstepsSound.play()\n        enableDoorCollisions(doorMask)\n\n    def exitWalk(self):\n        avatar.stop()\n        footstepsSound.stop()\n        disableDoorCollisions()\n\nmyfsm = AvatarFSM('myAvatar')\nmyfsm.request('Walk', 1.0, BitMask32.bit(2))\n\nNote that the exitStateName method must always take no arguments.\n\nAllowed and disallowed state transitions\n\nBy default, every state transition request is allowed: the call fsm.request('StateName') will always succeed, and the the FSM will be left in the new state. You may wish to make your FSM more robust by disallowing certain transitions that you don't want to happen.\n\nFor instance, consider the example FSM described previously, which had the following state diagram:\n\ntransitions\n\nrankdir=LR node [style=rounded, shape=box]\n\nWalk -> Walk2Swim; Walk2Swim -> Swim; Swim -> Swim2Walk; Swim2Walk -> Walk; Swim -> Drowning;\n\n{ rank=same; Walk2Swim; Swim2Walk; }\n\nIn this diagram, the arrows represent legal transitions. It is legal to transition from 'Walk' to 'Walk2Swim', but not from 'Walk' to 'Swim2Walk'. If you were to request the FSM to enter state 'Swim2Walk' while it is currently in state 'Walk', that's a bug; you might prefer to have the FSM throw an exception, so you can find this bug.\n\nTo enforce this, you can store self.defaultTransitions in the FSM's __init__() method. This should be a map of allowed transitions from each state. That is, each key of the map is a state name; for that key, the value is a list of allowed transitions from the indicated state. Any transition not listed in defaultTransitions is considered invalid. For example:\n\nclass AvatarFSM(FSM):\n\n    def __init__(self):\n        FSM.__init__(self, 'myAvatar')\n        self.defaultTransitions = {\n            'Walk' : [ 'Walk2Swim' ],\n            'Walk2Swim' : [ 'Swim' ],\n            'Swim' : [ 'Swim2Walk', 'Drowning' ],\n            'Swim2Walk' : [ 'Walk' ],\n            'Drowning' : [ ],\n        }\n\nIf you do not assign anything to self.defaultTransitions(), then all transitions are legal. However, if you do assign a map like the above, then requesting a transition that is not listed in the map will raise the exception FSM.RequestDenied <direct.fsm.FSM.RequestDenied>.\n\ncpp\n\nThis section does not apply to C++ users.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/8c41fb3c_simple-fsm-usage.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/787f0d21_8c41fb3c_simple-fsm-usage.json",
    "doc_id": "doc_604"
  }
}