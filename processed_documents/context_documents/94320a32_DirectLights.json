{
  "content": "\nfrom panda3d.core import (\n    AmbientLight,\n    DirectionalLight,\n    LightAttrib,\n    Material,\n    NodePath,\n    PerspectiveLens,\n    PointLight,\n    Spotlight,\n    VBase4,\n)\nfrom direct.showbase.MessengerGlobal import messenger\n\n\nclass DirectLight(NodePath):\n    def __init__(self, light, parent):\n        # Initialize the superclass\n        NodePath.__init__(self)\n        # Record light and name\n        self.light = light\n\n        # Attach node to self\n        self.assign(parent.attachNewNode(self.light))\n\n    def getName(self):\n        return self.light.getName()\n\n    def getLight(self):\n        return self.light\n\nclass DirectLights(NodePath):\n    def __init__(self, parent = None):\n        if parent is None:\n            parent = base.render\n\n        # Initialize the superclass\n        NodePath.__init__(self)\n        # Create a node for the lights\n        self.assign(parent.attachNewNode('DIRECT Lights'))\n        # Create a list of all active lights\n        self.lightDict = {}\n        # Counts of the various types of lights\n        self.ambientCount = 0\n        self.directionalCount = 0\n        self.pointCount = 0\n        self.spotCount = 0\n\n    def __getitem__(self, name):\n        return self.lightDict.get(name, None)\n\n    def __len__(self):\n        return len(self.lightDict)\n\n    def delete(self, light):\n        del self.lightDict[light.getName()]\n        self.setOff(light)\n        light.removeNode()\n\n    def deleteAll(self):\n        for light in self:\n            self.delete(light)\n\n    def asList(self):\n        return [self[n] for n in self.getNameList()]\n\n    def getNameList(self):\n        # Return a sorted list of all lights in the light dict\n        return sorted(x.getName() for x in self.lightDict.values())\n\n    def create(self, ltype):\n        ltype = ltype.lower()\n        if ltype == 'ambient':\n            self.ambientCount += 1\n            light = AmbientLight('ambient-' + repr(self.ambientCount))\n            light.setColor(VBase4(.3, .3, .3, 1))\n        elif ltype == 'directional':\n            self.directionalCount += 1\n            light = DirectionalLight('directional-' + repr(self.directionalCount))\n            light.setColor(VBase4(1))\n        elif ltype == 'point':\n            self.pointCount += 1\n            light = PointLight('point-' + repr(self.pointCount))\n            light.setColor(VBase4(1))\n        elif ltype == 'spot':\n            self.spotCount += 1\n            light = Spotlight('spot-' + repr(self.spotCount))\n            light.setColor(VBase4(1))\n            light.setLens(PerspectiveLens())\n        else:\n            print('Invalid light type')\n            return None\n        # Add the new light\n        directLight = DirectLight(light, self)\n        self.lightDict[directLight.getName()] = directLight\n        # Turn it on as a default\n        self.setOn(directLight)\n        # Send an event to all watching objects\n        messenger.send('DIRECT_addLight', [directLight])\n        # Return the new light\n        return directLight\n\n    def createDefaultLights(self):\n        self.create('ambient')\n        self.create('directional')\n\n    def allOn(self):\n        \"\"\"\n        Turn on all DIRECT lights\n        \"\"\"\n        for light in self.lightDict.values():\n            self.setOn(light)\n        # Make sure there is a default material\n        render.setMaterial(Material())\n\n    def allOff(self):\n        \"\"\"\n        Turn off all DIRECT lights\n        \"\"\"\n        for light in self.lightDict.values():\n            self.setOff(light)\n\n    def toggle(self):\n        \"\"\"\n        Toggles light attribute, but doesn't toggle individual lights\n        \"\"\"\n        if render.node().hasAttrib(LightAttrib.getClassType()):\n            self.allOff()\n        else:\n            self.allOn()\n\n    def setOn(self, directLight):\n        \"\"\"\n        Turn on the given directLight\n        \"\"\"\n        render.setLight(directLight)\n\n    def setOff(self, directLight):\n        \"\"\"\n        Turn off the given directLight\n        \"\"\"\n        render.clearLight(directLight)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directtools/DirectLights.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/94320a32_DirectLights.json",
    "doc_id": "doc_178"
  }
}