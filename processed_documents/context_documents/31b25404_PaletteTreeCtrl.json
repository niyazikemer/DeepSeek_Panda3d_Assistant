{
  "content": "\"\"\"\nDefines Palette tree control\n\"\"\"\nimport wx\nfrom .ObjectPaletteBase import ObjectBase, ObjectGen\n\n\nclass PaletteTreeCtrl(wx.TreeCtrl):\n    def __init__(self, parent, treeStyle, rootName):\n        wx.TreeCtrl.__init__(self, parent, style=treeStyle)\n\n        self.rootName = rootName\n        self.root = self.AddRoot(self.rootName)\n\n        self.paletteUI = parent\n\n        self.opSortAlpha = \"Sort Alphabetical Order\"\n        self.opSortOrig  = \"Sort Original Order\"\n        self.opSort = self.opSortOrig\n\n        self.Bind(wx.EVT_TREE_BEGIN_DRAG, self.onBeginDrag)\n\n    def OnCompareItems(self, item1, item2):\n        return self.paletteUI.compareItems(item1, item2)\n\n    def SortTreeNodes(self, parent):\n        self.SortChildren(parent)\n        item, cookie = self.GetFirstChild(parent)\n        while item:\n            if self.ItemHasChildren(item):\n                self.SortTreeNodes(item)\n\n            # continue iteration to the next child\n            item, cookie = self.GetNextChild(parent, cookie)\n\n    def addTreeNodes(self, parentItem, parentItemName, items, itemKeys):\n        roots = []\n        rootItems = []\n        for key in itemKeys:\n            if parentItemName == items[key]:\n                roots.append(key)\n        for root in roots:\n            newItem = self.AppendItem(parentItem, root)\n            self.SetItemData(newItem, root)\n            rootItems.append(newItem)\n            itemKeys.remove(root)\n        for rootItem in rootItems:\n            self.addTreeNodes(rootItem, self.GetItemText(rootItem), items, itemKeys)\n\n    def traverse(self, parent, itemText):\n        if itemText == self.GetItemText(parent):\n            return parent\n        item, cookie = self.GetFirstChild(parent)\n        while item:\n            # if the item was found - return it\n            if itemText == self.GetItemText(item):\n                return item\n\n            # the tem was not found - checking if it has children\n            if self.ItemHasChildren(item):\n                # item has children - delving into it\n                child = self.traverse(item, itemText)\n                if child is not None:\n                    return child\n\n            # continue iteration to the next child\n            item, cookie = self.GetNextChild(parent, cookie)\n        return None\n\n    def AddGroup(self):\n        #import pdb;set_trace()\n        parent = self.GetSelection()\n        if parent is None:\n            parent = self.GetRootItem()\n\n        i = 1\n        namestr = f\"Group{i}\"\n        found = self.traverse(self.GetRootItem(), namestr)\n        while found:\n            i = i + 1\n            namestr = f\"Group{i}\"\n            found = self.traverse(self.GetRootItem(), namestr)\n\n        newItem = self.AppendItem(parent, namestr)\n        itemData = ObjectGen(name=namestr)\n        parentName = self.GetItemText(parent)\n        if parentName == self.rootName:\n            self.paletteUI.palette.add(itemData)\n        else:\n            self.paletteUI.palette.add(itemData, parentName)\n        self.SetItemPyData(newItem, itemData)\n\n        self.Expand(self.GetRootItem())\n        self.ScrollTo(newItem)\n\n    def DeleteItem(self, item):\n        itemText = self.GetItemText(item)\n        if item and itemText != self.rootName:\n            self.Delete(item)\n            self.paletteUI.palette.delete(itemText)\n\n    def DeleteSelected(self):\n        item = self.GetSelection()\n        self.DeleteItem(item)\n\n    def ReParent(self, parent, newParent):\n        # main loop - iterating over item's children\n        item, cookie = self.GetFirstChild(parent)\n        while item:\n            itemName = self.GetItemText(item)\n            itemData = self.GetItemData(item)\n\n            newItem = self.AppendItem(newParent, itemName)\n            self.SetItemPyData(newItem, itemData)\n\n            # if an item had children, we need to re-parent them as well\n            if self.ItemHasChildren(item):\n                # recursing...\n                self.ReParent(item, newItem, )\n\n            # continue iteration to the next child\n            item, cookie = self.GetNextChild(parent, cookie)\n\n    def ChangeHierarchy(self, itemName, x, y):\n        parent = self.GetRootItem()\n        item = self.traverse(parent, itemName)\n        if item is None:\n            return\n\n        dragToItem, flags = self.HitTest(wx.Point(x, y))\n        if dragToItem.IsOk():\n            # prevent draging into itself\n            if dragToItem == item:\n                return\n            dragToItemName = self.GetItemText(dragToItem)\n            if isinstance(self.paletteUI.palette.findItem(dragToItemName), ObjectBase):\n                # this is a file node, bailing out\n                return\n\n            newItem = self.AppendItem(dragToItem, itemName)\n\n            itemObj = self.paletteUI.palette.findItem(itemName)\n            if itemObj is not None:\n                # reparenting the data objects...\n                if dragToItemName == self.rootName:\n                    self.paletteUI.palette.add(itemObj)\n                else:\n                    self.paletteUI.palette.add(itemObj, dragToItemName)\n\n            self.ReParent(item, newItem)\n            self.Delete(item)\n\n    def onBeginDrag(self, event):\n        item = event.GetItem()\n\n        if item != self.GetRootItem(): # prevent dragging root item\n            text = self.GetItemText(item)\n            print(\"Starting drag'n'drop with %s...\" % repr(text))\n\n            tdo = wx.TextDataObject(text)\n            tds = wx.DropSource(self)\n            tds.SetData(tdo)\n            tds.DoDragDrop(True)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/PaletteTreeCtrl.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/31b25404_PaletteTreeCtrl.json",
    "doc_id": "doc_21"
  }
}