{
  "content": "import copy\nfrom . import ObjectGlobals as OG\n\n\nclass ObjectGen:\n    \"\"\" Base class for obj definitions \"\"\"\n\n    def __init__(self, name=''):\n        self.name = name\n\n\nclass ObjectBase(ObjectGen):\n    \"\"\" Base class for obj definitions \"\"\"\n\n    def __init__(self, name='', createFunction=None, model=None, models=[],\n                 anims=[], animNames=[], animDict={}, properties={},\n                 movable=True, actor=False, named=False,\n                 updateModelFunction=None, orderedProperties=[],\n                 propertiesMask={}):\n        ObjectGen.__init__(self, name)\n        self.createFunction = createFunction\n        self.model = model\n        self.models = models[:]\n        self.anims = anims[:]\n        self.animNames = animNames[:]\n        self.animDict = copy.deepcopy(animDict)\n        self.properties = copy.deepcopy(properties)\n        self.movable = movable\n        self.actor = actor\n        self.named = named\n        self.updateModelFunction = updateModelFunction\n        # to maintain order of properties in UI\n        self.orderedProperties = orderedProperties[:]\n        # to show/hide properties per editor mode\n        self.propertiesMask = copy.deepcopy(propertiesMask)\n\n\nclass ObjectCurve(ObjectBase):\n    def __init__(self, *args, **kw):\n        ObjectBase.__init__(self, *args, **kw)\n        self.properties['Degree'] = [\n            OG.PROP_UI_COMBO,   # UI type\n            OG.PROP_INT,        # data type\n            ('base.le.objectMgr.updateCurve', {'val': OG.ARG_VAL, 'obj': OG.ARG_OBJ}), # update function\n            3,                  # default value\n            [2, 3, 4],          # value range\n        ]\n\n\nclass ObjectPaletteBase:\n    \"\"\"\n    Base class for objectPalette\n\n    You should write your own ObjectPalette class inheriting this.\n    Refer ObjectPalette.py for example.\n    \"\"\"\n\n    def __init__(self):\n        self.rootName = '_root'\n        self.data = {}\n        self.dataStruct = {}\n        self.dataKeys = []\n        self.populateSystemObjs()\n        #self.populate()\n\n    def insertItem(self, item, parentName):\n        \"\"\"\n        You can insert item to obj palette tree.\n\n        'item' is the object to be inserted, it can be either a group or obj.\n        'parentName' is the name of parent under where this item will be inserted.\n        \"\"\"\n        if not isinstance(self.data, dict):\n            return None\n\n        if parentName is None:\n            parentName = self.rootName\n\n        self.dataStruct[item.name] = parentName\n        self.data[item.name] = item\n        self.dataKeys.append(item.name)\n\n    def add(self, item, parentName=None):\n        if isinstance(item, str):\n            self.insertItem(ObjectGen(name=item), parentName)\n        else:\n            self.insertItem(item, parentName)\n\n    def addHidden(self, item):\n        if hasattr(item, 'name'):\n            self.data[item.name] = item\n\n    def deleteStruct(self, name, deleteItems):\n        try:\n            item = self.data.pop(name)\n            for key in list(self.dataStruct.keys()):\n                if self.dataStruct[key] == name:\n                    node = self.deleteStruct(key, deleteItems)\n                    if node is not None:\n                        deleteItems[key] = node\n            return item\n        except Exception:\n            return None\n\n    def delete(self, name):\n        try:\n            deleteItems = {}\n            node = self.deleteStruct(name, deleteItems)\n            if node is not None:\n                deleteItems[name] = node\n            for key in list(deleteItems.keys()):\n                item = self.dataStruct.pop(key)\n        except Exception:\n            return\n\n    def findItem(self, name):\n        try:\n            item = self.data[name]\n        except Exception:\n            return None\n        return item\n\n    def findChildren(self, name):\n        result = []\n        for key in self.dataKeys:\n            if self.dataStruct[key] == name:\n                result.append(key)\n\n        return result\n\n    def rename(self, oldName, newName):\n        #import pdb;set_trace()\n        if oldName == newName:\n            return False\n        if newName == \"\":\n            return False\n        try:\n            for key in list(self.dataStruct.keys()):\n                if self.dataStruct[key] == oldName:\n                    self.dataStruct[key] = newName\n\n            self.dataStruct[newName] = self.dataStruct.pop(oldName)\n            item = self.data.pop(oldName)\n            item.name = newName\n            self.data[newName] = item\n        except Exception:\n            return False\n        return True\n\n    def populateSystemObjs(self):\n        self.addHidden(ObjectCurve(name='__Curve__'))\n\n    def populate(self):\n        # You should implement this in subclass\n        raise NotImplementedError('populate() must be implemented in ObjectPalette.py')\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/ObjectPaletteBase.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/b4cff924_ObjectPaletteBase.json",
    "doc_id": "doc_31"
  }
}