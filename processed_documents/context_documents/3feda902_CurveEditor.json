{
  "content": "\"\"\"\nThis is the module for curve edit\n\"\"\"\n\nfrom panda3d.core import BitMask32, Mat4, NodePath\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.directtools.DirectSelection import SelectionRay\nfrom direct.showutil.Rope import Rope\nfrom direct.task import Task\n\n\nclass CurveEditor(DirectObject):\n    \"\"\" CurveEditor will create and edit the curve \"\"\"\n\n    def __init__(self, editor):\n        self.editor = editor\n        self.i = 0\n        self.ropeNum = 0\n        self.curve = []\n        self.curveControl = []\n        self.currentRope = None\n        self.degree = 3\n\n    def createCurve(self):\n        if self.editor.mode == self.editor.CREATE_CURVE_MODE:\n            self.view = self.editor.ui.currentView\n\n            #Get the mouse position\n            x = base.direct.dr.mouseX\n            y = base.direct.dr.mouseY\n\n            if not self.editor.fMoveCamera and self.view is not None:\n                self.createControler(x,y)\n                if self.currentRope is not None:\n                    self.currentRope.detachNode()\n                self.ropeUpdate(self.curve)\n                self.accept(\"DIRECT-enter\", self.onBaseMode)\n\n            self.accept(\"DIRECT-enter\", self.onBaseMode)\n\n    def editCurve(self, task):\n        if self.editor.mode == self.editor.EDIT_CURVE_MODE:\n            if not self.editor.fMoveCamera:\n                self.selected = None\n                self.selected = base.direct.selected.last\n                if self.selected is not None:\n                    for item in self.curveControl:\n                        if item[1] == self.selected:\n                            self.point = item  #temporarily save the controler information for further use\n                            self.currentCurve = self.currentRope.ropeNode.getCurve()\n                            self.currentCurve.setVertex(item[0], self.selected.getPos())\n                            self.accept(\"DIRECT-delete\", self.onControlerDelete)\n                            return Task.cont\n\n    def onControlerDelete(self):\n        if self.editor.mode == self.editor.EDIT_CURVE_MODE:\n            self.curve.remove(self.curve[self.point[0]])\n            #reset the controller list\n            for item in self.curveControl:\n                if item[0] > self.point[0]:\n                    newname = 'controler%d' % (item[0]-1)\n                    item[1].setName(newname)\n                    self.curveControl[item[0]] = (item[0]-1, item[1])\n            self.curveControl.remove(self.point)\n            self.currentRope.setup(self.degree,self.curve)\n\n    def ropeUpdate(self, curve):\n        self.currentRope = Rope()\n        self.currentRope.setup(self.degree, curve)\n        self.currentRope.reparentTo(render)\n\n    def onBaseMode(self):\n        self.editor.preMode = self.editor.mode\n        self.editor.mode = self.editor.BASE_MODE\n        self.editor.ui.editCurveMenuItem.Check(False)\n        self.editor.ui.createCurveMenuItem.Check(False)\n        self.i = 0\n        for item in self.curveControl:\n            item[1].hide()\n        if self.editor.preMode == self.editor.BASE_MODE:\n            pass\n        if self.editor.preMode == self.editor.CREATE_CURVE_MODE:\n            self.updateScene()\n        if self.editor.preMode == self.editor.EDIT_CURVE_MODE:\n            self.doneEdit()\n        self.curveControl = []\n        self.curve = []\n        self.currentRope = None\n        base.direct.manipulationControl.enableManipulation()\n        self.editor.ui.createCurveMenuItem.Check(False)\n        self.editor.ui.editCurveMenuItem.Check(False)\n\n    def updateScene(self):\n        curveObjNP = self.editor.objectMgr.addNewCurve(self.curveControl, self.degree, nodePath=self.currentRope)\n        curveObj = self.editor.objectMgr.findObjectByNodePath(curveObjNP)\n        for item in self.curveControl:\n            item[1].reparentTo(curveObjNP)\n        self.editor.objectMgr.updateObjectPropValue(curveObj, 'Degree', self.degree, fSelectObject=False, fUndo=False)\n\n    def doneEdit(self):\n        base.direct.selected.last = None\n\n    def createControler(self, x, y):\n        if self.view is not None:\n            self.controler = base.render.attachNewNode(\"controler\")\n            self.controler = base.loader.loadModel('models/misc/smiley')\n            controlerPathname = 'controler%d' % self.i\n            self.controler.setName(controlerPathname)\n            self.controler.setColor(0, 0, 0, 1)\n            self.controler.setScale(0.2)\n            self.controler.reparentTo(render)\n            self.controler.setTag('OBJRoot','1')\n            self.controler.setTag('Controller','1') #controller Tag\n            self.i += 1\n\n            iRay = SelectionRay(self.view.camera)\n            iRay.collider.setFromLens(self.view.camNode, x, y)\n            iRay.collideWithBitMask(BitMask32.bit(21))\n            iRay.ct.traverse(self.view.collPlane)\n            if iRay.getNumEntries() > 0:\n                entry = iRay.getEntry(0)\n                hitPt = entry.getSurfacePoint(entry.getFromNodePath())\n\n            if hitPt:\n                # create a temp nodePath to get the position\n                np = NodePath('temp')\n                np.setPos(self.view.camera, hitPt)\n\n                if base.direct.manipulationControl.fGridSnap:\n                    snappedPos = self.view.grid.computeSnapPoint(np.getPos())\n                    np.setPos(snappedPos)\n\n                # update temp nodePath's HPR and scale with newobj's\n                np.setHpr(self.controler.getHpr())\n                np.setScale(self.controler.getScale())\n\n                # transform newobj to cursor position\n                self.controler.setMat(Mat4(np.getMat()))\n                np.remove()\n            iRay.collisionNodePath.removeNode()\n            del iRay\n\n            self.curve.append((None, self.controler.getPos()))\n            self.curveControl.append((self.i-1, self.controler))\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/CurveEditor.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/3feda902_CurveEditor.json",
    "doc_id": "doc_37"
  }
}