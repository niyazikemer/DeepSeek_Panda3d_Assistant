{
  "content": "\"\"\"Defines the DirectScrollBar class.\n\nSee the :ref:`directscrollbar` page in the programming manual for a more\nin-depth explanation and an example of how to use this class.\n\"\"\"\n\n__all__ = ['DirectScrollBar']\n\nfrom panda3d.core import PGSliderBar, Vec3\nfrom . import DirectGuiGlobals as DGG\nfrom .DirectFrame import DirectFrame\nfrom .DirectButton import DirectButton\n\n\nclass DirectScrollBar(DirectFrame):\n    \"\"\"\n    DirectScrollBar -- a widget which represents a scroll bar the user can\n    use for paging through a large document or panel.\n    \"\"\"\n\n    def __init__(self, parent = None, **kw):\n        optiondefs = (\n            # Define type of DirectGuiWidget\n            ('pgFunc',         PGSliderBar,        None),\n            ('state',          DGG.NORMAL,         None),\n            ('frameColor',     (0.6, 0.6, 0.6, 1), None),\n\n            ('range',          (0, 1),             self.setRange),\n            ('value',          0,                  self.__setValue),\n            ('scrollSize',     0.01,               self.setScrollSize),\n            ('pageSize',       0.1,                self.setPageSize),\n            ('orientation',    DGG.HORIZONTAL,     self.setOrientation),\n            ('manageButtons',  1,                  self.setManageButtons),\n            ('resizeThumb',    1,                  self.setResizeThumb),\n\n            # Function to be called repeatedly as the bar is scrolled\n            ('command',        None,               None),\n            ('extraArgs',      [],                 None),\n        )\n\n        if kw.get('orientation') in (DGG.VERTICAL, DGG.VERTICAL_INVERTED):\n            # These are the default options for a vertical layout.\n            optiondefs += (\n                ('frameSize',      (-0.04, 0.04, -0.5, 0.5),   None),\n            )\n        else:\n            # These are the default options for a horizontal layout.\n            optiondefs += (\n                ('frameSize',      (-0.5, 0.5, -0.04, 0.04),  None),\n            )\n\n        # Merge keyword options with default options\n        self.defineoptions(kw, optiondefs)\n\n        # Initialize superclasses\n        DirectFrame.__init__(self, parent)\n\n        self.thumb = self.createcomponent(\n            \"thumb\", (), None,\n            DirectButton, (self,),\n            borderWidth = self['borderWidth'])\n        self.incButton = self.createcomponent(\n            \"incButton\", (), None,\n            DirectButton, (self,),\n            borderWidth = self['borderWidth'])\n        self.decButton = self.createcomponent(\n            \"decButton\", (), None,\n            DirectButton, (self,),\n            borderWidth = self['borderWidth'])\n\n        if self.decButton['frameSize'] is None and \\\n           self.decButton.bounds == [0.0, 0.0, 0.0, 0.0]:\n            f = self['frameSize']\n            if self['orientation'] == DGG.HORIZONTAL:\n                self.decButton['frameSize'] = (f[0]*0.05, f[1]*0.05, f[2], f[3])\n            else:\n                self.decButton['frameSize'] = (f[0], f[1], f[2]*0.05, f[3]*0.05)\n\n        if self.incButton['frameSize'] is None and \\\n           self.incButton.bounds == [0.0, 0.0, 0.0, 0.0]:\n            f = self['frameSize']\n            if self['orientation'] == DGG.HORIZONTAL:\n                self.incButton['frameSize'] = (f[0]*0.05, f[1]*0.05, f[2], f[3])\n            else:\n                self.incButton['frameSize'] = (f[0], f[1], f[2]*0.05, f[3]*0.05)\n\n        self._lastOrientation = self['orientation']\n\n        self.guiItem.setThumbButton(self.thumb.guiItem)\n        self.guiItem.setLeftButton(self.decButton.guiItem)\n        self.guiItem.setRightButton(self.incButton.guiItem)\n\n        # Bind command function\n        self.bind(DGG.ADJUST, self.commandFunc)\n\n        # Call option initialization functions\n        self.initialiseoptions(DirectScrollBar)\n\n    def setRange(self):\n        # Try to preserve the value across a setRange call.\n        v = self['value']\n        r = self['range']\n        self.guiItem.setRange(r[0], r[1])\n        self['value'] = v\n\n    def __setValue(self):\n        # This is the internal function that is called when\n        # self['value'] is directly assigned.\n        self.guiItem.setValue(self['value'])\n\n    def setValue(self, value):\n        # This is the public function that is meant to be called by a\n        # user that doesn't like to use (or doesn't understand) the\n        # preferred interface of self['value'].\n        self['value'] = value\n\n    def getValue(self):\n        return self.guiItem.getValue()\n\n    def getRatio(self):\n        return self.guiItem.getRatio()\n\n    def setScrollSize(self):\n        self.guiItem.setScrollSize(self['scrollSize'])\n\n    def setPageSize(self):\n        self.guiItem.setPageSize(self['pageSize'])\n\n    def scrollStep(self, stepCount):\n        \"\"\"Scrolls the indicated number of steps forward.  If\n        stepCount is negative, scrolls backward.\"\"\"\n        self['value'] = self.guiItem.getValue() + self.guiItem.getScrollSize() * stepCount\n\n    def scrollPage(self, pageCount):\n        \"\"\"Scrolls the indicated number of pages forward.  If\n        pageCount is negative, scrolls backward.\"\"\"\n        self['value'] = self.guiItem.getValue() + self.guiItem.getPageSize() * pageCount\n\n    def setOrientation(self):\n        if self['orientation'] == DGG.HORIZONTAL:\n            if self._lastOrientation in (DGG.VERTICAL, DGG.VERTICAL_INVERTED):\n                fpre = self['frameSize']\n                # swap frameSize width and height to keep custom frameSizes\n                self['frameSize'] = (fpre[2], fpre[3], fpre[0], fpre[1])\n                f = self.decButton['frameSize']\n                self.decButton['frameSize'] = (f[2], f[3], f[0], f[1])\n                f = self.incButton['frameSize']\n                self.incButton['frameSize'] = (f[2], f[3], f[0], f[1])\n            self.guiItem.setAxis(Vec3(1, 0, 0))\n        elif self['orientation'] == DGG.VERTICAL:\n            if self._lastOrientation == DGG.HORIZONTAL:\n                fpre = self['frameSize']\n                # swap frameSize width and height to keep custom frameSizes\n                self['frameSize'] = (fpre[2], fpre[3], fpre[0], fpre[1])\n                f = self.decButton['frameSize']\n                self.decButton['frameSize'] = (f[2], f[3], f[0], f[1])\n                f = self.incButton['frameSize']\n                self.incButton['frameSize'] = (f[2], f[3], f[0], f[1])\n            self.guiItem.setAxis(Vec3(0, 0, -1))\n        elif self['orientation'] == DGG.VERTICAL_INVERTED:\n            if self._lastOrientation == DGG.HORIZONTAL:\n                fpre = self['frameSize']\n                # swap frameSize width and height to keep custom frameSizes\n                self['frameSize'] = (fpre[2], fpre[3], fpre[0], fpre[1])\n                f = self.decButton['frameSize']\n                self.decButton['frameSize'] = (f[2], f[3], f[0], f[1])\n                f = self.incButton['frameSize']\n                self.incButton['frameSize'] = (f[2], f[3], f[0], f[1])\n            self.guiItem.setAxis(Vec3(0, 0, 1))\n        else:\n            raise ValueError('Invalid value for orientation: %s' % (self['orientation']))\n        self._lastOrientation = self['orientation']\n\n    def setManageButtons(self):\n        self.guiItem.setManagePieces(self['manageButtons'])\n\n    def setResizeThumb(self):\n        self.guiItem.setResizeThumb(self['resizeThumb'])\n\n    def destroy(self):\n        self.thumb.destroy()\n        del self.thumb\n        self.incButton.destroy()\n        del self.incButton\n        self.decButton.destroy()\n        del self.decButton\n        DirectFrame.destroy(self)\n\n    def commandFunc(self):\n        # Store the updated value in self['value']\n        self._optionInfo['value'][DGG._OPT_VALUE] = self.guiItem.getValue()\n\n        if self['command']:\n            self['command'](*self['extraArgs'])\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/gui/DirectScrollBar.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/c8becc07_DirectScrollBar.json",
    "doc_id": "doc_88"
  }
}