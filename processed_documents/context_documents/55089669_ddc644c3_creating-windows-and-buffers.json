{
  "content": "Creating Windows and Buffers\n\nAlthough Panda does provide the convenience function base.openWindow() to create a new window, this function does a lot of things automatically for you and therefore takes away a lot of control. The following discussion will focus instead on creating a window using the low-level interface, in order provide a clearer understanding of the actual class relationships.\n\nIn order to create a window, you will first need a .GraphicsEngine and a .GraphicsPipe object. Both of these were discussed in more detail in previous pages. Panda will typically create both of these for you at startup, and store them in base.graphicsEngine and base.pipe, respectively.\n\nYou will also need to create a .FrameBufferProperties object. This defines important properties such as the number of bits you wish to allocate for red, green, and blue channels; as well as the number of bits for depth buffer; and whether you require a stencil buffer or special multisampling bits for antialiasing. Your graphics card may be able to switch itself into one of several different configurations, and you can use the FrameBufferProperties to request certain properties that are more important to you. Note, however, that there is no guarantee that the graphics card you are running on will be able to provide everything you ask for (but you can later ask what properties you actually got). You can get a default FrameBufferProperties object using .FrameBufferProperties.get_default(). The default FrameBufferProperties has its settings already filled according to the Config.prc file variables; it is usually a good choice to use.\n\nYou will need to create a .WindowProperties object as well. At a minimum, this defines the X, Y size of the window or buffer you want to create. For an offscreen buffer, this is all it defines; but if you are creating a window, it also allows you to specify things like the window title, the placement onscreen, whether it should be user-resizable, and so on. You can get a default WindowProperties object using .WindowProperties.get_default(). The default WindowProperties object has its settings filled in according to Config.prc file variables. If you are creating an offscreen buffer, you may wish to use WindowProperties(size=(W, H)) which creates a simple WindowProperties object that simply requests a buffer of size W\u00d7H.\n\nOnce you have all of these objects, you can create a new window or buffer using the call .GraphicsEngine.make_output(). This is the fundamental method for creating a new .GraphicsOutput; all of the other convenience functions like base.openWindow() or win.make_texture_buffer() <.GraphicsOutput.make_texture_buffer> eventually funnel down into this call. This method accepts several parameters:\n\npython\n\nbase.graphicsEngine.makeOutput(pipe, name, sort, fb_prop, win_prop, flags, gsg, host)\n\ncpp\n\nGraphicsEngine *engine = GraphicsEngine::get_global_ptr();\nengine->make_output(pipe, name, sort, fb_prop, win_prop, flags, gsg, host);\n\nThe return value of ~.GraphicsEngine.make_output() is either the new .GraphicsWindow or .GraphicsBuffer object, or None if it failed for some reason.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/ddc644c3_creating-windows-and-buffers.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/55089669_ddc644c3_creating-windows-and-buffers.json",
    "doc_id": "doc_523"
  }
}