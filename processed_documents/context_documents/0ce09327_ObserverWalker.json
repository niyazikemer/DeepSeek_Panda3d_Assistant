{
  "content": "\"\"\"\nObserverWalker.py is for avatars.\n\nA walker control such as this one provides:\n\n- creation of the collision nodes\n- handling the keyboard and mouse input for avatar movement\n- moving the avatar\n\nit does not:\n\n- play sounds\n- play animations\n\nalthough it does send messages that allow a listener to play sounds or\nanimations based on walker events.\n\"\"\"\n\nfrom panda3d.core import (\n    BitMask32,\n    CollisionHandlerPusher,\n    CollisionNode,\n    CollisionSphere,\n    CollisionTraverser,\n)\nfrom direct.directnotify import DirectNotifyGlobal\nfrom . import NonPhysicsWalker\n\nclass ObserverWalker(NonPhysicsWalker.NonPhysicsWalker):\n    notify = DirectNotifyGlobal.directNotify.newCategory(\"ObserverWalker\")\n\n    # Ghosts slide instead of jump:\n    slideName = \"jump\"\n\n    def initializeCollisions(self, collisionTraverser, avatarNodePath,\n            avatarRadius = 1.4, floorOffset = 1.0, reach = 1.0):\n        \"\"\"\n        Set up the avatar for collisions\n        \"\"\"\n        assert not avatarNodePath.isEmpty()\n\n        self.cTrav = collisionTraverser\n        self.avatarNodePath = avatarNodePath\n\n        # Set up the collision sphere\n        # This is a sphere on the ground to detect barrier collisions\n        self.cSphere = CollisionSphere(0.0, 0.0, 0.0, avatarRadius)\n        cSphereNode = CollisionNode('Observer.cSphereNode')\n        cSphereNode.addSolid(self.cSphere)\n        self.cSphereNodePath = avatarNodePath.attachNewNode(cSphereNode)\n\n        cSphereNode.setFromCollideMask(self.cSphereBitMask)\n        cSphereNode.setIntoCollideMask(BitMask32.allOff())\n\n        # set up wall collision mechanism\n        self.pusher = CollisionHandlerPusher()\n        self.pusher.setInPattern(\"enter%in\")\n        self.pusher.setOutPattern(\"exit%in\")\n\n        self.pusher.addCollider(self.cSphereNodePath, avatarNodePath)\n\n        # activate the collider with the traverser and pusher\n        self.setCollisionsActive(1)\n\n        class Foo:\n            def hasContact(self):\n                return 1\n\n        self.lifter = Foo()\n\n    def deleteCollisions(self):\n        del self.cTrav\n\n        del self.cSphere\n        self.cSphereNodePath.removeNode()\n        del self.cSphereNodePath\n\n        del self.pusher\n\n    def setCollisionsActive(self, active = 1):\n        assert self.debugPrint(\"setCollisionsActive(active%s)\"%(active,))\n        if self.collisionsActive != active:\n            self.collisionsActive = active\n            if active:\n                self.cTrav.addCollider(self.cSphereNodePath, self.pusher)\n            else:\n                self.cTrav.removeCollider(self.cSphereNodePath)\n\n                # Now that we have disabled collisions, make one more pass\n                # right now to ensure we aren't standing in a wall.\n                self.oneTimeCollide()\n\n    def oneTimeCollide(self):\n        \"\"\"\n        Makes one quick collision pass for the avatar, for instance as\n        a one-time straighten-things-up operation after collisions\n        have been disabled.\n        \"\"\"\n        tempCTrav = CollisionTraverser(\"oneTimeCollide\")\n        tempCTrav.addCollider(self.cSphereNodePath, self.pusher)\n        tempCTrav.traverse(render)\n\n    def enableAvatarControls(self):\n        \"\"\"\n        Activate the arrow keys, etc.\n        \"\"\"\n        assert self.debugPrint(\"enableAvatarControls\")\n\n    def disableAvatarControls(self):\n        \"\"\"\n        Ignore the arrow keys, etc.\n        \"\"\"\n        assert self.debugPrint(\"disableAvatarControls\")\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/controls/ObserverWalker.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/0ce09327_ObserverWalker.json",
    "doc_id": "doc_235"
  }
}