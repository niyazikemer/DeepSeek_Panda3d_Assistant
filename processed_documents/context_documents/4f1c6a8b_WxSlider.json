{
  "content": "\"\"\"\nWxSlider Class: Extended wx.Slider supporting floating point values\n                you should call Enable() after binding any event with this control\n\"\"\"\n\n__all__ = ['WxSlider']\n\nimport wx\n\n\nclass WxSlider(wx.Slider):\n    def __init__(self, parent, id, value, minValue, maxValue,\n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n                 style=wx.SL_HORIZONTAL, validator=wx.DefaultValidator,\n                 name=\"slider\", textSize=(40, 20)):\n\n        self.maxValue = maxValue\n        self.minValue = minValue\n        intVal = int(100.0 / (self.maxValue - self.minValue) * (value - self.minValue))\n\n        intMin = 0\n        intMax = 100\n        self.textValue = None\n        self.updateCB = None\n\n        if style & wx.SL_HORIZONTAL:\n            newStyle = wx.SL_HORIZONTAL\n            if style & wx.SL_LABELS:\n                wx.StaticText(parent, -1, \"%.2f\" % minValue, (pos[0], pos[1]))\n                strMaxValue = \"%.2f\" % maxValue\n                wx.StaticText(parent, -1, strMaxValue, (pos[0] + size[0] - len(strMaxValue) * 8, pos[1]))\n                strValue = \"%.2f\" % value\n                self.textValue = wx.TextCtrl(parent, -1, strValue,\n                                             (pos[0] + size[0] / 2 - textSize[0] / 2, pos[1]),\n                                             textSize, wx.TE_CENTER | wx.TE_PROCESS_ENTER)\n\n                self.textValue.Disable()\n                pos = (pos[0], pos[1] + 20)\n        else:\n            newStyle = wx.SL_VERTICAL\n            pos = (pos[0], pos[1] + 40)\n\n        if style & wx.SL_AUTOTICKS:\n            newStyle |= wx.SL_AUTOTICKS\n\n        wx.Slider.__init__(self, parent, id, intVal, intMin, intMax, pos, size, style=newStyle)\n        self.Disable()\n\n    def GetValue(self):\n        # overriding wx.Slider.GetValue()\n        if self.textValue is not None: # Horizontal with labels\n            return float(self.textValue.GetValue()) # [gjeon] since the value from the slider is not as precise as the value entered by the user\n        else:\n            return (wx.Slider.GetValue(self) * (self.maxValue - self.minValue) / 100.0 + self.minValue)\n\n    def SetValue(self, value):\n        # overriding wx.Slider.SetValue()\n        if self.textValue is not None:\n            self.textValue.SetValue(\"%.2f\" % value)\n        intVal = 100.0 / (self.maxValue - self.minValue) * (value - self.minValue)\n        wx.Slider.SetValue(self, intVal)\n\n    def onChange(self, event):\n        # update textValue from slider\n        if self.textValue is not None:\n            self.textValue.Clear()\n            floatVal = wx.Slider.GetValue(self) * (self.maxValue - self.minValue) / 100.0 + self.minValue\n            self.textValue.WriteText(\"%.2f\" % floatVal)\n        if self.updateCB: # callback function sould receive event as the argument\n            self.updateCB(event)\n        event.Skip()\n\n    def onEnter(self, event):\n        # update slider from textValue\n        if self.textValue is None:\n            return\n        intVal = 100.0 / (self.maxValue - self.minValue) * (float(self.textValue.GetValue()) - self.minValue)\n        wx.Slider.SetValue(self, intVal)\n        if self.updateCB: # callback function should receive event as the argument\n            self.updateCB(event)\n        event.Skip()\n\n    def bindFunc(self, updateCB):\n        self.updateCB = updateCB\n\n    def Disable(self):\n        # overriding wx.Slider.Disable()\n        wx.Slider.Disable(self)\n        if self.textValue is not None:\n            self.textValue.Disable()\n\n    def Enable(self):\n        # overriding wx.Slider.Enable()\n        wx.Slider.Enable(self)\n        self.Bind(wx.EVT_SLIDER, self.onChange)\n\n        if self.textValue is not None:\n            self.textValue.Enable()\n            self.textValue.Bind(wx.EVT_TEXT_ENTER, self.onEnter)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/wxwidgets/WxSlider.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/4f1c6a8b_WxSlider.json",
    "doc_id": "doc_14"
  }
}