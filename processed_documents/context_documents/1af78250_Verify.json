{
  "content": "\"\"\"\nYou can use :func:`verify()` just like assert, with these small differences:\n\n- you may need to ``import Verify``, if someone hasn't done it for you.\n\n- unlike assert where using parentheses are optional, :func:`verify()`\n  requires them, e.g.::\n\n    assert foo  # OK\n    verify foo  # Error\n    assert foo  # Not Recomended (may be interpreted as a tuple)\n    verify(foo) # OK\n\n- :func:`verify()` will print something like this before raising an exception::\n\n    verify failed:\n        File \"direct/src/showbase/ShowBase.py\", line 60\n\n- :func:`verify()` will optionally start pdb for you (this is currently false\n  by default).  You can either edit Verify.py to set ``wantVerifyPdb = 1`` or\n  if you are using ShowBase you can set ``want-verify-pdb 1`` in your\n  Config.prc file to start pdb automatically.\n\n- :func:`verify()` will still function in the release build.  It will not be\n  removed by -O like assert will.\n\n:func:`verify()` will also throw an AssertionError, but you can ignore that if\nyou like (I don't suggest trying to catch it, it's just doing it so that it can\nreplace assert more fully).\n\nPlease do not use assert for things that you want run on release builds.\nThat is a bad thing to do.  One of the main reasons that assert exists\nis to stip out debug code from a release build.  The fact that it throws\nan exception can get it mistaken for an error handler.  If your code\nneeds to handle an error or throw an exception, you should do that\n(and not just assert for it).\n\nIf you want to be a super keen software engineer then avoid using\n:func:`verify()`.  If you want to be, or already are, a super keen software\nengineer, but you don't always have the time to write proper error handling,\ngo ahead and use :func:`verify()` -- that's what it's for.\n\nPlease use assert (properly) and do proper error handling; and use\n:func:`verify()` only when debugging (i.e. when it won't be checked-in) or\nwhere it helps you resist using assert for error handling.\n\"\"\"\n\n__all__ = [\"verify\"]\n\nfrom panda3d.core import ConfigVariableBool\n\n# Set to true to load pdb on failure.\nwantVerifyPdb = ConfigVariableBool('want-verify-pdb', False)\n\n\ndef verify(assertion):\n    \"\"\"\n    verify() is intended to be used in place of assert where you\n    wish to have the assertion checked, even in release (-O) code.\n    \"\"\"\n    if not assertion:\n        print(\"\\n\\nverify failed:\")\n        import sys\n        print(\"    File \\\"%s\\\", line %d\" % (\n                sys._getframe(1).f_code.co_filename,\n                sys._getframe(1).f_lineno))\n        if wantVerifyPdb:\n            import pdb\n            pdb.set_trace()\n        raise AssertionError\n\n\nif not hasattr(__builtins__, \"verify\"):\n    __builtins__[\"verify\"] = verify\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directutil/Verify.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/1af78250_Verify.json",
    "doc_id": "doc_127"
  }
}