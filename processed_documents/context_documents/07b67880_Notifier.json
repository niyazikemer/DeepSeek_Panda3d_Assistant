{
  "content": "\"\"\"\nNotifier module: contains methods for handling information output\nfor the programmer/user\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom .Logger import Logger\nfrom .LoggerGlobal import defaultLogger\nfrom direct.showbase import PythonUtil\nfrom panda3d.core import ConfigVariableBool, NotifyCategory, StreamWriter, Notify\nimport time\nimport sys\nfrom typing import NoReturn\n\n\nclass NotifierException(Exception):\n    pass\n\n\nclass Notifier:\n    serverDelta = 0\n\n    # If this object is set to something, it is used to print output\n    # messages instead of writing them to the console.  This is\n    # particularly useful for integrating the Python notify system\n    # with the C++ notify system.\n    streamWriter: StreamWriter | None = None\n    if ConfigVariableBool('notify-integrate', True):\n        streamWriter = StreamWriter(Notify.out(), False)\n\n    showTime = ConfigVariableBool('notify-timestamp', False)\n\n    def __init__(self, name: str, logger: Logger | None = None) -> None:\n        \"\"\"\n        Parameters:\n            name (str): a string name given to this Notifier instance.\n            logger (Logger, optional): an optional Logger object for\n                piping output to.  If none is specified, the global\n                :data:`~.LoggerGlobal.defaultLogger` is used.\n        \"\"\"\n        self.__name = name\n\n        if logger is None:\n            self.__logger = defaultLogger\n        else:\n            self.__logger = logger\n\n        # Global default levels are initialized here\n        self.__info = True\n        self.__warning = True\n        self.__debug = False\n        self.__logging = False\n\n    def setServerDelta(self, delta: float, timezone: int) -> None:\n        \"\"\"\n        Call this method on any Notify object to globally change the\n        timestamp printed for each line of all Notify objects.\n\n        This synchronizes the timestamp with the server's known time\n        of day, and also switches into the server's timezone.\n        \"\"\"\n        delta = int(round(delta))\n        Notifier.serverDelta = delta + time.timezone - timezone\n\n        # The following call is necessary to make the output from C++\n        # notify messages show the same timestamp as those generated\n        # from Python-level notify messages.\n        NotifyCategory.setServerDelta(self.serverDelta)\n\n        self.info(\"Notify clock adjusted by %s (and timezone adjusted by %s hours) to synchronize with server.\" % (PythonUtil.formatElapsedSeconds(delta), (time.timezone - timezone) / 3600))\n\n    def getTime(self) -> str:\n        \"\"\"\n        Return the time as a string suitable for printing at the\n        head of any notify message\n        \"\"\"\n        # for some strange reason, time.time() updates only once/minute if\n        # the task is out of focus on win32.  time.clock doesn't have this problem.\n        return time.strftime(\":%m-%d-%Y %H:%M:%S \", time.localtime(time.time() + self.serverDelta))\n\n    def getOnlyTime(self) -> str:\n        \"\"\"\n        Return the time as a string.\n        The Only in the name is referring to not showing the date.\n        \"\"\"\n        return time.strftime(\"%H:%M:%S\", time.localtime(time.time() + self.serverDelta))\n\n    def __str__(self) -> str:\n        \"\"\"\n        Print handling routine\n        \"\"\"\n        return \"%s: info = %d, warning = %d, debug = %d, logging = %d\" % \\\n               (self.__name, self.__info, self.__warning, self.__debug, self.__logging)\n\n    # Severity funcs\n    def setSeverity(self, severity: int) -> None:\n        from panda3d.core import NSDebug, NSInfo, NSWarning, NSError\n        if severity >= NSError:\n            self.setWarning(False)\n            self.setInfo(False)\n            self.setDebug(False)\n        elif severity == NSWarning:\n            self.setWarning(True)\n            self.setInfo(False)\n            self.setDebug(False)\n        elif severity == NSInfo:\n            self.setWarning(True)\n            self.setInfo(True)\n            self.setDebug(False)\n        elif severity <= NSDebug:\n            self.setWarning(True)\n            self.setInfo(True)\n            self.setDebug(True)\n\n    def getSeverity(self) -> int:\n        from panda3d.core import NSDebug, NSInfo, NSWarning, NSError\n        if self.getDebug():\n            return NSDebug\n        elif self.getInfo():\n            return NSInfo\n        elif self.getWarning():\n            return NSWarning\n        else:\n            return NSError\n\n    # error funcs\n    def error(self, errorString: object, exception: type[Exception] = NotifierException) -> NoReturn:\n        \"\"\"\n        Raise an exception with given string and optional type:\n        Exception: error\n        \"\"\"\n        message = str(errorString)\n        if Notifier.showTime:\n            string = f'{self.getTime()}{exception!s}: {self.__name}(error): {message}'\n        else:\n            string = f'{exception!s}: {self.__name}(error): {message}'\n        self.__log(string)\n        raise exception(errorString)\n\n    # warning funcs\n    def warning(self, warningString: object) -> int:\n        \"\"\"\n        Issue the warning message if warn flag is on\n        \"\"\"\n        if self.__warning:\n            message = str(warningString)\n            if Notifier.showTime:\n                string = f'{self.getTime()}{self.__name}(warning): {message}'\n            else:\n                string = f':{self.__name}(warning): {message}'\n            self.__log(string)\n            self.__print(string)\n        return 1 # to allow assert myNotify.warning(\"blah\")\n\n    def setWarning(self, enable: bool) -> None:\n        \"\"\"\n        Enable/Disable the printing of warning messages\n        \"\"\"\n        self.__warning = enable\n\n    def getWarning(self) -> bool:\n        \"\"\"\n        Return whether the printing of warning messages is on or off\n        \"\"\"\n        return self.__warning\n\n    # debug funcs\n    def debug(self, debugString: object) -> int:\n        \"\"\"\n        Issue the debug message if debug flag is on\n        \"\"\"\n        if self.__debug:\n            message = str(debugString)\n            if Notifier.showTime:\n                string = f'{self.getTime()}{self.__name}(debug): {message}'\n            else:\n                string = f':{self.__name}(debug): {message}'\n            self.__log(string)\n            self.__print(string)\n        return 1 # to allow assert myNotify.debug(\"blah\")\n\n    def setDebug(self, enable: bool) -> None:\n        \"\"\"\n        Enable/Disable the printing of debug messages\n        \"\"\"\n        self.__debug = enable\n\n    def getDebug(self) -> bool:\n        \"\"\"\n        Return whether the printing of debug messages is on or off\n        \"\"\"\n        return self.__debug\n\n    # info funcs\n    def info(self, infoString: object) -> int:\n        \"\"\"\n        Print the given informational string, if info flag is on\n        \"\"\"\n        if self.__info:\n            message = str(infoString)\n            if Notifier.showTime:\n                string = f'{self.getTime()}{self.__name}: {message}'\n            else:\n                string = f':{self.__name}: {message}'\n            self.__log(string)\n            self.__print(string)\n        return 1 # to allow assert myNotify.info(\"blah\")\n\n    def getInfo(self) -> bool:\n        \"\"\"\n        Return whether the printing of info messages is on or off\n        \"\"\"\n        return self.__info\n\n    def setInfo(self, enable: bool) -> None:\n        \"\"\"\n        Enable/Disable informational message  printing\n        \"\"\"\n        self.__info = enable\n\n    # log funcs\n    def __log(self, logEntry: str) -> None:\n        \"\"\"\n        Determine whether to send informational message to the logger\n        \"\"\"\n        if self.__logging:\n            self.__logger.log(logEntry)\n\n    def getLogging(self) -> bool:\n        \"\"\"\n        Return 1 if logging enabled, 0 otherwise\n        \"\"\"\n        return self.__logging\n\n    def setLogging(self, enable: bool) -> None:\n        \"\"\"\n        Set the logging flag to int (1=on, 0=off)\n        \"\"\"\n        self.__logging = enable\n\n    def __print(self, string: str) -> None:\n        \"\"\"\n        Prints the string to output followed by a newline.\n        \"\"\"\n        if self.streamWriter:\n            self.streamWriter.write(string + '\\n')\n        else:\n            sys.stderr.write(string + '\\n')\n\n    def debugStateCall(self, obj=None, fsmMemberName='fsm',\n            secondaryFsm='secondaryFSM'):\n        \"\"\"\n        If this notify is in debug mode, print the time of the\n        call followed by the [fsm state] notifier category and\n        the function call (with parameters).\n        \"\"\"\n        #f.f_locals['self'].__init__.im_class.__name__\n        if __debug__ and self.__debug:\n            state = ''\n            doId = ''\n            if obj is not None:\n\n                fsm=obj.__dict__.get(fsmMemberName)\n                if fsm is not None:\n                    stateObj = fsm.getCurrentState()\n                    if stateObj is not None:\n                        #state = \"%s=%s\"%(fsmMemberName, stateObj.getName())\n                        state = stateObj.getName()\n\n                fsm=obj.__dict__.get(secondaryFsm)\n                if fsm is not None:\n                    stateObj = fsm.getCurrentState()\n                    if stateObj is not None:\n                        #state = \"%s=%s\"%(fsmMemberName, stateObj.getName())\n                        state = \"%s, %s\"%(state, stateObj.getName())\n\n                if hasattr(obj, 'doId'):\n                    doId = f\" doId:{obj.doId}\"\n            #if type(obj) == types.ClassType:\n            #    name = \"%s.\"%(obj.__class__.__name__,)\n            string = \":%s:%s [%-7s] id(%s)%s %s\"%(\n                self.getOnlyTime(),\n                self.__name,\n                state,\n                id(obj),\n                doId,\n                PythonUtil.traceParentCall())\n            self.__log(string)\n            self.__print(string)\n        return 1 # to allow assert self.notify.debugStateCall(self)\n\n    def debugCall(self, debugString: object = '') -> int:\n        \"\"\"\n        If this notify is in debug mode, print the time of the\n        call followed by the notifier category and\n        the function call (with parameters).\n        \"\"\"\n        if __debug__ and self.__debug:\n            message = str(debugString)\n            string = \":%s:%s \\\"%s\\\" %s\"%(\n                self.getOnlyTime(),\n                self.__name,\n                message,\n                PythonUtil.traceParentCall())\n            self.__log(string)\n            self.__print(string)\n        return 1 # to allow assert self.notify.debugCall(\"blah\")\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directnotify/Notifier.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/07b67880_Notifier.json",
    "doc_id": "doc_104"
  }
}