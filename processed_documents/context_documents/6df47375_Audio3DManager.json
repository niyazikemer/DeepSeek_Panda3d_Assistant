{
  "content": "\"\"\"Contains the Audio3DManager class.\"\"\"\n\n__all__ = ['Audio3DManager']\n\nfrom panda3d.core import Vec3, VBase3, WeakNodePath, ClockObject\nfrom direct.task.TaskManagerGlobal import Task, taskMgr\n\n\nclass Audio3DManager:\n\n    def __init__(self, audio_manager, listener_target = None, root = None,\n                 taskPriority = 51):\n        self.audio_manager = audio_manager\n        self.listener_target = listener_target\n\n        if root is None:\n            self.root = base.render\n        else:\n            self.root = root\n\n        self.sound_dict = {}\n        self.vel_dict = {}\n        self.listener_vel = VBase3(0, 0, 0)\n\n        taskMgr.add(self.update, \"Audio3DManager-updateTask\", taskPriority)\n\n    def loadSfx(self, name):\n        \"\"\"\n        Use Audio3DManager.loadSfx to load a sound with 3D positioning enabled\n        \"\"\"\n        sound = None\n        if name:\n            sound = self.audio_manager.getSound(name, 1)\n        return sound\n\n    def setDistanceFactor(self, factor):\n        \"\"\"\n        Control the scale that sets the distance units for 3D spacialized audio.\n        Default is 1.0 which is adjust in panda to be meters.\n        When you change this, don't forget that this effects the scale of setSoundMinDistance\n        \"\"\"\n        self.audio_manager.audio3dSetDistanceFactor(factor)\n\n    def getDistanceFactor(self):\n        \"\"\"\n        Control the scale that sets the distance units for 3D spacialized audio.\n        Default is 1.0 which is adjust in panda to be meters.\n        \"\"\"\n        return self.audio_manager.audio3dGetDistanceFactor()\n\n    def setDopplerFactor(self, factor):\n        \"\"\"\n        Control the presence of the Doppler effect. Default is 1.0\n        Exaggerated Doppler, use >1.0\n        Diminshed Doppler, use <1.0\n        \"\"\"\n        self.audio_manager.audio3dSetDopplerFactor(factor)\n\n    def getDopplerFactor(self):\n        \"\"\"\n        Control the presence of the Doppler effect. Default is 1.0\n        Exaggerated Doppler, use >1.0\n        Diminshed Doppler, use <1.0\n        \"\"\"\n        return self.audio_manager.audio3dGetDopplerFactor()\n\n    def setDropOffFactor(self, factor):\n        \"\"\"\n        Exaggerate or diminish the effect of distance on sound. Default is 1.0\n        Valid range is 0 to 10\n        Faster drop off, use >1.0\n        Slower drop off, use <1.0\n        \"\"\"\n        self.audio_manager.audio3dSetDropOffFactor(factor)\n\n    def getDropOffFactor(self):\n        \"\"\"\n        Exaggerate or diminish the effect of distance on sound. Default is 1.0\n        Valid range is 0 to 10\n        Faster drop off, use >1.0\n        Slower drop off, use <1.0\n        \"\"\"\n        return self.audio_manager.audio3dGetDropOffFactor()\n\n    def setSoundMinDistance(self, sound, dist):\n        \"\"\"\n        Controls the distance (in units) that this sound begins to fall off.\n        Also affects the rate it falls off.\n        Default is 3.28 (in feet, this is 1 meter)\n        Don't forget to change this when you change the DistanceFactor\n        \"\"\"\n        sound.set3dMinDistance(dist)\n\n    def getSoundMinDistance(self, sound):\n        \"\"\"\n        Controls the distance (in units) that this sound begins to fall off.\n        Also affects the rate it falls off.\n        Default is 3.28 (in feet, this is 1 meter)\n        \"\"\"\n        return sound.get3dMinDistance()\n\n    def setSoundMaxDistance(self, sound, dist):\n        \"\"\"\n        Controls the maximum distance (in units) that this sound stops falling off.\n        The sound does not stop at that point, it just doesn't get any quieter.\n        You should rarely need to adjust this.\n        Default is 1000000000.0\n        \"\"\"\n        sound.set3dMaxDistance(dist)\n\n    def getSoundMaxDistance(self, sound):\n        \"\"\"\n        Controls the maximum distance (in units) that this sound stops falling off.\n        The sound does not stop at that point, it just doesn't get any quieter.\n        You should rarely need to adjust this.\n        Default is 1000000000.0\n        \"\"\"\n        return sound.get3dMaxDistance()\n\n    def setSoundVelocity(self, sound, velocity):\n        \"\"\"\n        Set the velocity vector (in units/sec) of the sound, for calculating doppler shift.\n        This is relative to the sound root (probably render).\n        Default: VBase3(0, 0, 0)\n        \"\"\"\n        if isinstance(velocity, tuple) and len(velocity) == 3:\n            velocity = VBase3(*velocity)\n        if not isinstance(velocity, VBase3):\n            raise TypeError(\"Invalid argument 1, expected <VBase3>\")\n        self.vel_dict[sound] = velocity\n\n    def setSoundVelocityAuto(self, sound):\n        \"\"\"\n        If velocity is set to auto, the velocity will be determined by the\n        previous position of the object the sound is attached to and the frame dt.\n        Make sure if you use this method that you remember to clear the previous\n        transformation between frames.\n        \"\"\"\n        self.vel_dict[sound]=None\n\n    def getSoundVelocity(self, sound):\n        \"\"\"\n        Get the velocity of the sound.\n        \"\"\"\n        if sound in self.vel_dict:\n            vel = self.vel_dict[sound]\n            if vel is not None:\n                return vel\n\n            for known_object in list(self.sound_dict.keys()):\n                if self.sound_dict[known_object].count(sound):\n                    node_path = known_object.getNodePath()\n                    if not node_path:\n                        # The node has been deleted.\n                        del self.sound_dict[known_object]\n                        continue\n\n                    clock = ClockObject.getGlobalClock()\n                    return node_path.getPosDelta(self.root) / clock.getDt()\n\n        return VBase3(0, 0, 0)\n\n    def setListenerVelocity(self, velocity):\n        \"\"\"\n        Set the velocity vector (in units/sec) of the listener, for calculating doppler shift.\n        This is relative to the sound root (probably render).\n        Default: VBase3(0, 0, 0)\n        \"\"\"\n        if isinstance(velocity, tuple) and len(velocity) == 3:\n            velocity = VBase3(*velocity)\n        if not isinstance(velocity, VBase3):\n            raise TypeError(\"Invalid argument 0, expected <VBase3>\")\n        self.listener_vel = velocity\n\n    def setListenerVelocityAuto(self):\n        \"\"\"\n        If velocity is set to auto, the velocity will be determined by the\n        previous position of the object the listener is attached to and the frame dt.\n        Make sure if you use this method that you remember to clear the previous\n        transformation between frames.\n        \"\"\"\n        self.listener_vel = None\n\n    def getListenerVelocity(self):\n        \"\"\"\n        Get the velocity of the listener.\n        \"\"\"\n        if self.listener_vel is not None:\n            return self.listener_vel\n        elif self.listener_target is not None:\n            clock = ClockObject.getGlobalClock()\n            return self.listener_target.getPosDelta(self.root) / clock.getDt()\n        else:\n            return VBase3(0, 0, 0)\n\n    def attachSoundToObject(self, sound, object):\n        \"\"\"\n        Sound will come from the location of the object it is attached to.\n        If the object is deleted, the sound will automatically be removed.\n        \"\"\"\n        # sound is an AudioSound\n        # object is any Panda object with coordinates\n        for known_object in list(self.sound_dict.keys()):\n            if self.sound_dict[known_object].count(sound):\n                # This sound is already attached to something\n                #return 0\n                # detach sound\n                self.sound_dict[known_object].remove(sound)\n                if len(self.sound_dict[known_object]) == 0:\n                    # if there are no other sounds, don't track\n                    # the object any more\n                    del self.sound_dict[known_object]\n\n        if object not in self.sound_dict:\n            self.sound_dict[WeakNodePath(object)] = []\n\n        self.sound_dict[object].append(sound)\n        return 1\n\n\n    def detachSound(self, sound):\n        \"\"\"\n        sound will no longer have it's 3D position updated\n        \"\"\"\n        for known_object in list(self.sound_dict.keys()):\n            if self.sound_dict[known_object].count(sound):\n                self.sound_dict[known_object].remove(sound)\n                if len(self.sound_dict[known_object]) == 0:\n                    # if there are no other sounds, don't track\n                    # the object any more\n                    del self.sound_dict[known_object]\n                return 1\n        return 0\n\n\n    def getSoundsOnObject(self, object):\n        \"\"\"\n        returns a list of sounds attached to an object\n        \"\"\"\n        if object not in self.sound_dict:\n            return []\n        sound_list = []\n        sound_list.extend(self.sound_dict[object])\n        return sound_list\n\n\n    def attachListener(self, object):\n        \"\"\"\n        Sounds will be heard relative to this object. Should probably be the camera.\n        \"\"\"\n        self.listener_target = object\n        return 1\n\n\n    def detachListener(self):\n        \"\"\"\n        Sounds will be heard relative to the root, probably render.\n        \"\"\"\n        self.listener_target = None\n        return 1\n\n\n    def update(self, task=None):\n        \"\"\"\n        Updates position of sounds in the 3D audio system. Will be called automatically\n        in a task.\n        \"\"\"\n        # Update the positions of all sounds based on the objects\n        # to which they are attached\n\n        # The audio manager is not active so do nothing\n        if hasattr(self.audio_manager, \"getActive\"):\n            if self.audio_manager.getActive()==0:\n                return Task.cont\n\n        for known_object, sounds in list(self.sound_dict.items()):\n            node_path = known_object.getNodePath()\n            if not node_path:\n                # The node has been deleted.\n                del self.sound_dict[known_object]\n                continue\n\n            pos = node_path.getPos(self.root)\n\n            for sound in sounds:\n                vel = self.getSoundVelocity(sound)\n                sound.set3dAttributes(pos[0], pos[1], pos[2], vel[0], vel[1], vel[2])\n\n        # Update the position of the listener based on the object\n        # to which it is attached\n        if self.listener_target:\n            pos = self.listener_target.getPos(self.root)\n            forward = self.root.getRelativeVector(self.listener_target, Vec3.forward())\n            up = self.root.getRelativeVector(self.listener_target, Vec3.up())\n            vel = self.getListenerVelocity()\n            self.audio_manager.audio3dSetListenerAttributes(pos[0], pos[1], pos[2], vel[0], vel[1], vel[2], forward[0], forward[1], forward[2], up[0], up[1], up[2])\n        else:\n            self.audio_manager.audio3dSetListenerAttributes(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1)\n        return Task.cont\n\n    def disable(self):\n        \"\"\"\n        Detaches any existing sounds and removes the update task\n        \"\"\"\n        taskMgr.remove(\"Audio3DManager-updateTask\")\n        self.detachListener()\n        for object in list(self.sound_dict.keys()):\n            for sound in self.sound_dict[object]:\n                self.detachSound(sound)\n\n    #snake_case alias:\n    get_doppler_factor = getDopplerFactor\n    set_listener_velocity_auto = setListenerVelocityAuto\n    attach_listener = attachListener\n    set_distance_factor = setDistanceFactor\n    attach_sound_to_object = attachSoundToObject\n    get_drop_off_factor = getDropOffFactor\n    set_doppler_factor = setDopplerFactor\n    get_sounds_on_object = getSoundsOnObject\n    set_sound_velocity_auto = setSoundVelocityAuto\n    get_sound_max_distance = getSoundMaxDistance\n    load_sfx = loadSfx\n    get_distance_factor = getDistanceFactor\n    set_listener_velocity = setListenerVelocity\n    set_sound_max_distance = setSoundMaxDistance\n    get_sound_velocity = getSoundVelocity\n    get_listener_velocity = getListenerVelocity\n    set_sound_velocity = setSoundVelocity\n    set_sound_min_distance = setSoundMinDistance\n    get_sound_min_distance = getSoundMinDistance\n    detach_listener = detachListener\n    set_drop_off_factor = setDropOffFactor\n    detach_sound = detachSound\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/Audio3DManager.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/6df47375_Audio3DManager.json",
    "doc_id": "doc_255"
  }
}