{
  "content": "\"\"\"OnscreenGeom module: contains the OnscreenGeom class\"\"\"\n\n__all__ = ['OnscreenGeom']\n\nfrom panda3d.core import NodePath, VBase3\nfrom direct.showbase.DirectObject import DirectObject\n\n\nclass OnscreenGeom(DirectObject, NodePath):\n    def __init__(self, geom = None,\n                 pos = None,\n                 hpr = None,\n                 scale = None,\n                 color = None,\n                 parent = None,\n                 sort = 0):\n        \"\"\"\n        Make a geom node from string or a node path,\n        put it into the 2d sg and set it up with all the indicated parameters.\n\n        The parameters are as follows:\n\n          geom: the actual geometry to display or a file name.\n                This may be omitted and specified later via setGeom()\n                if you don't have it available.\n\n          pos: the x, y, z position of the geometry on the screen.\n               This maybe a 3-tuple of floats or a vector.\n               y should be zero\n\n          hpr: the h, p, r of the geometry on the screen.\n               This maybe a 3-tuple of floats or a vector.\n\n          scale: the size of the geometry.  This may either be a single\n                 float, a 3-tuple of floats, or a vector, specifying a\n                 different x, y, z scale.  y should be 1\n\n          color: the (r, g, b, a) color of the geometry.  This is\n                 normally a 4-tuple of floats or ints.\n\n          parent: the NodePath to parent the geometry to initially.\n        \"\"\"\n        # We ARE a node path.  Initially, we're an empty node path.\n        NodePath.__init__(self)\n        if parent is None:\n            from direct.showbase import ShowBaseGlobal\n            parent = ShowBaseGlobal.aspect2d\n\n        self.setGeom(geom, parent = parent, sort = sort, color = color)\n\n        # Adjust pose\n        # Set pos\n        if (isinstance(pos, tuple) or\n            isinstance(pos, list)):\n            self.setPos(*pos)\n        elif isinstance(pos, VBase3):\n            self.setPos(pos)\n        # Hpr\n        if (isinstance(hpr, tuple) or\n            isinstance(hpr, list)):\n            self.setHpr(*hpr)\n        elif isinstance(hpr, VBase3):\n            self.setPos(hpr)\n        # Scale\n        if (isinstance(scale, tuple) or\n            isinstance(scale, list)):\n            self.setScale(*scale)\n        elif isinstance(scale, VBase3):\n            self.setPos(scale)\n        elif (isinstance(scale, float) or\n              isinstance(scale, int)):\n            self.setScale(scale)\n\n    def setGeom(self, geom,\n                parent = NodePath(),\n                transform = None,\n                sort = 0,\n                color = None):\n        # Get the original parent, transform, and sort, if any, so we can\n        # preserve them across this call.\n        if not self.isEmpty():\n            parent = self.getParent()\n            if transform is None:\n                # If we're replacing a previous image, we throw away\n                # the new image's transform in favor of the original\n                # image's transform.\n                transform = self.getTransform()\n            sort = self.getSort()\n            if color is None and self.hasColor():\n                color = self.getColor()\n\n        self.removeNode()\n\n        # Assign geometry\n        if isinstance(geom, NodePath):\n            self.assign(geom.copyTo(parent, sort))\n        elif isinstance(geom, str):\n            self.assign(base.loader.loadModel(geom))\n            self.reparentTo(parent, sort)\n\n        if not self.isEmpty():\n            if transform:\n                self.setTransform(transform.compose(self.getTransform()))\n\n            # Set color, if specified\n            if color:\n                self.setColor(color[0], color[1], color[2], color[3])\n\n    def getGeom(self):\n        return self\n\n    def configure(self, option=None, **kw):\n        for option, value in kw.items():\n            # Use option string to access setter function\n            try:\n                setter = getattr(self, 'set' + option[0].upper() + option[1:])\n                if (((setter == self.setPos) or\n                     (setter == self.setHpr) or\n                     (setter == self.setScale)) and\n                    (isinstance(value, tuple) or\n                     isinstance(value, list))):\n                    setter(*value)\n                else:\n                    setter(value)\n            except AttributeError:\n                print('OnscreenText.configure: invalid option: %s' % option)\n\n    # Allow index style references\n    def __setitem__(self, key, value):\n        self.configure(*(), **{key: value})\n\n    def cget(self, option):\n        # Get current configuration setting.\n        # This is for compatibility with DirectGui functions\n        getter = getattr(self, 'get' + option[0].upper() + option[1:])\n        return getter()\n\n    # Allow index style refererences\n    __getitem__ = cget\n\n    def destroy(self):\n        self.removeNode()\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/gui/OnscreenGeom.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/fef1fa21_OnscreenGeom.json",
    "doc_id": "doc_85"
  }
}