{
  "content": "from direct.distributed.DistributedObjectOV import DistributedObjectOV\n\nclass DistributedCameraOV(DistributedObjectOV):\n    def __init__(self, cr):\n        DistributedObjectOV.__init__(self, cr)\n        self.parent = 0\n        self.fixtures = []\n        self.accept('refresh-fixture', self.refreshFixture)\n\n    def delete(self):\n        self.ignore('escape')\n        self.ignore('refresh-fixture')\n        DistributedObjectOV.delete(self)\n\n    def getObject(self):\n        return self.cr.getDo(self.getDoId())\n\n    def setCamParent(self, doId):\n        self.parent = doId\n\n    def setFixtures(self, fixtures):\n        self.fixtures = fixtures\n\n    def storeToFile(self, name):\n        f = open('cameras-%s.txt' % name, 'w')\n        f.writelines(self.getObject().pack())\n        f.close()\n\n    def unpackFixture(self, data):\n        data = data.strip().replace('Camera','')\n        pos,hpr,fov = eval(data)\n        return pos,hpr,fov\n\n    def loadFromFile(self, name):\n        self.b_setFixtures([])\n        f = open('cameras-%s.txt' % name, 'r')\n        for line in f.readlines():\n            pos,hpr,fov = self.unpackFixture(line)\n            self.addFixture([pos[0],pos[1],pos[2],\n                             hpr[0],hpr[1],hpr[2],\n                             fov[0],fov[1],\n                             'Standby'])\n        f.close()\n\n    def refreshFixture(self, id, data):\n        pos,hpr,fov = self.unpackFixture(data)\n        fixture = self.fixtures[id]\n        fixture = [pos[0],pos[1],pos[2],\n                   hpr[0],hpr[1],hpr[2],\n                   fov[0],fov[1],\n                   fixture[8]]\n\n        # distributed only\n        self.d_setFixtures(self.fixtures)\n\n    def b_setFixtures(self, fixtures):\n        self.getObject().setFixtures(fixtures)\n        self.setFixtures(fixtures)\n        self.d_setFixtures(fixtures)\n\n    def d_setFixtures(self, fixtures):\n        self.sendUpdate('setFixtures', [fixtures])\n\n    def addFixture(self, fixture, index = None):\n        if index is not None:\n            self.fixtures.insert(index, fixture)\n        else:\n            self.fixtures.append(fixture)\n        self.b_setFixtures(self.fixtures)\n        return self.fixtures.index(fixture)\n\n    def blinkFixture(self, index):\n        if index < len(self.fixtures):\n            fixture = self.fixtures[index]\n            fixture[6] = 'Blinking'\n            self.b_setFixtures(self.fixtures)\n\n    def standbyFixture(self, index):\n        if index < len(self.fixtures):\n            fixture = self.fixtures[index]\n            fixture[6] = 'Standby'\n            self.b_setFixtures(self.fixtures)\n\n    def testFixture(self, index):\n        if index < len(self.fixtures):\n            self.getObject().testFixture(index)\n\n    def removeFixture(self, index):\n        self.fixtures.pop(index)\n        self.b_setFixtures(self.fixtures)\n\n    def saveFixture(self, index = None):\n        \"\"\"\n        Position the camera with ~oobe, then call this to save its telemetry.\n        \"\"\"\n        parent = self.getObject().getCamParent()\n        pos = base.cam.getPos(parent)\n        hpr = base.cam.getHpr(parent)\n        return self.addFixture([pos[0], pos[1], pos[2],\n                                hpr[0], hpr[1], hpr[2],\n                                'Standby'],\n                               index)\n\n    def startRecording(self):\n        self.accept('escape', self.stopRecording)\n        for fixture in self.fixtures:\n            fixture[6] = 'Recording'\n        self.b_setFixtures(self.fixtures)\n\n    def stopRecording(self):\n        self.ignore('escape')\n        for fixture in self.fixtures:\n            fixture[6] = 'Standby'\n        self.b_setFixtures(self.fixtures)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/DistributedCameraOV.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/3deb3265_DistributedCameraOV.json",
    "doc_id": "doc_331"
  }
}