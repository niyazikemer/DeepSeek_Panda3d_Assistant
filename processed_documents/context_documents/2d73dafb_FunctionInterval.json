{
  "content": "\"\"\"FunctionInterval module: contains the FunctionInterval class\"\"\"\n\nfrom __future__ import annotations\n\n__all__ = ['FunctionInterval', 'EventInterval', 'AcceptInterval', 'IgnoreInterval', 'ParentInterval', 'WrtParentInterval', 'PosInterval', 'HprInterval', 'ScaleInterval', 'PosHprInterval', 'HprScaleInterval', 'PosHprScaleInterval', 'Func', 'Wait']\n\nfrom panda3d.direct import WaitInterval\nfrom direct.showbase.MessengerGlobal import messenger\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nfrom . import Interval\n\n\nclass FunctionInterval(Interval.Interval):\n    # Name counter\n    functionIntervalNum = 1\n\n    # Keep a list of function intervals currently in memory for\n    # Control-C-Control-V redefining. These are just weakrefs so they\n    # should not cause any leaks.\n    if __debug__:\n        import weakref\n        FunctionIntervals: weakref.WeakKeyDictionary[FunctionInterval, int] = weakref.WeakKeyDictionary()\n\n        @classmethod\n        def replaceMethod(cls, oldFunction, newFunction):\n            import types\n            count = 0\n            for ival in cls.FunctionIntervals:\n                # print 'testing: ', ival.function, oldFunction\n                # Note: you can only replace methods currently\n                if isinstance(ival.function, types.MethodType):\n                    if ival.function.__func__ == oldFunction:\n                        # print 'found: ', ival.function, oldFunction\n                        ival.function = types.MethodType(newFunction,\n                                                         ival.function.__self__)\n                        count += 1\n            return count\n\n    # create FunctionInterval DirectNotify category\n    notify = directNotify.newCategory('FunctionInterval')\n\n    # Class methods\n    def __init__(self, function, **kw):\n        \"\"\"__init__(function, name = None, openEnded = 1, extraArgs = [])\n        \"\"\"\n        name = kw.pop('name', None)\n        openEnded = kw.pop('openEnded', 1)\n        extraArgs = kw.pop('extraArgs', [])\n\n        # Record instance variables\n        self.function = function\n\n        # Create a unique name for the interval if necessary\n        if name is None:\n            name = self.makeUniqueName(function)\n        assert isinstance(name, str)\n\n        # Record any arguments\n        self.extraArgs = extraArgs\n        self.kw = kw\n        # Initialize superclass\n        # Set openEnded true if privInitialize after end time cause interval\n        # function to be called.  If false, privInitialize calls have no effect\n        # Event, Accept, Ignore intervals default to openEnded = 0\n        # Parent, Pos, Hpr, etc intervals default to openEnded = 1\n        Interval.Interval.__init__(self, name, duration = 0.0, openEnded = openEnded)\n\n        # For rebinding, let's remember this function interval on the class\n        if __debug__:\n            self.FunctionIntervals[self] = 1\n\n    @staticmethod\n    def makeUniqueName(func, suffix = ''):\n        func_name = getattr(func, '__name__', None)\n        if func_name is None:\n            func_name = str(func)\n        name = 'Func-%s-%d' % (func_name, FunctionInterval.functionIntervalNum)\n        FunctionInterval.functionIntervalNum += 1\n        if suffix:\n            name = '%s-%s' % (name, str(suffix))\n        return name\n\n    def privInstant(self):\n        # Evaluate the function\n        self.function(*self.extraArgs, **self.kw)\n        # Print debug information\n        self.notify.debug(\n            'updateFunc() - %s: executing Function' % self.name)\n\n\n### FunctionInterval subclass for throwing events ###\nclass EventInterval(FunctionInterval):\n    # Initialization\n    def __init__(self, event, sentArgs=[]):\n        \"\"\"__init__(event, sentArgs)\n        \"\"\"\n        def sendFunc(event = event, sentArgs = sentArgs):\n            messenger.send(event, sentArgs)\n        # Create function interval\n        FunctionInterval.__init__(self, sendFunc, name = event)\n\n### FunctionInterval subclass for accepting hooks ###\nclass AcceptInterval(FunctionInterval):\n    # Initialization\n    def __init__(self, dirObj, event, function, name = None):\n        \"\"\"__init__(dirObj, event, function, name)\n        \"\"\"\n        def acceptFunc(dirObj = dirObj, event = event, function = function):\n            dirObj.accept(event, function)\n        # Determine name\n        if name is None:\n            name = 'Accept-' + event\n        # Create function interval\n        FunctionInterval.__init__(self, acceptFunc, name = name)\n\n### FunctionInterval subclass for ignoring events ###\nclass IgnoreInterval(FunctionInterval):\n    # Initialization\n    def __init__(self, dirObj, event, name = None):\n        \"\"\"__init__(dirObj, event, name)\n        \"\"\"\n        def ignoreFunc(dirObj = dirObj, event = event):\n            dirObj.ignore(event)\n        # Determine name\n        if name is None:\n            name = 'Ignore-' + event\n        # Create function interval\n        FunctionInterval.__init__(self, ignoreFunc, name = name)\n\n### Function Interval subclass for adjusting scene graph hierarchy ###\nclass ParentInterval(FunctionInterval):\n    # ParentInterval counter\n    parentIntervalNum = 1\n    # Initialization\n    def __init__(self, nodePath, parent, name = None):\n        \"\"\"__init__(nodePath, parent, name)\n        \"\"\"\n        def reparentFunc(nodePath = nodePath, parent = parent):\n            nodePath.reparentTo(parent)\n        # Determine name\n        if name is None:\n            name = 'ParentInterval-%d' % ParentInterval.parentIntervalNum\n            ParentInterval.parentIntervalNum += 1\n        # Create function interval\n        FunctionInterval.__init__(self, reparentFunc, name = name)\n\n### Function Interval subclass for adjusting scene graph hierarchy ###\nclass WrtParentInterval(FunctionInterval):\n    # WrtParentInterval counter\n    wrtParentIntervalNum = 1\n    # Initialization\n    def __init__(self, nodePath, parent, name = None):\n        \"\"\"__init__(nodePath, parent, name)\n        \"\"\"\n        def wrtReparentFunc(nodePath = nodePath, parent = parent):\n            nodePath.wrtReparentTo(parent)\n        # Determine name\n        if name is None:\n            name = ('WrtParentInterval-%d' %\n                    WrtParentInterval.wrtParentIntervalNum)\n            WrtParentInterval.wrtParentIntervalNum += 1\n        # Create function interval\n        FunctionInterval.__init__(self, wrtReparentFunc, name = name)\n\n### Function Interval subclasses for instantaneous pose changes ###\nclass PosInterval(FunctionInterval):\n    # PosInterval counter\n    posIntervalNum = 1\n    # Initialization\n    def __init__(self, nodePath, pos, duration = 0.0,\n                 name = None, other = None):\n        \"\"\"__init__(nodePath, pos, duration, name)\n        \"\"\"\n        # Create function\n        def posFunc(np = nodePath, pos = pos, other = other):\n            if other:\n                np.setPos(other, pos)\n            else:\n                np.setPos(pos)\n        # Determine name\n        if name is None:\n            name = 'PosInterval-%d' % PosInterval.posIntervalNum\n            PosInterval.posIntervalNum += 1\n        # Create function interval\n        FunctionInterval.__init__(self, posFunc, name = name)\n\nclass HprInterval(FunctionInterval):\n    # HprInterval counter\n    hprIntervalNum = 1\n    # Initialization\n    def __init__(self, nodePath, hpr, duration = 0.0,\n                 name = None, other = None):\n        \"\"\"__init__(nodePath, hpr, duration, name)\n        \"\"\"\n        # Create function\n        def hprFunc(np = nodePath, hpr = hpr, other = other):\n            if other:\n                np.setHpr(other, hpr)\n            else:\n                np.setHpr(hpr)\n        # Determine name\n        if name is None:\n            name = 'HprInterval-%d' % HprInterval.hprIntervalNum\n            HprInterval.hprIntervalNum += 1\n        # Create function interval\n        FunctionInterval.__init__(self, hprFunc, name = name)\n\nclass ScaleInterval(FunctionInterval):\n    # ScaleInterval counter\n    scaleIntervalNum = 1\n    # Initialization\n    def __init__(self, nodePath, scale, duration = 0.0,\n                 name = None, other = None):\n        \"\"\"__init__(nodePath, scale, duration, name)\n        \"\"\"\n        # Create function\n        def scaleFunc(np = nodePath, scale = scale, other = other):\n            if other:\n                np.setScale(other, scale)\n            else:\n                np.setScale(scale)\n        # Determine name\n        if name is None:\n            name = 'ScaleInterval-%d' % ScaleInterval.scaleIntervalNum\n            ScaleInterval.scaleIntervalNum += 1\n        # Create function interval\n        FunctionInterval.__init__(self, scaleFunc, name = name)\n\nclass PosHprInterval(FunctionInterval):\n    # PosHprInterval counter\n    posHprIntervalNum = 1\n    # Initialization\n    def __init__(self, nodePath, pos, hpr, duration = 0.0,\n                 name = None, other = None):\n        \"\"\"__init__(nodePath, pos, hpr, duration, name)\n        \"\"\"\n        # Create function\n        def posHprFunc(np = nodePath, pos = pos, hpr = hpr, other = other):\n            if other:\n                np.setPosHpr(other, pos, hpr)\n            else:\n                np.setPosHpr(pos, hpr)\n        # Determine name\n        if name is None:\n            name = 'PosHprInterval-%d' % PosHprInterval.posHprIntervalNum\n            PosHprInterval.posHprIntervalNum += 1\n        # Create function interval\n        FunctionInterval.__init__(self, posHprFunc, name = name)\n\nclass HprScaleInterval(FunctionInterval):\n    # HprScaleInterval counter\n    hprScaleIntervalNum = 1\n    # Initialization\n    def __init__(self, nodePath, hpr, scale, duration = 0.0,\n                 name = None, other = None):\n        \"\"\"__init__(nodePath, hpr, scale, duration, other, name)\n        \"\"\"\n        # Create function\n        def hprScaleFunc(np=nodePath, hpr=hpr, scale=scale,\n                            other = other):\n            if other:\n                np.setHprScale(other, hpr, scale)\n            else:\n                np.setHprScale(hpr, scale)\n        # Determine name\n        if name is None:\n            name = ('HprScale-%d' %\n                    HprScaleInterval.hprScaleIntervalNum)\n            HprScaleInterval.hprScaleIntervalNum += 1\n        # Create function interval\n        FunctionInterval.__init__(self, hprScaleFunc, name = name)\n\nclass PosHprScaleInterval(FunctionInterval):\n    # PosHprScaleInterval counter\n    posHprScaleIntervalNum = 1\n    # Initialization\n    def __init__(self, nodePath, pos, hpr, scale, duration = 0.0,\n                 name = None, other = None):\n        \"\"\"__init__(nodePath, pos, hpr, scale, duration, other, name)\n        \"\"\"\n        # Create function\n        def posHprScaleFunc(np=nodePath, pos=pos, hpr=hpr, scale=scale,\n                            other = other):\n            if other:\n                np.setPosHprScale(other, pos, hpr, scale)\n            else:\n                np.setPosHprScale(pos, hpr, scale)\n        # Determine name\n        if name is None:\n            name = ('PosHprScale-%d' %\n                    PosHprScaleInterval.posHprScaleIntervalNum)\n            PosHprScaleInterval.posHprScaleIntervalNum += 1\n        # Create function interval\n        FunctionInterval.__init__(self, posHprScaleFunc, name = name)\n\n\n\n\nclass Func(FunctionInterval):\n    def __init__(self, *args, **kw):\n        function = args[0]\n        assert hasattr(function, '__call__')\n        extraArgs = args[1:]\n        kw['extraArgs'] = extraArgs\n        FunctionInterval.__init__(self, function, **kw)\n\nclass Wait(WaitInterval):\n    def __init__(self, duration):\n        WaitInterval.__init__(self, duration)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/interval/FunctionInterval.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/2d73dafb_FunctionInterval.json",
    "doc_id": "doc_167"
  }
}