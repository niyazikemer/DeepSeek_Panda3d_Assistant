{
  "content": "Controlling a Joint Procedurally\n\npython\n\nSometimes one wishes to procedurally take control of a model's joint. For example, if you wish to force a character model's eyes to follow the mouse, you will need to procedurally take control of the neck and head. To achieve this, use ~direct.actor.Actor.Actor.controlJoint().\n\ndummy = actor.controlJoint(None, \"modelRoot\", \"Joint Name\")\n\ncpp\n\nSometimes one wishes to procedurally take control of a model's joint. For example, if you wish to force a character model's eyes to follow the mouse, you will need to procedurally take control of the neck and head. To achieve this, use .PartBundle.control_joint().\n\nNodePath dummy = model.attach_new_node(\"dummy\");\nif (bundle->control_joint(\"Joint Name\", dummy)) {\n  std::cerr << \"Success!\\n\";\n}\n\nThis creates a dummy node. Every frame, the transform is copied from the dummy node into the joint. By setting the transform of the dummy node, you can control the joint. Normally, one would want to use ~.NodePath.set_hpr to rotate the joint without moving it. The dummy node is initialized in such a way that the joint is in its default location, the one specified in the model file.\n\nYou must store a local (not global) transform in the dummy node. In other words, the transform is relative to the joint's parent bone. If you are controlling the forearm of a model, for instance, the transform will be relative to the upper arm.\n\npython\n\nThe string \"modelRoot\" represents the name of the model node - the string \"modelRoot\" is usually the correct value.\n\nThe string \"Joint Name\" represents the name of the joint. Typically it would be something like \"Femur\", or \"Neck\", or \"L Finger1\". This is usually set inside the modeling package. For example, in MAX, each object in the scene has a name, including the bones. If necessary, you can determine the joint names by scanning the egg file for strings like <Joint> Femur or, in the case of a glTF file, by looking at the \"name\" property in the \"nodes\" array. The call actor.listJoints() <direct.actor.Actor.Actor.listJoints> can also be used to show the complete hierarchy of joints.\n\npython\n\nTo undo a previous ~direct.actor.Actor.Actor.controlJoint() call, use the ~direct.actor.Actor.Actor.releaseJoint() method:\n\nactor.releaseJoint(\"modelRoot\", \"Joint Name\")\n\ncpp\n\nTo undo a previous ~.PartBundle.control_joint() call, pass the name of the joint to the ~.PartBundle.release_joint() method:\n\nbundle->release_joint(\"Joint Name\");",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/889fa28f_controlling-joints.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/af9e2093_889fa28f_controlling-joints.json",
    "doc_id": "doc_438"
  }
}