{
  "content": "Basic Performance Diagnostics\n\nIntroductory Performance Diagnostics\n\nIn Panda3D, the \"big gun\" of performance analysis is called pstats. This program gives you real-time diagnostic analysis of a running Panda3D virtual world broken down into hundreds of different categories.\n\nBut sometimes, when you've just encountered a problem, you don't want that much information. Sometimes, you just want a simple question answered, like \"how many meshes do I have,\" or \"is this a fill-rate problem?\" For simple questions like that, there are lots of things you can do to get a quick-and-dirty answer.\n\nThe Frame-Rate Meter\n\nThe frame-rate meter doesn't tell you why your program is running slow, but it does have one important purpose: it's a lightweight and unobtrusive utility that you can leave on throughout the entire development process. This is valuable in that it gives you immediate feedback when you do something inefficient. To turn on the frame-rate meter, put this in your config file:\n\nshow-frame-rate-meter true\n\nOr, if you want to have it set at run-time:\n\npython\n\nbase.setFrameRateMeter(True)\n\ncpp\n\nPT(FrameRateMeter) meter;\nmeter = new FrameRateMeter(\"frame_rate_meter\");\nmeter->setup_window(graphics_window);\n\nHowever, keep in mind that measuring the frame rate in FPS gives a distorted view of the application performance. This is because FPS is not a linear scale: improving your frame rate from 500 to 1000 FPS sounds like a lot, but it represents a difference of only 1 millisecond, which is about the same as improving your frame rate from 29 to 30 FPS, and does therefore not actually represent a very significant optimization.\n\nIt is more meaningful to look at the reciprocal of this number, the frame time, usually measured in milliseconds. To see the frame rate in ms, put this in your config file:\n\nframe-rate-meter-milliseconds true\n\nThe Scene Graph Analyzer\n\nTo inspect the complexity of a scene or object, the .NodePath.analyze() method is extremely useful. This will quickly tell you if your scene has too many meshes <too-many-meshes>, for example.\n\npython\n\nrender.analyze()\n\ncpp\n\nSceneGraphAnalyzer sga;\nsga.add_node(render.node());\nsga.write(std::cerr);\n\nThe response is printed to the command window. It may look something like this:\n\n371 total nodes (including 43 instances).\n21 transforms; 16% of nodes have some render attribute.\n205 Geoms, with 94 GeomVertexDatas, appear on 133 GeomNodes.\n21665 vertices, 21573 normals, 21557 texture coordinates.\n35183 triangles:\n   3316 of these are on 662 tristrips (5.00906 average tris per strip).\n   0 of these are on 0 trifans.\n   31867 of these are independent triangles.\n0 lines, 0 points.\n99 textures, estimated minimum 326929K texture memory required.\n\nTo optimize a scene with too many static nodes, see too-many-meshes for possible solutions.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/00560618_basic-performance-diagnostics.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/1b8754eb_00560618_basic-performance-diagnostics.json",
    "doc_id": "doc_550"
  }
}