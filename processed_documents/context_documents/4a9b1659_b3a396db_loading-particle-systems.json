{
  "content": "Loading Particle Systems\n\nThe Panda3D engine uses text files for storing particle configurations, which are usually created with the Particle Panel. Before being able to use particles, you'll need to tell Panda3D to enable particles:\n\nbase.enableParticles()\n\nThis function tells Panda3D to enable its built-in physics engine which is also used by particles.\n\nTo be able to create ParticleEffect objects, you'll need this import:\n\nfrom direct.particles.ParticleEffect import ParticleEffect\n\nNext, create a ParticleEffect object and tell it to use a particle configuration file.\n\np = ParticleEffect()\np.loadConfig(filename)\n\nTo start the ParticleEffect, do this:\n\np.start(parent = render, renderParent = render)\n\nstart() takes two arguments: parent is the node the particles will be \"birth-relative\" to. renderParent is the node level the particles will be rendered at. If you want your particles to spawn from your node, but not follow it around, set renderParent to something else like render.\n\nParticleEffect inherits from NodePath, so you can use NodePath methods like setPos() on it.\n\nTo reset the ParticleEffect, use:\n\np.reset()\n\nTo stop the ParticleEffect, use:\n\np.disable()\n\nTo completely remove the ParticleEffect, use:\n\np.cleanup()\n\nNote that cleanup() calls disable() internally, so you don't need to call it yourself before calling cleanup()\n\nLike loadConfig(), you can use saveConfig() to save the ParticleEffect to a particle configuration file (*.ptf):\n\np.saveConfig(filename)",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/b3a396db_loading-particle-systems.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/4a9b1659_b3a396db_loading-particle-systems.json",
    "doc_id": "doc_382"
  }
}