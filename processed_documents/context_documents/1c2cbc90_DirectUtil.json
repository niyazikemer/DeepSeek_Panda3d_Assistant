{
  "content": "from panda3d.core import VBase4\nfrom direct.task.Task import Task\nfrom direct.task.TaskManagerGlobal import taskMgr\n\n# Routines to adjust values\ndef ROUND_TO(value, divisor):\n    return round(value/float(divisor)) * divisor\n\ndef ROUND_INT(val):\n    return int(round(val))\n\ndef CLAMP(val, minVal, maxVal):\n    return min(max(val, minVal), maxVal)\n\n# Create a tk compatible color string\ndef getTkColorString(color):\n    \"\"\"\n    Print out a Tk compatible version of a color string\n    \"\"\"\n    def toHex(intVal):\n        val = int(intVal)\n        if val < 16:\n            return \"0\" + hex(val)[2:]\n        else:\n            return hex(val)[2:]\n    r = toHex(color[0])\n    g = toHex(color[1])\n    b = toHex(color[2])\n    return \"#\" + r + g + b\n\n## Background Color ##\ndef lerpBackgroundColor(r, g, b, duration):\n    \"\"\"\n    Function to lerp background color to a new value\n    \"\"\"\n    def lerpColor(state):\n        dt = base.clock.getDt()\n        state.time += dt\n        sf = state.time / state.duration\n        if sf >= 1.0:\n            base.setBackgroundColor(state.ec[0], state.ec[1], state.ec[2])\n            return Task.done\n        else:\n            r = sf * state.ec[0] + (1 - sf) * state.sc[0]\n            g = sf * state.ec[1] + (1 - sf) * state.sc[1]\n            b = sf * state.ec[2] + (1 - sf) * state.sc[2]\n            base.setBackgroundColor(r, g, b)\n            return Task.cont\n    taskMgr.remove('lerpBackgroundColor')\n    t = taskMgr.add(lerpColor, 'lerpBackgroundColor')\n    t.time = 0.0\n    t.duration = duration\n    t.sc = base.getBackgroundColor()\n    t.ec = VBase4(r, g, b, 1)\n\n# Set direct drawing style for an object\n# Never light object or draw in wireframe\ndef useDirectRenderStyle(nodePath, priority = 0):\n    \"\"\"\n    Function to force a node path to use direct render style:\n    no lighting, and no wireframe\n    \"\"\"\n    nodePath.setLightOff(priority)\n    nodePath.setRenderModeFilled()\n\n# File data util\ndef getFileData(filename, separator = ','):\n    \"\"\"\n    Open the specified file and strip out unwanted whitespace and\n    empty lines.  Return file as list of lists, one file line per element,\n    list elements based upon separator\n    \"\"\"\n    f = open(filename.toOsSpecific(), 'r')\n    rawData = f.readlines()\n    f.close()\n    fileData = []\n    for line in rawData:\n        # First strip whitespace from both ends of line\n        l = line.strip()\n        if l:\n            # If its a valid line, split on separator and\n            # strip leading/trailing whitespace from each element\n            data = [s.strip() for s in l.split(separator)]\n            fileData.append(data)\n    return fileData\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directtools/DirectUtil.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/1c2cbc90_DirectUtil.json",
    "doc_id": "doc_184"
  }
}