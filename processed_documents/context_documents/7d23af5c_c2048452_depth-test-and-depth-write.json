{
  "content": "Depth Test and Depth Write\n\nEnabling or Disabling the Depth Buffer\n\nBy default, Panda3D renders the render scene graph with Z-buffering enabled. This technique makes it possible to render overlapping geometry in arbitrary order without having rear surfaces appear on top of front surfaces. It is possible to disable the depth buffer or alter its behavior.\n\nIn the 2D scene graph render2d, the depth buffer is disabled by default, because it is used for GUI and not for self-overlapping 3D models. But in rare cases, it is desirable to show 3D models in the 2D scene graph, so it is possible to enable the depth buffer for those models specifically.\n\nThe most common thing to want to do is to disable the depth-write. This means that geometry will still be tested against the depth buffer, but it will not affect the depth buffer. This is often used when rendering objects such as particles that are transparent. To disable or enable the depth-write, use:\n\npython\n\nnodePath.setDepthWrite(False)  # Disable\nnodePath.setDepthWrite(True)   # Enable\n\ncpp\n\nnodePath.set_depth_write(false);  // Disable\nnodePath.set_depth_write(true);   // Enable\n\nIt may also be desirable to disable the depth-test. This means that the geometry pays no attention whatsoever to the contents of the depth-buffer. This is often used for rendering things like heads-up displays, which have no relation to the 3D depth of the scene. To disable or enable the depth-test, use:\n\npython\n\nnodePath.setDepthTest(False)  # Disable\nnodePath.setDepthTest(True)   # Enable\n\ncpp\n\nnodePath.set_depth_test(false);  // Disable\nnodePath.set_depth_test(true);   // Enable\n\nOne can remove these settings using ~.NodePath.clear_depth_test() and ~.NodePath.clear_depth_write().\n\nAltering the Depth Buffer\n\nOccasionally, it is desirable to alter the functionality of the depth buffer. Normally, the depth buffer only renders things that are in front, but it can be made to render things that are in back, or equal. This is rarely used, but it can be important for certain unusual algorithms like shadow volumes.\n\nTo do this, you need to use the .DepthTestAttrib directly, in one of the following variants:\n\npython\n\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MNone))\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MNever))\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MLess))\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MEqual))\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MLessEqual))\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MGreater))\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MGreaterEqual))\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MNotEqual))\nnodePath.setAttrib(DepthTestAttrib.make(RenderAttrib.MAlways))\n\ncpp\n\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_none));\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_never));\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_less));\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_equal));\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_less_equal));\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_greater));\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_greater_equal));\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_not_equal));\nnodePath.set_attrib(DepthTestAttrib::make(RenderAttrib::M_always));\n\nDepth Sorting\n\nWhen turning depth test off, it is sometimes desirable to use depth sorting instead. Depth sorting is controlled by the culling system, which can be controlled by the .CullBinAttrib.\n\nTransparency\n\nCertain settings of the .TransparencyAttrib can also affect the depth-test.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/c2048452_depth-test-and-depth-write.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/7d23af5c_c2048452_depth-test-and-depth-write.json",
    "doc_id": "doc_364"
  }
}