{
  "content": "from direct.distributed.CachedDOData import CachedDOData\nfrom panda3d.core import ConfigVariableInt\n\n\n__all__ = [\"CRDataCache\"]\n\nclass CRDataCache:\n    # Stores cached data for DistributedObjects between instantiations on the client\n\n    def __init__(self):\n        self._doId2name2data = {}\n        # maximum # of objects we will cache data for\n        self._size = ConfigVariableInt('crdatacache-size', 10).getValue()\n        assert self._size > 0\n        # used to preserve the cache size\n        self._junkIndex = 0\n\n    def destroy(self):\n        del self._doId2name2data\n\n    def setCachedData(self, doId, name, data):\n        # stores a set of named data for a DistributedObject\n        assert isinstance(data, CachedDOData)\n        if len(self._doId2name2data) >= self._size:\n            # cache is full, throw out a random doId's data\n            if self._junkIndex >= len(self._doId2name2data):\n                self._junkIndex = 0\n            junkDoId = list(self._doId2name2data.keys())[self._junkIndex]\n            self._junkIndex += 1\n            for name in self._doId2name2data[junkDoId]:\n                self._doId2name2data[junkDoId][name].flush()\n            del self._doId2name2data[junkDoId]\n\n        self._doId2name2data.setdefault(doId, {})\n        cachedData = self._doId2name2data[doId].get(name)\n        if cachedData:\n            cachedData.flush()\n            cachedData.destroy()\n        self._doId2name2data[doId][name] = data\n\n    def hasCachedData(self, doId):\n        return doId in self._doId2name2data\n\n    def popCachedData(self, doId):\n        # retrieves all cached data for a DistributedObject and removes it from the cache\n        data = self._doId2name2data[doId]\n        del self._doId2name2data[doId]\n        return data\n\n    def flush(self):\n        # get rid of all cached data\n        for doId in self._doId2name2data:\n            for name in self._doId2name2data[doId]:\n                self._doId2name2data[doId][name].flush()\n        self._doId2name2data = {}\n\n    if __debug__:\n        def _startMemLeakCheck(self):\n            self._len = len(self._doId2name2data)\n\n        def _stopMemLeakCheck(self):\n            del self._len\n\n        def _checkMemLeaks(self):\n            assert self._len == len(self._doId2name2data)\n\nif __debug__:\n    class TestCachedData(CachedDOData):\n        def __init__(self):\n            CachedDOData.__init__(self)\n            self._destroyed = False\n            self._flushed = False\n        def destroy(self):\n            CachedDOData.destroy(self)\n            self._destroyed = True\n        def flush(self):\n            CachedDOData.flush(self)\n            self._flushed = True\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/CRDataCache.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/66cf91ba_CRDataCache.json",
    "doc_id": "doc_338"
  }
}