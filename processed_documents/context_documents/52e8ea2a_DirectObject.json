{
  "content": "\"\"\"Defines the DirectObject class, a convenient class to inherit from if the\nobject needs to be able to respond to events.\"\"\"\n\n__all__ = ['DirectObject']\n\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nfrom direct.task.TaskManagerGlobal import taskMgr\nfrom .MessengerGlobal import messenger\n\n\nclass DirectObject:\n    \"\"\"\n    This is the class that all Direct/SAL classes should inherit from\n    \"\"\"\n    #def __del__(self):\n        # This next line is useful for debugging leaks\n        #print \"Destructing: \", self.__class__.__name__\n\n    # Wrapper functions to have a cleaner, more object oriented approach to\n    # the messenger functionality.\n\n    def accept(self, event, method, extraArgs=[]):\n        return messenger.accept(event, self, method, extraArgs, 1)\n\n    def acceptOnce(self, event, method, extraArgs=[]):\n        return messenger.accept(event, self, method, extraArgs, 0)\n\n    def ignore(self, event):\n        return messenger.ignore(event, self)\n\n    def ignoreAll(self):\n        return messenger.ignoreAll(self)\n\n    def isAccepting(self, event):\n        return messenger.isAccepting(event, self)\n\n    def getAllAccepting(self):\n        return messenger.getAllAccepting(self)\n\n    def isIgnoring(self, event):\n        return messenger.isIgnoring(event, self)\n\n    #This function must be used if you want a managed task\n    def addTask(self, *args, **kwargs):\n        if not hasattr(self, \"_taskList\"):\n            self._taskList = {}\n        kwargs['owner'] = self\n        task = taskMgr.add(*args, **kwargs)\n        return task\n\n    def doMethodLater(self, *args, **kwargs):\n        if not hasattr(self, \"_taskList\"):\n            self._taskList = {}\n        kwargs['owner'] = self\n        task = taskMgr.doMethodLater(*args, **kwargs)\n        return task\n\n    def removeTask(self, taskOrName):\n        if isinstance(taskOrName, str):\n            # we must use a copy, since task.remove will modify self._taskList\n            if hasattr(self, '_taskList'):\n                taskListValues = list(self._taskList.values())\n                for task in taskListValues:\n                    if task.name == taskOrName:\n                        task.remove()\n        else:\n            taskOrName.remove()\n\n    def removeAllTasks(self):\n        if hasattr(self, '_taskList'):\n            for task in list(self._taskList.values()):\n                task.remove()\n\n    def _addTask(self, task):\n        self._taskList[task.id] = task\n\n    def _clearTask(self, task):\n        del self._taskList[task.id]\n\n    def detectLeaks(self):\n        if not __dev__:\n            return\n\n        # call this after the DirectObject instance has been destroyed\n        # if it's leaking, will notify user\n\n        # make sure we're not still listening for messenger events\n        events = messenger.getAllAccepting(self)\n        # make sure we're not leaking tasks\n        # TODO: include tasks that were added directly to the taskMgr\n        tasks = []\n        if hasattr(self, '_taskList'):\n            tasks = [task.name for task in self._taskList.values()]\n        if len(events) != 0 or len(tasks) != 0:\n            from direct.showbase.PythonUtil import getRepository\n            estr = ('listening to events: %s' % events if len(events) != 0 else '')\n            andStr = (' and ' if len(events) != 0 and len(tasks) != 0 else '')\n            tstr = ('%srunning tasks: %s' % (andStr, tasks) if len(tasks) != 0 else '')\n            notify = directNotify.newCategory('LeakDetect')\n            crash = getattr(getRepository(), '_crashOnProactiveLeakDetect', False)\n            func = (self.notify.error if crash else self.notify.warning)\n            func('destroyed %s instance is still %s%s' % (self.__class__.__name__, estr, tstr))\n\n    #snake_case alias:\n    add_task = addTask\n    do_method_later = doMethodLater\n    detect_leaks = detectLeaks\n    accept_once = acceptOnce\n    ignore_all = ignoreAll\n    get_all_accepting = getAllAccepting\n    is_ignoring = isIgnoring\n    remove_all_tasks = removeAllTasks\n    remove_task = removeTask\n    is_accepting = isAccepting\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/DirectObject.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/52e8ea2a_DirectObject.json",
    "doc_id": "doc_260"
  }
}