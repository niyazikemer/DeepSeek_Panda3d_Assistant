{
  "content": "Collision System Misuse\n\nThe collision system can detect most types of collisions very rapidly. However, it is possible to construct situations that the collision detection system just can't handle. This page lists a few of these things, and how to improve them.\n\nColliding with Visible Geometry\n\nPanda3D supports calculating collisions against visible scene geometry. However, this method is not at all efficient. It is far more efficient to construct specific collision-solids to represent the various objects in the scene. Even collision geometry constructed from .CollisionPolygon objects is significantly more efficient than colliding against the renderable geometry!\n\nVarious exporters are able to automatically generate optimized collision geometry during the export process. Consult the documentation for your exporter to find out how to do this.\n\nWhen you have constructed the optimized collision geometry, don't forget to disable checking for collision against the visible geometry, by setting the collision-bitmasks appropriately.\n\nLack of Hierarchy\n\nA naive approach for exporting collisions for a large scene is just to put all of the collision solids under a single .CollisionNode, or perhaps many .CollisionNode objects under a single parent node.\n\nThis is very inefficient for a large number of solids. Panda3D will need to test for collisions against every single object in a row.\n\nIt is far more efficient to structure your collision scene in the form of a quadtree or octree, or even a binary tree, grouping close collision nodes together under a common parent node. This allows Panda3D to test against the parent node, and only proceed to test the child nodes if this passes.\n\npython\n\nThere is a method on the .NodePath class to automate the process of partitioning the scene for optimal collision checking:\n\nmodel.subdivideCollisions(4)\n\nThe argument is the number of solids to put in the leaves of the hierarchy. You can experiment with this number to find the value that gives the best performance.\n\nExcessive Detail\n\nIf the collision geometry is constructed from the version of the mesh that is used for rendering, it is possible that there are so many triangles in the mesh that it is slow to test against. In these situations, it is recommended to instead construct a simplified version of the mesh. Ideally, this simplified mesh consists of collision-solids such as spheres, boxes and capsules, but in some situations it is necessary to build it up from individual polygons. A low-poly version of the mesh can then be used instead, either by constructing it manually or by using an automatic quality reduction algorithm (such as the Decimate modifier in Blender) to create a collision mesh with fewer polygons.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/f13ba21a_collision-system-misuse.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/00501971_f13ba21a_collision-system-misuse.json",
    "doc_id": "doc_495"
  }
}