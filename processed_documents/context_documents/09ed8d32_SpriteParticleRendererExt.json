{
  "content": "from panda3d.core import ConfigVariableString\nfrom panda3d.physics import SpriteParticleRenderer\n\n\nclass SpriteParticleRendererExt(SpriteParticleRenderer):\n    \"\"\"\n    Contains methods to extend functionality\n    of the SpriteParticleRenderer class\n    \"\"\"\n\n    # Initialize class variables for texture, source file and node for texture and\n    # node path textures to None.  These will be initialized to a hardcoded default\n    # or whatever the user specifies in his/her Configrc variable the first time they\n    # are accessed\n    # Will use instance copy of this in functions below\n    sourceTextureName = None\n    sourceFileName = None\n    sourceNodeName = None\n\n    def getSourceTextureName(self):\n        if self.sourceTextureName is None:\n            SpriteParticleRendererExt.sourceTextureName = ConfigVariableString(\n                'particle-sprite-texture', 'maps/lightbulb.rgb').value\n        # Return instance copy of class variable\n        return self.sourceTextureName\n\n    def setSourceTextureName(self, name):\n        # Set instance copy of class variable\n        self.sourceTextureName = name\n\n    def setTextureFromFile(self, fileName = None):\n        if fileName is None:\n            fileName = self.getSourceTextureName()\n\n        t = base.loader.loadTexture(fileName)\n        if t is not None:\n            self.setTexture(t, t.getYSize())\n            self.setSourceTextureName(fileName)\n            return True\n        else:\n            print(\"Couldn't find rendererSpriteTexture file: %s\" % fileName)\n            return False\n\n    def addTextureFromFile(self, fileName = None):\n        if self.getNumAnims() == 0:\n            return self.setTextureFromFile(fileName)\n\n        if fileName is None:\n            fileName = self.getSourceTextureName()\n\n        t = base.loader.loadTexture(fileName)\n        if t is not None:\n            self.addTexture(t, t.getYSize())\n            return True\n        else:\n            print(\"Couldn't find rendererSpriteTexture file: %s\" % fileName)\n            return False\n\n    def getSourceFileName(self):\n        if self.sourceFileName is None:\n            SpriteParticleRendererExt.sourceFileName = ConfigVariableString(\n                'particle-sprite-model', 'models/misc/smiley').value\n        # Return instance copy of class variable\n        return self.sourceFileName\n\n    def setSourceFileName(self, name):\n        # Set instance copy of class variable\n        self.sourceFileName = name\n\n    def getSourceNodeName(self):\n        if self.sourceNodeName is None:\n            SpriteParticleRendererExt.sourceNodeName = ConfigVariableString(\n                'particle-sprite-node', '**/*').value\n        # Return instance copy of class variable\n        return self.sourceNodeName\n\n    def setSourceNodeName(self, name):\n        # Set instance copy of class variable\n        self.sourceNodeName = name\n\n    def setTextureFromNode(self, modelName = None, nodeName = None, sizeFromTexels = False):\n        if modelName is None:\n            modelName = self.getSourceFileName()\n            if nodeName is None:\n                nodeName = self.getSourceNodeName()\n\n        # Load model and get texture\n        m = base.loader.loadModel(modelName)\n        if m is None:\n            print(\"SpriteParticleRendererExt: Couldn't find model: %s!\" % modelName)\n            return False\n\n        np = m.find(nodeName)\n        if np.isEmpty():\n            print(\"SpriteParticleRendererExt: Couldn't find node: %s!\" % nodeName)\n            m.removeNode()\n            return False\n\n        self.setFromNode(np, modelName, nodeName, sizeFromTexels)\n        self.setSourceFileName(modelName)\n        self.setSourceNodeName(nodeName)\n        m.removeNode()\n        return True\n\n    def addTextureFromNode(self, modelName = None, nodeName = None, sizeFromTexels = False):\n        if self.getNumAnims() == 0:\n            return self.setTextureFromNode(modelName, nodeName, sizeFromTexels)\n\n        if modelName is None:\n            modelName = self.getSourceFileName()\n            if nodeName is None:\n                nodeName = self.getSourceNodeName()\n\n        # Load model and get texture\n        m = base.loader.loadModel(modelName)\n        if m is None:\n            print(\"SpriteParticleRendererExt: Couldn't find model: %s!\" % modelName)\n            return False\n\n        np = m.find(nodeName)\n        if np.isEmpty():\n            print(\"SpriteParticleRendererExt: Couldn't find node: %s!\" % nodeName)\n            m.removeNode()\n            return False\n\n        self.addFromNode(np, modelName, nodeName, sizeFromTexels)\n        m.removeNode()\n\n        return True\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/particles/SpriteParticleRendererExt.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/09ed8d32_SpriteParticleRendererExt.json",
    "doc_id": "doc_68"
  }
}