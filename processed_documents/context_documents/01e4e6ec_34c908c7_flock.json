{
  "content": "Flock\n\nWhat is flocking? Flocking is an emergent behavior and is the resultant of the following forces:\n\ncohesion -- finds average position of neighbors and tries to move to that position separation -- object keeps a certain distance between itself and its neighbor alignment -- finds average direction in which all neighbors are moving and tries to move in that direction\n\nEach NPC has a \"visibility cone\" and this is used to compute it's neighbors. The neighbors contribute towards the forces mentioned above.\n\nTuners:\n\nThe angle and length of each NPC's \"visibility cone\".\n\nWeight of cohesion, separation, and alignment (how much each sub-behavior of flock affects the overall flocking behavior).\n\nNote\n\nFlocking behavior is NOT a standalone behavior. It needs to be combined with other steering behaviors such as seek, pursue, flee, evade etc. to function.\n\nhttps://www.youtube.com/watch?v=dkfnlqH06IY\n\nUsing PandAI's flocking system:\n\n// To create the flock\nflockObject = Flock(unsigned int flock_id, double vcone_angle,\n                    double vcone_radius, unsigned int cohesion_wt,\n                    unsigned int separation_wt, unsigned int alignment_wt)\n\n\"flock_id\" is a value identifying the flock.\n\n\"vcone_angle\" is the visibility angle of the character (represented by a cone around it)\n\n\"vcone_radius\" is the length of the visibility cone.\n\n\"cohesion_wt\", \"separation_wt\" and \"alignment_wt\" is the amount of separation force that contributes to the overall flocking behavior.\n\nSome standard values to start you off with:\n\nType vcone_angle vcone_radius separation_wt cohesion_wt alignment_wt\n\nNormal Pack 270 10 2 4 1\n\nLoose Pack 180 10 2 4 5\n\nTight Pack 45 5 2 4 5\n\nYou could try experimenting with your own values to customize your flock.\n\nTo add your AI Character to the above created flock\n\nflockObject.addAiChar(aiChar)     # aiChar is an AICharacter object.\n\nAfter all the AI Characters are added to the flock, add the flock to the world.\n\naiWorld.addFlock(flockObject)    # aiWorld is an AIWorld object.\n\nSpecify the flock behavior priority. As mentioned earlier, flock behavior works with other steering behaviors.\n\n# aiBehaviors is an AIBehaviors object.\naiBehaviors.flock(float priority)\n\n# Turns the flock behavior off.\naiWorld.flockOff(unsigned int flock_id)\n\n# Turns the flock behavior on.\naiWorld.flockOn(unsigned int flock_id)\n\n# Removes the flock behavior.\n# Note: This does NOT remove the AI characters of the flock.\naiWorld.removeFlock(unsigned int flock_id)\n\n# Returns a handle to the flock object.\naiWorld.getFlock(unsigned int flock_id)\n\nThe full working code in Panda3D :\n\nimport direct.directbase.DirectStart\nfrom panda3d.core import *\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.task import Task\nfrom direct.actor.Actor import Actor\n#for Pandai\nfrom panda3d.ai import *\n#for Onscreen GUI\nfrom direct.gui.OnscreenText import OnscreenText\n\n# Globals\nspeed = 0.75\n\n# Function to put instructions on the screen.\nfont = loader.loadFont(\"cmss12\")\ndef addInstructions(pos, msg):\n    return OnscreenText(text=msg, style=1, fg=(1, 1, 1, 1), font=font,\n                        pos=(-1.3, pos), align=TextNode.ALeft, scale=.05)\n\nclass World(DirectObject):\n\n    def __init__(self):\n        base.disableMouse()\n        base.cam.setPosHpr(0, 0, 85, 0, -90, 0)\n\n        self.loadModels()\n        self.setAI()\n        self.setMovement()\n\n    def loadModels(self):\n        # Seeker\n        self.flockers = []\n        for i in range(10):\n            ralphStartPos = Vec3(-10+i, 0, 0)\n            self.flockers.append(Actor(\"models/ralph\",\n                                     {\"run\": \"models/ralph-run\"}))\n            self.flockers[i].reparentTo(render)\n            self.flockers[i].setScale(0.5)\n            self.flockers[i].setPos(ralphStartPos)\n            self.flockers[i].loop(\"run\")\n\n        # Target\n        self.target = loader.loadModel(\"models/arrow\")\n        self.target.setColor(1,0,0)\n        self.target.setPos(0,20,0)\n        self.target.setScale(1)\n        self.target.reparentTo(render)\n\n    def setAI(self):\n        #Creating AI World\n        self.AIworld = AIWorld(render)\n\n        #Flock functions\n        self.MyFlock = Flock(1, 270, 10, 2, 4, 0.2)\n        self.AIworld.addFlock(self.MyFlock)\n        self.AIworld.flockOn(1)\n\n        self.AIchar = []\n        self.AIbehaviors = []\n        for i in range(10):\n            char = AICharacter(\"flockers\" + str(i), self.flockers[i], 100, 0.05, 5)\n            self.AIchar.append(char)\n            self.AIworld.addAiChar(char)\n            self.AIbehaviors.append(char.getAiBehaviors())\n            self.MyFlock.addAiChar(char)\n            self.AIbehaviors[i].flock(0.5)\n            self.AIbehaviors[i].pursue(self.target, 0.5)\n\n        #AI World update\n        taskMgr.add(self.AIUpdate, \"AIUpdate\")\n\n    #to update the AIWorld\n    def AIUpdate(self, task):\n        self.AIworld.update()\n        return Task.cont\n\n    # All the movement functions for the Target\n    def setMovement(self):\n        self.keyMap = {\"left\": 0, \"right\": 0, \"up\": 0, \"down\": 0}\n        self.accept(\"arrow_left\", self.setKey, [\"left\", 1])\n        self.accept(\"arrow_right\", self.setKey, [\"right\", 1])\n        self.accept(\"arrow_up\", self.setKey, [\"up\", 1])\n        self.accept(\"arrow_down\", self.setKey, [\"down\", 1])\n        self.accept(\"arrow_left-up\", self.setKey, [\"left\", 0])\n        self.accept(\"arrow_right-up\", self.setKey, [\"right\", 0])\n        self.accept(\"arrow_up-up\", self.setKey, [\"up\", 0])\n        self.accept(\"arrow_down-up\", self.setKey, [\"down\", 0])\n        #movement task\n        taskMgr.add(self.Mover, \"Mover\")\n\n        addInstructions(0.9, \"Use the Arrow keys to move the Red Target\")\n\n    def setKey(self, key, value):\n        self.keyMap[key] = value\n\n    def Mover(self,task):\n        startPos = self.target.getPos()\n        if self.keyMap[\"left\"] != 0:\n                self.target.setPos(startPos + Point3(-speed, 0, 0))\n        if self.keyMap[\"right\"] != 0:\n                self.target.setPos(startPos + Point3(speed, 0, 0))\n        if self.keyMap[\"up\"] != 0:\n                self.target.setPos(startPos + Point3(0, speed, 0))\n        if self.keyMap[\"down\"] != 0:\n                self.target.setPos(startPos + Point3(0, -speed, 0))\n\n        return Task.cont\n\nw = World()\nbase.run()\n\nTo get the full working demo, please visit:\n\nhttps://sites.google.com/site/etcpandai/documentation/steering-behaviors/flock/PandAIFlockExample.zip?attredirects=0&d=1",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/34c908c7_flock.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/01e4e6ec_34c908c7_flock.json",
    "doc_id": "doc_623"
  }
}