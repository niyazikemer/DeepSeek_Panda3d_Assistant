{
  "content": "Texture Wrap Modes\n\nAs described earlier, the (u, v) texture coordinates that you assign to your vertices are what determines how the texture fits on your geometry. Often, you will use texture coordinates that always fall within the range [0, 1], which is the complete range of the pixels of your texture image. However, it is also legal to use texture coordinates that go outside this range; you can have negative values, for instance, or numbers higher than 1.\n\nSo if the texture image is only defined over the range [0, 1], what does the texture look like outside this range? You can specify this with the texture wrap mode.\n\npython\n\ntexture.setWrapU(wrap_mode)\ntexture.setWrapV(wrap_mode)\n\ncpp\n\ntexture->set_wrap_u(wrap_mode);\ntexture->set_wrap_w(wrap_mode);\n\nThe wrap_mode parameter is specified separately for the u and v directions (there is also a .Texture.set_wrap_w() for 3-D textures <3d-textures>, but that's an advanced topic). The wrap mode may be any of the following values:\n\nThe default wrap mode is WM_repeat.\n\nConsider the following simple texture image:\n\nWe will apply this texture in the center of a large polygon whose texture coordinates range considerably farther than [0, 1] in both directions.\n\nWM_repeat\n\npython\n\ntexture.setWrapU(Texture.WM_repeat)\ntexture.setWrapV(Texture.WM_repeat)\n\ncpp\n\ntexture->set_wrap_u(Texture::WM_repeat);\ntexture->set_wrap_v(Texture::WM_repeat);\n\nWM_repeat mode is often used to tile a relatively small texture over a large surface.\n\nWM_clamp\n\npython\n\ntexture.setWrapU(Texture.WM_clamp)\ntexture.setWrapV(Texture.WM_clamp)\n\ncpp\n\ntexture->set_wrap_u(Texture::WM_clamp);\ntexture->set_wrap_v(Texture::WM_clamp);\n\nWM_clamp mode is rarely used on large polygons because, frankly, it looks terrible when the pixels stretch out to infinity like this; but this mode is usually the right choice when the texture exactly fills its polygon (see One caution about a common wrap error, below).\n\nWM_border_color\n\npython\n\ntexture.setWrapU(Texture.WM_border_color)\ntexture.setWrapV(Texture.WM_border_color)\ntexture.setBorderColor((0.4, 0.5, 1, 1))\n\ncpp\n\ntexture->set_wrap_u(Texture::WM_border_color);\ntexture->set_wrap_v(Texture::WM_border_color);\ntexture->set_border_color(LColor(0.4, 0.5, 1, 1));\n\nThe above blue color was chosen for illustration purposes; you can use any color you like for the border color. (However, some hardware may not efficiently support a border color other than opaque white, transparent white, opaque black and transparent black.) Normally, you would use the background color of the texture as the border color, like this:\n\npython\n\ntexture.setWrapU(Texture.WMBorderColor)\ntexture.setWrapV(Texture.WMBorderColor)\n\ncpp\n\ntexture->set_wrap_u(Texture::WM_border_color);\ntexture->set_wrap_v(Texture::WM_border_color);\ntexture->set_border_color(LColor(1, 1, 1, 1));\n\nSome very old graphics drivers don't support WM_border_color. In this case, Panda3D will fall back to WM_clamp, which will look similar as long as there is a sufficient margin of background color around the edge of your texture (unlike our sample texture, which goes all the way out the edge).\n\nWM_mirror\n\npython\n\ntexture.setWrapU(Texture.WM_mirror)\ntexture.setWrapV(Texture.WM_mirror)\n\ncpp\n\ntexture->set_wrap_u(Texture::WM_mirror);\ntexture->set_wrap_v(Texture::WM_mirror);\n\nMany older graphics drivers do not support WM_mirror. In this case, Panda3D will fall back to WM_repeat.\n\nWM_mirror_once\n\npython\n\ntexture.setWrapU(Texture.WM_mirror_once)\ntexture.setWrapV(Texture.WM_mirror_once)\ntexture.setBorderColor((0.4, 0.5, 1, 1))\n\ncpp\n\ntexture->set_wrap_u(Texture::WM_mirror_once);\ntexture->set_wrap_v(Texture::WM_mirror_once);\ntexture->set_border_color(LColor(0.4, 0.5, 1, 1));\n\nFew graphics drivers support WM_mirror_once. In this case, Panda3D will fall back to WM_border_color.\n\nSetting different wrap modes\n\nIt is possible to set different wrap modes in the u and v directions:\n\npython\n\ntexture.setWrapU(Texture.WM_repeat)\ntexture.setWrapV(Texture.WM_clamp)\n\ncpp\n\ntexture->set_wrap_u(Texture::WM_repeat);\ntexture->set_wrap_v(Texture::WM_clamp);\n\nOne caution about a common wrap mode error\n\nWhen you apply a texture that is intended to exactly fill a polygon--that is, the texture coordinates range from 0 to 1, but no further--you should usually set its wrap mode to clamp. This is because if you let it keep the default value of repeat, the color may bleed in from the opposite edge, producing a thin line along the edge of your polygon, like this:\n\nThis is a particularly common error with a texture that is painted as an alpha cutout, where there is an image with a fully transparent background: you will often see a thin, barely-visible edge floating along the top (for instance) of the polygon. This edge is actually the bottom edge of the texture bleeding onto the top, because the designer specified WM_repeat instead of the correct mode, WM_clamp.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/0b25daa5_texture-wrap-modes.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/46006720_0b25daa5_texture-wrap-modes.json",
    "doc_id": "doc_668"
  }
}