{
  "content": "\"\"\"Contains the DirectWaitBar class, a progress bar widget.\n\nSee the :ref:`directwaitbar` page in the programming manual for a more\nin-depth explanation and an example of how to use this class.\n\"\"\"\n\n__all__ = ['DirectWaitBar']\n\nfrom panda3d.core import PGFrameStyle, PGWaitBar\nfrom . import DirectGuiGlobals as DGG\nfrom .DirectFrame import DirectFrame\n\n\nclass DirectWaitBar(DirectFrame):\n    \"\"\" DirectWaitBar - A DirectWidget that shows progress completed\n    towards a task.  \"\"\"\n\n    def __init__(self, parent = None, **kw):\n        # Inherits from DirectFrame\n        # A Direct Frame can have:\n        # - A background texture (pass in path to image, or Texture Card)\n        # - A midground geometry item (pass in geometry)\n        # - A foreground text Node (pass in text string or Onscreen Text)\n        optiondefs = (\n            # Define type of DirectGuiWidget\n            ('pgFunc',         PGWaitBar,          None),\n            ('frameSize',      (-1, 1, -0.08, 0.08),  None),\n            ('borderWidth',    (0, 0),             None),\n            ('range',          100,                self.setRange),\n            ('value',          0,                  self.setValue),\n            ('barBorderWidth', (0, 0),             self.setBarBorderWidth),\n            ('barColor',       (1, 0, 0, 1),       self.setBarColor),\n            ('barTexture',     None,               self.setBarTexture),\n            ('barRelief',      DGG.FLAT,           self.setBarRelief),\n            ('sortOrder',      DGG.NO_FADE_SORT_INDEX, None),\n        )\n        if 'text' in kw:\n            textoptiondefs = (\n                ('text_pos',    (0, -0.025),          None),\n                ('text_scale',  0.1,                 None)\n            )\n        else:\n            textoptiondefs = ()\n        # Merge keyword options with default options\n        self.defineoptions(kw, optiondefs + textoptiondefs)\n        # Initialize superclasses\n        DirectFrame.__init__(self, parent)\n        self.barStyle = PGFrameStyle()\n        # Call option initialization functions\n        self.initialiseoptions(DirectWaitBar)\n        self.updateBarStyle()\n\n    def destroy(self):\n        self.barStyle = None\n        DirectFrame.destroy(self)\n\n    def setRange(self):\n        \"\"\"Updates the bar range which you can set using bar['range'].\n        This is the value at which the WaitBar indicates 100%.\"\"\"\n        self.guiItem.setRange(self['range'])\n\n    def setValue(self):\n        \"\"\"Updates the bar value which you can set using bar['value'].\n        The value should range between 0 and bar['range'].\"\"\"\n        self.guiItem.setValue(self['value'])\n\n    def getPercent(self):\n        \"\"\"Returns the percentage complete.\"\"\"\n        return self.guiItem.getPercent()\n\n    def updateBarStyle(self):\n        if not self.fInit:\n            self.guiItem.setBarStyle(self.barStyle)\n\n    def setBarRelief(self):\n        \"\"\"Updates the bar relief, which you can set using bar['barRelief'].\"\"\"\n        self.barStyle.setType(self['barRelief'])\n        self.updateBarStyle()\n\n    def setBarBorderWidth(self):\n        \"\"\"Updates the bar's border width, which you can set using bar['barBorderWidth'].\"\"\"\n        self.barStyle.setWidth(*self['barBorderWidth'])\n        self.updateBarStyle()\n\n    def setBarColor(self):\n        \"\"\"Updates the bar color, which you can set using bar['barColor'].\"\"\"\n        color = self['barColor']\n        self.barStyle.setColor(color[0], color[1], color[2], color[3])\n        self.updateBarStyle()\n\n    def setBarTexture(self):\n        \"\"\"Updates the bar texture, which you can set using bar['barTexture'].\"\"\"\n        # this must be a single texture (or a string).\n        texture = self['barTexture']\n        if isinstance(texture, str):\n            texture = base.loader.loadTexture(texture)\n        if texture:\n            self.barStyle.setTexture(texture)\n        else:\n            self.barStyle.clearTexture()\n        self.updateBarStyle()\n\n    def update(self, value):\n        \"\"\"Updates the bar with the given value and renders a frame.\"\"\"\n        self['value'] = value\n\n        # Render a frame out-of-sync with the igLoop to update the\n        # window right now.  This allows the wait bar to be updated\n        # even though we are not normally rendering frames.\n        base.graphicsEngine.renderFrame()\n\n    def finish(self, N = 10):\n        \"\"\"Fill the bar in N frames. This call is blocking.\"\"\"\n        remaining = self['range'] - self['value']\n        if remaining:\n            step = max(1, int(remaining / N))\n            count = self['value']\n            while count != self['range']:\n                count += step\n                if count > self['range']:\n                    count = self['range']\n                self.update(count)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/gui/DirectWaitBar.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/e1fb356e_DirectWaitBar.json",
    "doc_id": "doc_92"
  }
}