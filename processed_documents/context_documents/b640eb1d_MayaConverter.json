{
  "content": "import wx\nimport os\nfrom . import ObjectGlobals as OG\n\nCLOSE_STDIN = \"<CLOSE STDIN>\"\n\nclass StartupError(Exception):\n    pass\n\nclass Process:\n    def __init__(self, parent, cmd, end_callback):\n        self.process = wx.Process(parent)\n        self.process.Redirect()\n        self.process.pid = wx.Execute(cmd, wx.EXEC_ASYNC|wx.EXEC_MAKE_GROUP_LEADER, self.process)\n        self.b = []\n        if self.process.pid:\n            #what was up with wx.Process.Get*Stream names?\n            self.process._stdin_ = self.process.GetOutputStream()\n            self.process._stdout_ = self.process.GetInputStream()\n            self.process._stderr_ = self.process.GetErrorStream()\n            self.process.Bind(wx.EVT_END_PROCESS, end_callback)\n            return\n        raise StartupError\n\n    def Poll(self, input=''):\n        if (input or self.b) and self.process and self.process._stdin_:\n            if self.b or len(input) > 512:\n                if input:\n                    #if we don't chop up our input into resonably sized chunks,\n                    #some platforms (like Windows) will send some small number\n                    #of bytes per .write() call (sometimes 2 in the case of\n                    #Windows).\n                    self.b.extend([input[i:i+512] for i in range(0, len(input), 512)])\n                input = self.b.pop(0)\n            self.process._stdin_.write(input)\n            if hasattr(self.process._stdin_, \"LastWrite\"):\n                y = self.process._stdin_.LastWrite()\n                if y != len(input):\n                    self.b.insert(0, input[y:])\n        x = []\n        for s in (self.process._stderr_, self.process._stdout_):\n            if s and s.CanRead():\n                x.append(s.read())\n            else:\n                x.append('')\n        return x\n\n    def CloseInp(self):\n        if self.process and self.process._stdin_:\n            self.process.CloseOutput()\n            self.process._stdin_ = None\n\n    def Kill(self, ks='SIGKILL'):\n        errors = {wx.KILL_BAD_SIGNAL: \"KILL_BAD_SIGNAL\",\n                  wx.KILL_ACCESS_DENIED: \"KILL_ACCESS_DENIED\",\n                  wx.KILL_ERROR: \"KILL_ERROR\"}\n        if self.process:\n            if ks == CLOSE_STDIN:\n                self.CloseInp()\n                return 1, None\n            elif wx.Process.Exists(self.process.pid):\n                signal = getattr(wx, ks)\n                r = wx.Process.Kill(self.process.pid, signal, flags=wx.KILL_CHILDREN)\n            else:\n                r = 65535\n                self.CloseInp()\n                return 1, None\n\n            if r not in (wx.KILL_OK, wx.KILL_NO_PROCESS, 65535):\n                return 0, (self.process.pid, signal, errors.get(r, \"UNKNOWN_KILL_ERROR %s\"%r))\n            else:\n                return 1, None\n\nFROM_MAYA_TO_EGG = 0\nFROM_BAM_TO_MAYA = 1\n\nclass MayaConverter(wx.Dialog):\n    def __init__(self, parent, editor, mayaFile, callBack=None, obj=None, isAnim=False, convertMode=FROM_MAYA_TO_EGG):\n        wx.Dialog.__init__(self, parent, id=wx.ID_ANY, title=\"Maya Converter\",\n                           pos=wx.DefaultPosition, size=(300, 200))\n\n        self.editor = editor\n        self.obj = obj\n        self.isAnim = isAnim\n        self.callBack = callBack\n        self.mayaFile = mayaFile\n\n        self.mainPanel = wx.Panel(self, -1)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.mainPanel, 1, wx.EXPAND, 0)\n        self.SetSizer(sizer)\n\n        self.output = wx.TextCtrl(self.mainPanel, -1, style = wx.TE_MULTILINE, pos = (0, 0), size = (100, 400))\n        sizer2 = wx.BoxSizer(wx.VERTICAL)\n        sizer2.Add(self.output, 1, wx.EXPAND, 0)\n        self.mainPanel.SetSizer(sizer2)\n\n        if convertMode == FROM_MAYA_TO_EGG:\n            self.convertFromMaya()\n        elif convertMode == FROM_BAM_TO_MAYA:\n            self.convertToMaya()\n        else:\n            pass\n\n        self.timer = wx.Timer(self, -1)\n        self.Bind(wx.EVT_TIMER, self.onPoll, self.timer)\n        self.timer.Start(100)\n\n    def convertFromMaya(self):\n        if self.isAnim:\n            if self.obj:\n                command = 'maya2egg -uo ft -a chan %s -o %s.anim.egg'%(self.mayaFile, self.mayaFile)\n                self.process = Process(self, command, lambda p0=None: self.onProcessEnded(p0))\n            else:\n                command = 'maya2egg -uo ft -a model %s -o %s.model.egg'%(self.mayaFile, self.mayaFile)\n                self.process = Process(self, command, lambda p0=None: self.onModelProcessEnded(p0))\n        else:\n            command = 'maya2egg -uo ft %s -o %s.egg'%(self.mayaFile, self.mayaFile)\n            self.process = Process(self, command, lambda p0=None: self.onProcessEnded(p0))\n\n    def convertToMaya(self):\n        bamFileName = self.mayaFile + \".bam\"\n        eggFileName = self.mayaFile + \".egg\"\n        command = 'bam2egg %s -o %s'%(bamFileName, eggFileName)\n        self.process = Process(self, command, lambda p0=None: self.onBam2EggEnded(p0))\n\n    def onEgg2MayaEnded(self, evt):\n        self.process.CloseInp()\n        for i in self.process.Poll():\n            self.output.AppendText(i)\n        self.process = None\n\n    def onBam2EggEnded(self, evt):\n        self.process.CloseInp()\n        for i in self.process.Poll():\n            self.output.AppendText(i)\n        eggFileName = self.mayaFile + \".egg\"\n        command = 'egg2maya -ui ft -uo ft %s -o %s'%(eggFileName, self.mayaFile)\n        self.process = Process(self, command, lambda p0=None: self.onEgg2MayaEnded(p0))\n\n    def onPoll(self, evt):\n        if self.process:\n            for i in self.process.Poll():\n                self.output.AppendText(i)\n\n    def onModelProcessEnded(self, evt):\n        self.process.CloseInp()\n        for i in self.process.Poll():\n            self.output.AppendText(i)\n        self.process = None\n        command = 'maya2egg -uo ft -a chan %s -o %s.anim.egg'%(self.mayaFile, self.mayaFile)\n        self.process = Process(self, command, lambda p0 = None: self.onProcessEnded(p0))\n\n    def onProcessEnded(self, evt):\n        self.process.CloseInp()\n        for i in self.process.Poll():\n            self.output.AppendText(i)\n\n        self.output.AppendText('Converting %s is finished\\n'%self.mayaFile)\n        self.process = None\n\n        name = os.path.basename(self.mayaFile)\n        if self.isAnim:\n            if self.obj:\n                objDef = self.obj[OG.OBJ_DEF]\n                objNP = self.obj[OG.OBJ_NP]\n                animName = \"%s.anim.egg\"%self.mayaFile\n                if animName not in objDef.anims:\n                    objDef.anims.append(animName)\n                name = os.path.basename(animName)\n                objNP.loadAnims({name:animName})\n                objNP.loop(name)\n                self.obj[OG.OBJ_ANIM] = animName\n                self.editor.ui.objectPropertyUI.updateProps(self.obj)\n                return\n            else:\n                modelName = \"%s.model.egg\"%self.mayaFile\n                animName = \"%s.anim.egg\"%self.mayaFile\n                result = [name, modelName, animName]\n        else:\n            modelName = \"%s.egg\"%self.mayaFile\n            result = [name, modelName]\n\n        if self.callBack:\n            self.callBack(result)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/MayaConverter.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/b640eb1d_MayaConverter.json",
    "doc_id": "doc_20"
  }
}