{
  "content": "from direct.showbase.ShowBase import ShowBase\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.gui.OnscreenText import OnscreenText, TextNode\nfrom panda3d.core import CollisionTraverser\nfrom panda3d.core import CollisionHandlerQueue, CollisionNode, BitMask32\nfrom panda3d.core import CollisionPlane, CollisionSphere, CollisionRay\nfrom panda3d.core import Plane, Vec3, Point3\n\n\nclass World(DirectObject):\n\n    def __init__(self):\n        # Create a traverser that Panda3D will automatically use every frame.\n        base.cTrav = CollisionTraverser()\n        # Create a handler for the events.\n        self.collHandler = CollisionHandlerQueue()\n\n        # Define a few bitmasks for use.\n        # Teaching the concepts of bitmasks is out of the scope of this sample.\n        # This just shows a practical application of bitmasks.\n        goodMask = BitMask32(0x1)\n        badMask = BitMask32(0x2)\n        floorMask = BitMask32(0x4)\n\n        # Make a list of different combinations of the masks for later use.\n        # We will switch between these masks later on.\n        self.maskList = [\n            [\"floor\", floorMask],\n            [\"smiley\", goodMask],\n            [\"frowney\", badMask],\n            [\"characters\", goodMask | badMask],\n            [\"smiley and floor\", goodMask | floorMask],\n            [\"frowney and floor\", badMask | floorMask],\n            [\"all\", floorMask | goodMask | badMask]\n        ]\n        # This keeps track of where we are in the dictionary.\n        self.maskPos = 0\n\n        # First we create a floor collision plane.\n        floorNode = base.render.attachNewNode(\"Floor NodePath\")\n        # Create a collision plane solid.\n        collPlane = CollisionPlane(Plane(Vec3(0, 0, 1), Point3(0, 0, 0)))\n        # Call our function that creates a nodepath with a collision node.\n        floorCollisionNP = self.makeCollisionNodePath(floorNode, collPlane)\n        # Get the collision node the Nodepath is referring to.\n        floorCollisionNode = floorCollisionNP.node()\n        # The floor is only an into object, so just need to set its into mask.\n        floorCollisionNode.setIntoCollideMask(floorMask)\n\n        # Create a collision sphere. Since the models we'll be colliding\n        # are basically the same we can get away with just creating one\n        # collision solid and adding the same solid to both collision nodes.\n        collSphere = CollisionSphere(0, 0, 0, 1.5)\n\n        # Make a smiley.\n        smiley = base.loader.loadModel('smiley')\n        smiley.reparentTo(base.render)\n        smiley.setPos(-3, 3, 3)\n        smiley.setName(\"Smiley\")\n        smileyCollisionNP = self.makeCollisionNodePath(smiley, collSphere)\n        # Like with the floor plane we need to set the into mask.\n        # Here we shortcut getting the actual collision node.\n        smileyCollisionNP.node().setIntoCollideMask(goodMask)\n\n        # Make a frowney.\n        frowney = base.loader.loadModel('frowney')\n        frowney.reparentTo(base.render)\n        frowney.setPos(-3, 3, 7)\n        frowney.setName(\"Frowney\")\n        frowneyCollisionNP = self.makeCollisionNodePath(frowney, collSphere)\n        # Use the the Nodepath.setCollideMask() function to set the into mask.\n        # setCollideMask() sets the into mask of all child nodes to the given\n        # mask.\n        frowneyCollisionNP.setCollideMask(badMask)\n        # Note that we don't call setCollideMask() from frowney because this\n        # will turn the frowney mesh into a collision mesh which is unwanted.\n\n        # Note that we didn't set a from collide mask for previous objects\n        # since we're not adding them to the traverser as from objects.\n\n        # Make a collision ray that passes through all of the objects.\n        self.pointerNode = base.render.attachNewNode(\"Main Collider\")\n        self.pointerNode.setPos(-3, 3, 10)\n        # Create a ray collision solid that points downwards.\n        raySolid = CollisionRay(0, 0, 0, 0, 0, -1)\n        mainColNP = self.makeCollisionNodePath(self.pointerNode, raySolid)\n        self.mainColNode = mainColNP.node()\n        # Set a from collide mask for this ray so that we can selectively\n        # collide against the other objects.\n        self.mainColNode.setFromCollideMask(self.maskList[self.maskPos][1])\n        base.cTrav.addCollider(mainColNP, self.collHandler)\n\n        # Set up the camera.\n        base.disableMouse()\n        base.camera.setPos(20, -20, 5)\n        base.camera.lookAt(0, 0, 5)\n        # Debug mode for collision traversers; shows collisions visually.\n        base.cTrav.showCollisions(base.render)\n\n        # Setup the title text.\n        collideText = self.maskList[self.maskPos][0]\n        self.title = OnscreenText(text=\"Colliding with %s\" % (collideText),\n                                  mayChange=True,\n                                  pos=(0.3, 0),\n                                  align=TextNode.ALeft,\n                                  fg=(1, 1, 1, 1))\n        OnscreenText(text=\"Press space to change collision mask\",\n                     pos=(0, 0.8),\n                     fg=(1, 1, 1, 1))\n\n        # Set space to change the from collision mask of the collision ray.\n        base.accept(\"space\", self.switchCollisionMask)\n\n    def makeCollisionNodePath(self, nodepath, solid):\n        '''\n        Creates a collision node and attaches the collision solid to the\n        supplied NodePath. Returns the nodepath of the collision node.\n\n        '''\n        # Creates a collision node named after the name of the NodePath.\n        collNode = CollisionNode(\"%s c_node\" % nodepath.getName())\n        collNode.addSolid(solid)\n        collisionNodepath = nodepath.attachNewNode(collNode)\n        # Show the collision node, which makes the solids show up.\n        collisionNodepath.show()\n\n        return collisionNodepath\n\n    def switchCollisionMask(self):\n        if self.maskPos == len(self.maskList) - 1:\n            self.maskPos = 0\n        else:\n            self.maskPos += 1\n\n        # Changing the from collide mask of objects allows you to selectively\n        # test collisions against different objects.\n        name, mask = self.maskList[self.maskPos]\n        self.mainColNode.setFromCollideMask(mask)\n        self.title.setText(\"Colliding with %s\" % (name))\n\n\nbase = ShowBase()\nworld = World()\nbase.run()\n",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/40f997b9_bitmask-example.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/b8eb20fa_40f997b9_bitmask-example.json",
    "doc_id": "doc_9"
  }
}