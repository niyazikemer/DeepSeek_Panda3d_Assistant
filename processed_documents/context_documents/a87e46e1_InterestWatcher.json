{
  "content": "from direct.directnotify.DirectNotifyGlobal import directNotify\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.showbase.EventGroup import EventGroup\nfrom direct.showbase.MessengerGlobal import messenger\n\n\nclass InterestWatcher(DirectObject):\n    \"\"\"Object that observes all interests adds/removes over a period of time,\n    and sends out an event when all of those interests have closed\"\"\"\n    notify = directNotify.newCategory('InterestWatcher')\n\n    def __init__(self, interestMgr, name, doneEvent=None,\n                 recurse=True, start=True, mustCollect=False, doCollectionMgr=None):\n        DirectObject.__init__(self)\n        self._interestMgr = interestMgr\n        if doCollectionMgr is None:\n            doCollectionMgr = interestMgr\n        self._doCollectionMgr = doCollectionMgr\n        self._eGroup = EventGroup(name, doneEvent=doneEvent)\n        self._doneEvent = self._eGroup.getDoneEvent()\n        self._gotEvent = False\n        self._recurse = recurse\n        if self._recurse:\n            # this will hold a dict of parentId to set(zoneIds) that are closing\n            self.closingParent2zones = {}\n        if start:\n            self.startCollect(mustCollect)\n\n    def startCollect(self, mustCollect=False):\n        self._mustCollect = mustCollect\n\n        self.accept(self._interestMgr._getAddInterestEvent(), self._handleInterestOpenEvent)\n        self.accept(self._interestMgr._getRemoveInterestEvent(), self._handleInterestCloseEvent)\n\n    def stopCollect(self):\n        self.ignore(self._interestMgr._getAddInterestEvent())\n        self.ignore(self._interestMgr._getRemoveInterestEvent())\n\n        mustCollect = self._mustCollect\n        del self._mustCollect\n        if not self._gotEvent:\n            if mustCollect:\n                logFunc = self.notify.error\n            else:\n                logFunc = self.notify.warning\n            logFunc('%s: empty interest-complete set' % self.getName())\n            self.destroy()\n            messenger.send(self.getDoneEvent())\n        else:\n            self.accept(self.getDoneEvent(), self.destroy)\n\n    def destroy(self):\n        if hasattr(self, '_eGroup'):\n            self._eGroup.destroy()\n            del self._eGroup\n            del self._gotEvent\n            del self._interestMgr\n            self.ignoreAll()\n\n    def getName(self):\n        return self._eGroup.getName()\n    def getDoneEvent(self):\n        return self._doneEvent\n\n    def _handleInterestOpenEvent(self, event):\n        self._gotEvent = True\n        self._eGroup.addEvent(event)\n    def _handleInterestCloseEvent(self, event, parentId, zoneIdList):\n        self._gotEvent = True\n        self._eGroup.addEvent(event)\n        #if self._recurse:\n        #    # this interest is in the process of closing. If an interest\n        #    # underneath any objects in that interest close, we need to know\n        #    # about it.\n        #    self.closingParent2zones.setdefault(parentId, set())\n        #    self.closingParent2zones[parentId].union(set(zoneIdList))\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/InterestWatcher.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/a87e46e1_InterestWatcher.json",
    "doc_id": "doc_321"
  }
}