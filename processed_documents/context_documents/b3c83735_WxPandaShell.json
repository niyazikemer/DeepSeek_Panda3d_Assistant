{
  "content": "from __future__ import annotations\n\nimport wx\nfrom wx.lib.agw import fourwaysplitter as FWS\n\nfrom direct.showbase.ShowBase import ShowBase\nfrom direct.showbase import ShowBaseGlobal\nfrom direct.directtools.DirectGlobals import SKIP_UNPICKABLE\nfrom direct.task.TaskManagerGlobal import taskMgr\n\nfrom .WxAppShell import WxAppShell\nfrom .ViewPort import Viewport, ViewportManager\n\nID_FOUR_VIEW = 401\nID_TOP_VIEW = 402\nID_FRONT_VIEW = 403\nID_LEFT_VIEW = 404\nID_PERSP_VIEW = 405\n\n\nclass WxPandaShell(WxAppShell):\n    \"\"\" Class for Panda3D LevelEditor \"\"\"\n    frameWidth = 800\n    frameHeight = 600\n    appversion      = '1.0'\n    appname         = 'Panda3D Generic WX Frame'\n    copyright       = ('Copyright 2010 Disney Online Studios.' +\n                       '\\nAll Rights Reserved.')\n\n    MENU_TEXTS: dict[int, tuple[str, str | None]] = {\n        ID_FOUR_VIEW: (\"Four Views\", None),\n        ID_TOP_VIEW: (\"Top View\", None),\n        ID_FRONT_VIEW: (\"Front View\", None),\n        ID_LEFT_VIEW: (\"Left View\", None),\n        ID_PERSP_VIEW: (\"Persp View\", None),\n    }\n\n    def __init__(self, fStartDirect = False):\n        base = getattr(ShowBaseGlobal, 'base', None)\n        if not base:\n            base = ShowBase(False, windowType='none')\n\n        fDirect = (base.config.GetBool('want-directtools', 0) or\n                   (base.config.GetString(\"cluster-mode\", '') != ''))\n\n        self.fStartDirect = fStartDirect or fDirect\n\n        # Create the Wx app\n        self.wxApp = wx.App(redirect = False)\n        self.wxApp.SetAppName(self.appname)\n        WxAppShell.__init__(self, size=wx.Size(self.frameWidth, self.frameHeight))\n        self.initialize()\n\n    def createMenu(self):\n        self.menuView = wx.Menu()\n        self.menuBar.Insert(self.menuBar.GetMenuCount() - 1, self.menuView, \"&View\")\n\n        menuItem = self.menuView.AppendRadioItem(ID_FOUR_VIEW, self.MENU_TEXTS[ID_FOUR_VIEW][0])\n        self.Bind(wx.EVT_MENU, lambda p0=None, p1=-1:self.onViewChange(p0, p1), menuItem)\n\n        menuItem = self.menuView.AppendRadioItem(ID_TOP_VIEW, self.MENU_TEXTS[ID_TOP_VIEW][0])\n        self.Bind(wx.EVT_MENU, lambda p0=None, p1=0:self.onViewChange(p0, p1), menuItem)\n\n        menuItem = self.menuView.AppendRadioItem(ID_FRONT_VIEW, self.MENU_TEXTS[ID_FRONT_VIEW][0])\n        self.Bind(wx.EVT_MENU, lambda p0=None, p1=1:self.onViewChange(p0, p1), menuItem)\n\n        menuItem = self.menuView.AppendRadioItem(ID_LEFT_VIEW, self.MENU_TEXTS[ID_LEFT_VIEW][0])\n        self.Bind(wx.EVT_MENU, lambda p0=None, p1=2:self.onViewChange(p0, p1), menuItem)\n\n        self.perspViewMenuItem = self.menuView.AppendRadioItem(ID_PERSP_VIEW, self.MENU_TEXTS[ID_PERSP_VIEW][0])\n        self.Bind(wx.EVT_MENU, lambda p0=None, p1=3:self.onViewChange(p0, p1), self.perspViewMenuItem)\n\n    def createInterface(self):\n        self.createMenu()\n        self.mainFrame = wx.SplitterWindow(self, style = wx.SP_3D | wx.SP_BORDER)\n        self.leftFrame = wx.SplitterWindow(self.mainFrame, style = wx.SP_3D | wx.SP_BORDER)\n        self.baseFrame = wx.SplitterWindow(self.mainFrame, style = wx.SP_3D | wx.SP_BORDER)\n        self.viewFrame = FWS.FourWaySplitter(self.baseFrame, style=wx.SP_LIVE_UPDATE)\n        self.rightFrame = wx.SplitterWindow(self.baseFrame, style = wx.SP_3D | wx.SP_BORDER)\n\n        self.topView = Viewport.makeTop(self.viewFrame)\n        self.viewFrame.AppendWindow(self.topView)\n\n        self.frontView = Viewport.makeFront(self.viewFrame)\n        self.viewFrame.AppendWindow(self.frontView)\n\n        self.leftView = Viewport.makeLeft(self.viewFrame)\n        self.viewFrame.AppendWindow(self.leftView)\n\n        self.perspView = Viewport.makePerspective(self.viewFrame)\n        self.viewFrame.AppendWindow(self.perspView)\n\n        self.leftBarUpPane = wx.Panel(self.leftFrame)\n        self.leftBarDownPane = wx.Panel(self.leftFrame)\n        self.rightBarUpPane = wx.Panel(self.rightFrame)\n        self.rightBarDownPane = wx.Panel(self.rightFrame)\n\n        self.leftFrame.SplitHorizontally(self.leftBarUpPane, self.leftBarDownPane)\n        self.rightFrame.SplitHorizontally(self.rightBarUpPane, self.rightBarDownPane)\n        self.mainFrame.SplitVertically(self.leftFrame, self.baseFrame, 200)\n        self.baseFrame.SplitVertically(self.viewFrame, self.rightFrame, 600)\n\n        self.leftFrame.SetSashGravity(0.5)\n        self.rightFrame.SetSashGravity(0.5)\n        self.baseFrame.SetSashGravity(1.0)\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.mainFrame, 1, wx.EXPAND, 0)\n        self.SetSizer(sizer)\n        self.Layout()\n\n    def initialize(self):\n        \"\"\"Initializes the viewports and editor.\"\"\"\n        self.Update()\n        ViewportManager.updateAll()\n        self.wxStep()\n        ViewportManager.initializeAll()\n        # Position the camera\n        base = ShowBaseGlobal.base\n        if base.trackball is not None:\n            base.trackball.node().setPos(0, 30, 0)\n            base.trackball.node().setHpr(0, 15, 0)\n\n        # to make persp view as default\n        self.perspViewMenuItem.Check()\n        self.onViewChange(None, 3)\n\n        # initializing direct\n        if self.fStartDirect:\n            base.startDirect(fWantTk = 0, fWantWx = 0)\n            direct = ShowBaseGlobal.direct\n\n            direct.disableMouseEvents()\n            newMouseEvents = [\"_le_per_%s\"%x for x in direct.mouseEvents] +\\\n                             [\"_le_fro_%s\"%x for x in direct.mouseEvents] +\\\n                             [\"_le_lef_%s\"%x for x in direct.mouseEvents] +\\\n                             [\"_le_top_%s\"%x for x in direct.mouseEvents]\n            direct.mouseEvents = newMouseEvents\n            direct.enableMouseEvents()\n\n            direct.disableKeyEvents()\n            keyEvents = [\"_le_per_%s\"%x for x in direct.keyEvents] +\\\n                             [\"_le_fro_%s\"%x for x in direct.keyEvents] +\\\n                             [\"_le_lef_%s\"%x for x in direct.keyEvents] +\\\n                             [\"_le_top_%s\"%x for x in direct.keyEvents]\n            direct.keyEvents = keyEvents\n            direct.enableKeyEvents()\n\n            direct.disableModifierEvents()\n            modifierEvents = [\"_le_per_%s\"%x for x in direct.modifierEvents] +\\\n                             [\"_le_fro_%s\"%x for x in direct.modifierEvents] +\\\n                             [\"_le_lef_%s\"%x for x in direct.modifierEvents] +\\\n                             [\"_le_top_%s\"%x for x in direct.modifierEvents]\n            direct.modifierEvents = modifierEvents\n            direct.enableModifierEvents()\n\n            direct.cameraControl.lockRoll = True\n            direct.setFScaleWidgetByCam(1)\n\n            unpickables = [\n                \"z-guide\",\n                \"y-guide\",\n                \"x-guide\",\n                \"x-disc-geom\",\n                \"x-ring-line\",\n                \"x-post-line\",\n                \"y-disc-geom\",\n                \"y-ring-line\",\n                \"y-post-line\",\n                \"z-disc-geom\",\n                \"z-ring-line\",\n                \"z-post-line\",\n                \"centerLines\",\n                \"majorLines\",\n                \"minorLines\",\n                \"Sphere\",]\n\n            for unpickable in unpickables:\n                direct.addUnpickable(unpickable)\n\n            direct.manipulationControl.optionalSkipFlags |= SKIP_UNPICKABLE\n            direct.manipulationControl.fAllowMarquee = 1\n            direct.manipulationControl.supportMultiView()\n            direct.cameraControl.useMayaCamControls = 1\n            direct.cameraControl.perspCollPlane = self.perspView.collPlane\n            direct.cameraControl.perspCollPlane2 = self.perspView.collPlane2\n\n            for widget in direct.manipulationControl.widgetList:\n                widget.setBin('gui-popup', 0)\n                widget.setDepthTest(0)\n\n            # [gjeon] to intercept messages here\n            direct.ignore('DIRECT-delete')\n            direct.ignore('DIRECT-select')\n            direct.ignore('DIRECT-preDeselectAll')\n            direct.ignore('DIRECT-toggleWidgetVis')\n            direct.fIgnoreDirectOnlyKeyMap = 1\n\n            # [gjeon] do not use the old way of finding current DR\n            direct.drList.tryToGetCurrentDr = False\n\n        else:\n            base.direct = None\n        #base.closeWindow(base.win)\n        base.win = base.winList[3]\n\n    def wxStep(self, task = None):\n        \"\"\"A step in the WX event loop. You can either call this yourself or use as task.\"\"\"\n        while self.evtLoop.Pending():\n            self.evtLoop.Dispatch()\n        self.evtLoop.ProcessIdle()\n        if task is not None:\n            return task.cont\n\n    def appInit(self):\n        \"\"\"Overridden from WxAppShell.py.\"\"\"\n        # Create a new event loop (to overide default wxEventLoop)\n        self.evtLoop = wx.GUIEventLoop()\n        self.oldLoop = wx.GUIEventLoop.GetActive()\n        wx.GUIEventLoop.SetActive(self.evtLoop)\n        taskMgr.add(self.wxStep, \"evtLoopTask\")\n\n    def onViewChange(self, evt, viewIdx):\n        for i in range(4):\n            if viewIdx >=0 and\\\n               i != viewIdx:\n                base.winList[i].setActive(0)\n            else:\n                base.winList[i].setActive(1)\n\n        self.viewFrame.SetExpanded(viewIdx)\n\n    def getCurrentView(self):\n        \"\"\"Function for get the current Viewport\"\"\"\n        if self.viewFrame._expanded == -1: #four view\n            self.currentView = None\n        if self.viewFrame._expanded == 0: #top view\n            self.currentView = self.topView\n        if self.viewFrame._expanded == 1: #front view\n            self.currentView = self.frontView\n        if self.viewFrame._expanded == 2: #left view\n            self.currentView = self.leftView\n        if self.viewFrame._expanded == 3: #perspect view\n            self.currentView = self.perspView\n\n        return self.currentView\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/wxwidgets/WxPandaShell.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/b3c83735_WxPandaShell.json",
    "doc_id": "doc_13"
  }
}