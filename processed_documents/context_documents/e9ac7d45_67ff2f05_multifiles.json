{
  "content": "Multifiles\n\nA multifile is a file that contains a set of files, similar to a .zip or .rar archive file. They are meant for containing multiple resources such as models, textures, sounds, shaders, and so on, and Panda can load them directly from the multifiles without having to unpack them first. Many games employ a similar concept of \"data\" file such as .upk for Unreal Engine and .pak for Quake Engine.\n\nThe multify program\n\nThe multify console program creates such files. You can get information about the commandline parameters by running multify with the -h option. This is how program describes itself:\n\nUsage: multify -[c|r|u|t|x] -f <multifile_name> [options] <subfile_name> ...\n\nmultify is used to store and extract files from a Panda Multifile. This is similar to a tar or zip file in that it is an archive file that contains a number of subfiles that may later be extracted.\n\nPanda's VirtualFileSystem is capable of mounting Multifiles for direct access to the subfiles contained within without having to extract them out to independent files first.\n\nThe command-line options for multify are designed to be similar to those for tar, the traditional Unix archiver utility.\n\nRead Assets\n\nIf you want to prepare to read assets from a Multifile directly, you can \"mount\" it into the virtual file system:\n\npython\n\nfrom panda3d.core import VirtualFileSystem\nfrom panda3d.core import Multifile\nfrom panda3d.core import Filename\nvfs = VirtualFileSystem.getGlobalPtr()\nvfs.mount(Filename(\"foo.mf\"), \".\", VirtualFileSystem.MFReadOnly)\n\ncpp\n\nVirtualFileSystem *vfs = VirtualFileSystem::get_global_ptr();\nvfs->mount(\"./foo.mf\", \".\", VirtualFileSystem::MF_read_only);\n\nIf you want to read assets, you can mount a whole directory structure from a webserver.\n\nIf your webserver hosts:\n\nhttp://localhost/mydir/models/myfile.bam\nhttp://localhost/mydir/maps/mytexture.png\n\nPut this in your config.prc:\n\nvfs-mount-url http://myserver/mydir /mydir\nmodel-path /mydir\n\nOr, equivalently, write this code at startup:\n\npython\n\nvfs.mount(VirtualFileMountHTTP('http://myserver/mydir'), '/mydir', 0)\ngetModelPath().appendDirectory('/mydir')\n\ncpp\n\nVirtualFileSystem *vfs = VirtualFileSystem::get_global_ptr();\nvfs->mount(new VirtualFileMountHTTP(\"http://myserver/mydir\"), \"/mydir\", 0);\nget_model_path().append_directory(\"/mydir\");\n\npython\n\nand then you can load models like this in your Python code:\n\nmodel = loader.loadModel('models/myfile.bam')\ntexture = loader.loadTexture('maps/mytexture.png')\n\nIf you want to prepare for reading and writing assets to a Multifile do the following.\n\npython\n\nfrom panda3d.core import VirtualFileSystem\nfrom panda3d.core import Multifile\nfrom panda3d.core import Filename\n\nmf = Multifile()\nmf.openReadWrite(\"models.mf\")\n\nvfs = VirtualFileSystem.getGlobalPtr()\nif vfs.mount(mf, \".\", VirtualFileSystem.MFReadOnly):\n    print('mounted')\n\ncpp\n\nPT(Multifile) mf = new Multifile;\nmf->open_read_write(\"models.mf\");\n\nVirtualFileSystem *vfs = VirtualFileSystem::get_global_ptr();\nif (vfs->mount(mf, \".\", VirtualFileSystem::MF_read_only) {\n    std::cerr << \"mounted\\n\";\n}\n\nIf you want to prepare for reading and writing assets to a 'subdirectory' Multifile do the following. Note \"mysys\" must always be literally written in any python code. E.g. \"mysys/memfdir/mfbar2.txt\"\n\npython\n\nfrom panda3d.core import VirtualFileSystem\nfrom panda3d.core import Multifile\nfrom panda3d.core import Filename\n\nmf = Multifile()\nmf.openReadWrite(\"models.mf\")\n\nvfs = VirtualFileSystem.getGlobalPtr()\nif vfs.mount(mf, \"mysys\", VirtualFileSystem.MFReadOnly):\n    print('mounted')\n\ncpp\n\nPT(Multifile) mf = new Multifile;\nmf->open_read_write(\"models.mf\");\n\nVirtualFileSystem *vfs = VirtualFileSystem::get_global_ptr();\nif (vfs->mount(mf, \"mysys\", VirtualFileSystem::MF_read_only) {\n    std::cerr << \"mounted\\n\";\n}\n\nIf you are having problems loading from multifiles you can list the complete contents of your .mf file with a command like:\n\nmultify -tvf mymultifile.mf\n\nDoing a sanity inspection like this can be useful to ensure that your assets are in the right place within the multifile.\n\nMultifile objects\n\nThe ~panda3d.core.Multifile class is designed for opening, reading and writing multifiles. You can open a new multifile by creating an instance of the class and calling the ~.Multifile.open_read() method:\n\npython\n\nfrom panda3d.core import Multifile\n\nmf = Multifile()\nmf.openRead(\"foo.mf\")\n\ncpp\n\nPT(Multifile) mf = new Multifile;\nmf->open_read(\"foo.mf\");\n\nThe ~.Multifile.open_read() method opens the multifile as read-only. If you want to make changes to it and write it back to disk, you will need to use the ~.Multifile.open_read_write() method. Also, there exists ~.Multifile.open_write() to create a new multifile.\n\nIf you have made important structural changes to a Multifile, it is recommended to rewrite the multifile using the ~.Multifile.repack() method. (This won't work if you've opened it using ~.Multifile.open_read().) If you are uncertain about whether it has become suboptimal, you can call ~.Multifile.neesd_repack() which returns True if the Multifile is suboptimal and should be repacked.\n\nTo write it back to disk, you can use the ~.Multifile.flush() method which flushes the changes you've made to the multifile back to disk, or the ~.Multifile.close() method if you're done with the file.\n\nTo mount Multifile objects into the VirtualFileSystem without writing them to disk first, here's an example on how to mount them:\n\npython\n\nmf = Multifile()\n#... now do something with mf\n\nvfs = VirtualFileSystem.getGlobalPtr()\nvfs.mount(mf, \".\", VirtualFileSystem.MFReadOnly)\n\ncpp\n\nPT(Multifile) mf = new Multifile;\n//... now do something with mf\n\nVirtualFileSystem *vfs = VirtualFileSystem::get_global_ptr();\nvfs->mount(mf, \".\", VirtualFileSystem::MF_read_only);\n\nSubfiles\n\nFiles that are added to a multifile are called subfiles. You can add existing files to a multifile object using the ~.Multifile.add_subfile() method. This method takes three arguments: the target filename, the existing source file and the compression level (1-9). There is also ~.Multifile.update_subfile(), which does the same thing but if the file already exists, only updates it if the content is different.\n\nThere are several other methods which operate on subfiles, which you can find on the ~panda3d.core.Multifile page in the API Reference. Here are a few examples of working with subfiles:\n\npython\n\nfrom panda3d.core import VirtualFileSystem\nfrom panda3d.core import Multifile\nfrom panda3d.core import Filename\n\nm = Multifile()\n\n# Add an existing real os file with compression level 6\nm.openReadWrite(\"foo.mf\")\nm.addSubfile(\"bar.txt\", Filename(\"/tmp/bar.txt\"), 6)\nm.flush()\n\n# Destroy the contents of the multifile\n# Add an existing real os file to be the first multifile\nm.openWrite(\"foo.mf\")\nm.addSubfile(\"bar.txt\", Filename(\"/tmp/bar.txt\"), 6)\nm.flush()\n\n# Permanently re-order in ascending order the\n# directories and files in the multifile\nm.openReadWrite(\"foo.mf\")\nm.repack()\nm.flush()\n\n# Open a multifile and replace the contents of the mulifile file\n# with new contents\nm = Multifile()\nm.openReadWrite(\"foo.mf\")\nm.updateSubfile(\"bar.txt\", Filename(\"/tmp/bar2.txt\"), 9)\nm.flush()\n\n# Open a multifile and extract all files smaller than 3kb\n# New real os files are created with the contents of the multifile data\nm = Multifile()\nm.openRead(\"foo.mf\")\nfor i in range(m.getNumSubfiles()):\n    if m.getSubfileLength(i) < 3 * 1024:\n        m.extractSubfile(i, Filename(\"/tmp/\" + m.getSubfileName(i)))\n\n# Find, print and remove a file named bar.txt\nbarIdx = m.findSubfile(\"bar.txt\")\nif barIdx != -1:\n    # It returns -1 if it doesn't exist\n    print(m.readSubfile(barIdx))\n    m.removeSubfile(barIdx)\nm.flush()\n\nm.close()\n\ncpp\n\nstd::ostringstream os (std::ios::in | std::ios::out);\nstd::istream is (os.rdbuf ());\n\nos.write((char*)&stuff, sizeof(stuff));\n\nPT(Multifile) mf = new Multifile();\nmf->open_write(fileName);\nmf->add_subfile(\"foo.mf\", &is,6);\nmf->flush();\nmf->close();\n\nIf the foo.mf file were to have a contained bar.egg.pz file, load the egg and use it similar to other model loading methods.\n\npython\n\nnodepath = loader.loadModel(\"foo/bar\")\n\nStream-Based\n\nMultifile algorithms are stream-based and not random-based. In a running game, from the output, if a message is received saying something similar to the words seek error for offset then a file in the multifile is trying to be accessed by a random-based method. For multifiles and fonts, an example of a random-based file is an .rgb file. An alternative different from the use of an .rgb file is the use of a .ttf instead. An example follows.\n\n# models is the original directory\n# models.mf it the new target multifile\nmultify -c -f models.mf -v models\n\nIn the game, from the multifile models.mf, load the .ttf file.\n\npython\n\nfont = loader.loadFont(\"models/arial.ttf\")\n\ncpp\n\nPT(TextFont) font = FontPool::load_font(\"models/arial.ttf\");\n\nEncryption\n\nMultifiles can also encrypt your files with a password. To do so, you need to set the encryption flag and password using the ~.Multifile.set_encryption_flag() and ~.Multifile.set_encryption_password() methods, before adding, extracting or reading multifiles.\n\nAt the OS prompt, to create a password protected multifile and print out the contents do the following.\n\n# models is the original directory\n# models.mf it the new target multifile\nmultify -c -f models.mf -ep \"mypass\" -v models\n\nThis code creates a multifile and adds an encrypted file to it:\n\npython\n\nm = Multifile()\nm.openReadWrite(\"foo.mf\")\nm.setEncryptionFlag(True)\nm.setEncryptionPassword(\"foobar\")\n\n# Add a new file to the multifile\nm.addSubfile(\"bar.txt\", Filename(\"/tmp/bar.txt\"), 1)\nm.flush()\nm.close()\n\ncpp\n\nPT(Multifile) m = new Multifile;\nm->open_read_write(\"foo.mf\");\nm->set_encryption_flag(true);\nm->set_encryption_password(\"foobar\");\n\n// Add a new file to the multifile\nm->add_subfile(\"bar.txt\", Filename(\"/tmp/bar.txt\"), 1);\nm->flush();\nm->close();\n\nYou can read encrypted multifiles the same way:\n\npython\n\nm = Multifile()\nm.openRead(\"foo.mf\")\nm.setEncryptionFlag(True)\nm.setEncryptionPassword(\"foobar\")\n# Prints the contents of the multifile\nprint(m.readSubfile(\"bar.txt\"))\n\ncpp\n\nPT(Multifile) m = new Multifile;\nm->open_read(\"foo.mf\");\nm->set_encryption_flag(True);\nm->set_encryption_password(\"foobar\");\n// Prints the contents of the multifile\nstd::cout << m->read_subfile(\"bar.txt\");\n\nAt the OS prompt, to see the contents of a password protected multifile perform multify -tvf models.mf -p \"mypass\"\n\nYou can test the reading in a of password-protected multifile, followed by the mounting of the file using the following code.\n\npython\n\nfrom panda3d.core import Multifile\nmf = Multifile()\nmf.openRead(\"models.mf\")\nmf.setEncryptionFlag(True)\nmf.setEncryptionPassword(\"mypass\")\n\nfrom panda3d.core import VirtualFileSystem\nvfs = VirtualFileSystem.getGlobalPtr()\nif vfs.mount(mf, \".\", VirtualFileSystem.MFReadOnly):\n    print('mounted')\n\ncpp\n\nPT(Multifile) mf = new Multifile;\nmf->open_read(\"models.mf\");\nmf->set_encryption_flag(true);\nmf->set_encryption_password(\"mypass\");\n\nVirtualFileSystem *vfs = VirtualFileSystem::get_global_ptr();\nif (vfs->mount(mf, \".\", VirtualFileSystem::MF_read_only)) {\n    std::cerr << \"mounted\\n\";\n}\n\nWhen running the application, the following should be seen:\n\nmounted\n\nYou can check if a certain subfile is encrypted or not using the ~.Multifile.is_subfile_encrypted() method, which takes the subfile index as parameter.\n\nIt is possible to have a multifile where different subfiles have different encryption, but you will not be able to mount it with the VirtualFileSystem or use it with the multify tool. To mount an encrypted file using the virtual file system, pass the password as parameter to the ~.VirtualFileSystem.mount() method:\n\npython\n\nfrom panda3d.core import VirtualFileSystem, Filename\nvfs = VirtualFileSystem.getGlobalPtr()\nvfs.mount(Filename(\"foo.mf\"), \".\", vfs.MFReadOnly, \"foobar\")\n\ncpp\n\nVirtualFileSystem *vfs = VirtualFileSystem::get_global_ptr()\nvfs->mount(\"./foo.mf\", \".\", VirtualFileSystem::MF_read_only, \"foobar\");\n\nTo use encryption with the multify tool, run it with the -e option, which will prompt for a password on the command line. Alternatively, if you also specify the -p \"password\" option, you can specify it in the command instead of typing it at the prompt.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/67ff2f05_multifiles.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/e9ac7d45_67ff2f05_multifiles.json",
    "doc_id": "doc_675"
  }
}