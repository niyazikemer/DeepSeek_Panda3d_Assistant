{
  "content": "Log Messages\n\nPanda periodically outputs log messages for debugging purposes. A typical log message might look like this:\n\n:util(warning): Adjusting global clock's real time by -3.3 seconds.\n\nThe first part of the message, util, is the name of the module that generated the message. The second part, warning, indicates the severity. The severity levels are, in decreasing order: fatal, error, warning, info, debug, and spam. The panda configuration file (Config.prc) contains these directives:\n\nnotify-level warning\ndefault-directnotify-level warning\n\nDirectives like these tell panda which messages to show, and which to suppress. In the default configuration (shown above), all messages whose severity is warning or above are shown, all messages whose severity is less are suppressed.\n\npython\n\nNote\n\nThere are two kinds of notifiers: the C++ one and a Pythonic (therefore 'direct'notify). You can distinguish them by the category name. Where C++ categories are always lowercase, Python categories are starting with a capital letter by convention (e.g. util, and ShowBase). The only differences in practice is that you set (all) Python notifiers with the prc option default-notify-level and C++ with notify-level, and Pythonic notifiers don't know the spam and fatal levels.\n\nSometimes it is interesting and educational to change the configuration to this:\n\nnotify-level spam\ndefault-directnotify-level info\n\nIf you do this, panda will print out vast amounts of information while it runs. These informational messages can be useful for debugging. However, there are so many print-statements that it slows panda down to a crawl. So it may be desirable to tell panda to narrow it down a little. The way to do that is to name a particular module in the panda config file. For example, you might do this:\n\nnotify-level warning\nnotify-level-glgsg spam\ndefault-directnotify-level warning\n\nThis tells panda that module \"glgsg\" should print out everything it can, but that every other module should only print warnings and errors. By the way, module glgsg is a particularly interesting module to investigate. This is the module that invokes OpenGL. If you tell it to spam you, it will tell you what it's setting the MODELVIEW and PROJECTION matrices to, and lots of other interesting information.\n\nGenerating your own Log Messages\n\nYou can use the Notify class to output your own log messages.\n\nIn Python this would look something like this:\n\nfrom direct.directnotify.DirectNotify import DirectNotify\n(...)\nnotify = DirectNotify().newCategory(\"MyCategory\")\n(...)\nnotify.warning(\"Put some informational text here.\")\n\nFirst you create a new notify category, which may be whatever you want, e.g. \"PlayerMovement\". It's a convention to have such a notifier for each bigger class or module. In the last line there is a warning() call, which indicates that the given text will be only printed if the severity level for this category is warning or debug. If the severity isn't set for this particular category, then the default-directnotify-level setting is taken.\n\nRedirecting Log Messages to a File\n\nIf you wish, you can redirect all of panda's log messages into a file. The following snippet will do the trick:\n\nnout = MultiplexStream()\nNotify.ptr().setOstreamPtr(nout, 0)\nnout.addFile(Filename(\"out.txt\"))\n\nAlternatively you may want to use the notify-output prc option, which expects a filename as argument:\n\nnotify-output mygame-log.txt",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/09fa2aa2_log-messages.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/1d6b6005_09fa2aa2_log-messages.json",
    "doc_id": "doc_625"
  }
}