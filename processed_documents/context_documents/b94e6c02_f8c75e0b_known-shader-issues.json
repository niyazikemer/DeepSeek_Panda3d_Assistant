{
  "content": "Known Shader Bugs and Limitations\n\nHere is a list of known issues in the shader system, with workarounds:\n\nProblem: No Cg Shaders on ARM Platforms\n\nProblem: Cg shaders, including the shader generator and CommonFilters, don't work on ARM-based machines, such as Apple Silicon computers.\n\nWorkaround: The NVIDIA Cg Toolkit is not available for the arm64 architecture. If you need to target Apple Silicon computers or other ARM-based machines, use GLSL shaders. This will be remedied in Panda3D 1.11, but it is nonetheless recommended to migrate to GLSL as Cg will be deprecated in a future version.\n\nProblem: GLSL Versions on macOS\n\nProblem: On macOS, loading a GLSL shader newer than 1.20 will fail, even if the hardware is capable of higher versions.\n\nWorkaround: To use GLSL 1.50 and 3.30 shaders on macOS, it is necessary to turn off the fixed-function pipeline. Note that this means it becomes necessary to use shaders for all objects, it is no longer possible to mix-and-match custom shaders and the fixed-function pipeline. To do this, set this in Config.prc:\n\ngl-version 3 2\n\nThe following table lists which shader languages and versions are supported in which situation on macOS:\n\nSituation NVIDIA Cg GLSL 1.20 GLSL 1.50 GLSL 3.30 No gl-version , Intel \u2714\ufe0f \u2714\ufe0f \u274c \u274c No gl-version , ARM64 \u274c \u2714\ufe0f \u274c \u274c With gl-version 3 2 \u274c \u274c \u2714\ufe0f \u2714\ufe0f\n\nIn Panda3D 1.11, this situation will be improved as Panda3D will be able to automatically back-translate GLSL 1.50+ shaders to 1.20 as required by the driver.\n\nProblem: Register Allocation\n\nProblem: nVidia's Cg compiler tries to assign registers to parameters. Under a variety of circumstances, the Cg compiler will assign the same register to two parameters, or to a parameter and to a constant in the program.\n\nWorkaround: We have found that if you manually allocate registers by supplying a semantic string for each parameter, this problem is bypassed.\n\nProblem: Bad Target Languages\n\nProblem: nVidia's Cg compiler will choose one of several different \"target\" languages to translate the Cg program into. When the Cg compiler tries to translate the program into the VP40/FP40 language, it often produces incorrect output.\n\nWorkaround: We have discovered that translation into ARBvp1/ARBvp1 seems to work reliably. Since that language is supported on essentially every video card, it is usually safe to translate into that language. We have provided a config variable that you can use to suppress bleeding edge stuff:\n\nbasic-shaders-only true\n\nThis variable is disabled by default, though on most non-NVIDIA cards, the ARBvp1/ARBfp1 profiles are still used by default in light of the problem above.\n\nAt some point, when functionality that is currently flaky becomes reliable, we may expand the definition of what constitutes 'basic' shaders.\n\nProblem: Invalid output when using ATI/AMD cards\n\nProblem: This is a specific case of the problem above. The Cg Toolkit only supports two sets of profiles on most non-nVidia cards; the basic ARB profiles, and the GLSL profiles. The ARB profiles are limited in functionality, which prompts people to use the GLSL profiles. However, these often produce incorrect results on ATI/AMD cards.\n\nWorkaround: Enable \"basic-shaders-only true\" as described above. For advanced shader effects, write your shaders in GLSL instead of Cg if you intend to support non-nVidia cards.\n\nProblem: Cg program too complex for driver\n\nProblem: Panda will translate the shader into the ARBvp1/ARBvp1 profile by default, for the reason stated above. If instructions are used that are not supported by these profiles, this error will occur.\n\nWorkaround: The recommended approach is to first try and find out which instructions are causing it to fail to compile under the ARB profiles. The most common problem is when a loop is used with a variable length, which cannot be unrolled by the compiler:\n\nfor (i = 0; i < k_iterations.x; ++i)\n\nInstead, you should use a constant that is known at compile-time:\n\n#define ITERATIONS 10\nfor (i = 0; i < ITERATIONS; ++i)\n\nWorkaround: You need to disable the basic-shaders-only flag to allow Panda to translate the shaders into profiles that do support the used instructions:\n\nbasic-shaders-only false\n\nNote that by doing so you might run into the problem above, and it is not recommended to do so unless you really need it.\n\nProblem: Untested/Unfinished DirectX Support\n\nProblem: Shader development is currently being done in OpenGL. The DirectX support typically lags behind, and is often less fully-tested.\n\nWorkaround: The default setting for Panda is to use OpenGL, not DirectX. For now, when using shaders, do not change this setting.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/f8c75e0b_known-shader-issues.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/b94e6c02_f8c75e0b_known-shader-issues.json",
    "doc_id": "doc_401"
  }
}