{
  "content": "Removing Custom Class Instances\n\nThe following text was taken from the Panda3D 1.6 Game Engine Beginner's Guide available from Packt Publishing with the author's permission. The text refers to a \"custom class\", which is a python class that is not part of the Panda3D SDK. Here is an example of a custom class:\n\nclass MyClass:\n    def __init__(self):\n        myVar1 = 10\n        myVar2 = 20\n    def myMethod(self):\n        return (self.myVar1, self.myVar2)\n\nFrom Panda3D 1.6 Game Engine Beginner's Guide:\n\nPython will automatically garbage collect a custom class instance when all the references to that instance are removed. In theory, this makes garbage collection as simple as cleaning up those references, but because there are so many different places and reasons for these references garbage collection can quickly grow complicated. Following these steps will help to ensure that a custom class instance is properly garbage collected.\n\nCall ~.NodePath.remove_node() on all NodePaths in the scene graph \u2013 The first step is to clear out the NodePaths that the custom class has added to the scene graph. If this step isn\u2019t accomplished, it won\u2019t necessarily prevent the custom class instance from being garbage collected, but it could. Even if the custom class instance is still garbage collected the scene graph itself will retain references to the NodePaths that haven\u2019t been cleared out and they will remain in the scene graph. There is one exception to this rule: when a parent NodePath has ~.NodePath.remove_node called on it that ultimately result in the removal of its child NodePaths, so long as nothing else retains a reference to them. However, relying on this behavior is an easy way to make mistakes so it\u2019s better to manually remove all of the NodePaths a custom class adds to the scene graph.\n\nCall ~direct.actor.Actor.Actor.delete() on all Actors \u2013 Just calling ~.NodePath.remove_node() on an Actor isn\u2019t enough. Calling ~direct.actor.Actor.Actor.delete() will remove ties to animations, exposed joints, and so on to ensure that all the extra components of the Actor are removed from memory as well.\n\nSet all Intervals, Sequences, and Parallels equal to None \u2013 It\u2019s very common for Intervals, Sequences, and Parallels to retain references to something in the class and prevent the class instance from being cleaned up. To be safe, it\u2019s best to remove the references to these Intervals so that they get cleaned up themselves and any references they have to the class are removed.\n\nDetach all 3D sounds connected to class NodePaths \u2013 3D sounds won\u2019t actually retain references to the custom class, but if the NodePaths they are attached to are removed with ~.NodePath.remove_node() and the sounds aren\u2019t detached, they\u2019ll generate an error and crash the program when they try to access the removed NodePaths. Play it safe and detach the sounds.\n\nEnd all tasks running in the class \u2013 The task manager will retain a reference to the class instance so long as the class instance has a task running, so set up all of the tasks in the custom class to end themselves with return task.done. This is the most reliable way to stop them and clear the reference to the custom class in the task manager.\n\nIf the custom class inherits from DirectObject, call self.ignoreAll()\u2013 Panda3D\u2019s message system will also retain a reference to the custom class if it is set up to receive messages. To be on the safe side, every class that inherits from DirectObject and will be deleted during run time should call self.ignoreAll() to tell the message system that the class is no longer listening to messages. That will remove the reference.\n\nRemove all direct references to the custom class instance \u2013 Naturally, the custom class instance won\u2019t get cleaned up if something is referencing it directly, either through a circular self reference, or because it was created as a \u201cchild\u201d of another class and that other class has a reference to it stored as a variable. All of these references need to be removed. This also includes references to the custom class instance placed in PythonTags.\n\nThe __del__ method is a good way to test if a custom class is being garbage collected. The __del__ method is similar to the __init__ method in that we don\u2019t call it ourselves; it gets called when something happens. __init__ is called when a new instance of the class is created; __del__ is called when an instance of the class is garbage collected. It\u2019s a pretty common thought to want to put some important clean up steps in the __del__ method itself, but this isn\u2019t wise. In fact, it\u2019s best not to have a __del__ method in any of our classes in the final product because the __del__ method can actually hinder proper garbage collection. A better usage is to put a simple print statement in the __del__ method that will serve as a notifier that Python has garbage collected the custom class instance. For example:\n\ndef __del__(self):\n    print(\"Instance of Custom Class Alpha Removed\")\n\nOnce we've confirmed that our custom class is being garbage collected properly, we can remove the __del__ method.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/5e9b18c7_removing-custom-class-instances.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/34bfddd9_5e9b18c7_removing-custom-class-instances.json",
    "doc_id": "doc_493"
  }
}