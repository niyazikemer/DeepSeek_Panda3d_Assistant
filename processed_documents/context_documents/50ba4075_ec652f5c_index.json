{
  "content": "Intervals\n\nPanda3D's Interval system is a sophisticated mechanism for playback of scripted actions. With the use of Intervals, you can build up a complex interplay of animations, sound effects, or any other actions, and play the script on demand.\n\npython\n\nThe core of the system is the ~direct.interval.Interval.Interval class. There are several different kinds of Intervals, which will be discussed in detail in the following pages, but all of them have in common the following property: each Interval represents an action (or a series of actions) that occurs over a specific, finite interval of time (hence the name).\n\ncpp\n\nThe core of the system is the ~.CInterval class. There are several different kinds of Intervals, which will be discussed in detail in the following pages, but all of them have in common the following property: each Interval represents an action (or a series of actions) that occurs over a specific, finite interval of time (hence the name).\n\nThe real power of the Interval system comes from sequences-and-parallels, which are a special kind of Interval that can contain nested Intervals of any kind (including additional Sequences and/or Parallels). By using these grouping Intervals, you can easily assemble complex scripts from the basic atoms.\n\npython\n\nThe class responsible for keeping track of the intervals that are currently playing and updating them periodically is called ~direct.interval.IntervalManager.IntervalManager. Normally, you do not need to interface with this class directly, but you can use it to query the list of running intervals or perform operations on multiple intervals at the same time. There is one global instance of this class, which can be imported as follows:\n\nfrom direct.interval.IntervalManager import ivalMgr\n\ncpp\n\nThe class responsible for keeping track of the intervals that are currently playing and updating them periodically is called .CIntervalManager. There is one global instance, available via .CIntervalManager::get_global_ptr(). You need to call ~.CIntervalManager::step() on this class every frame in order to advance the intervals.\n\nUsing Intervals\n\npython\n\nIn any Panda3D module that uses Intervals, you should first import the interval module:\n\nfrom direct.interval.IntervalGlobal import *\n\nThere are a handful of methods that all Intervals have in common.\n\nTo start an Interval playing, use one of the following:\n\ninterval.start()\ninterval.start(startT, endT, playRate)\ninterval.loop()\ninterval.loop(startT, endT, playRate)\n\nThe three parameters are optional. The startTime and endTime parameters define the subset of the interval to play; these should be given as times in seconds, measured from the start of the interval. The playRate, if specified, allows you play the interval slower or faster than real time; the default is 1.0, to play at real time.\n\nNormally, an Interval will play to the end and stop by itself, but you can stop a playing Interval prematurely:\n\ninterval.finish()\n\nThis will stop the interval and move its state to its final state, as if it had played to the end. This is a very important point, and it allows you to define critical cleanup actions within the interval itself, which are guaranteed to have been performed by the time the interval is finished.\n\nYou can also temporarily pause and resume an interval:\n\ninterval.pause()\ninterval.resume()\n\nIf you pause an interval and never resume or finish it, the remaining actions in the interval will not be performed.\n\nAnd you can jump around in time within an interval:\n\ninterval.setT(time)\n\nThis causes the interval to move to the given time, in seconds since the beginning of the interval. The interval will perform all of the actions between its current time and the new time; there is no way to skip in time without performing the intervening actions.\n\nIt is legal to set the time to an earlier time; the interval will do its best to reset its state to the previous state. In some cases this may not be possible (particularly if a Function Interval <function-intervals> is involved).\n\ninterval.setPlayRate(playRate)\n\nWith this you can change the play rate of the interval when it is already running.\n\nFinally, there are a handful of handy query methods:\n\ninterval.getDuration()\n\nReturns the length of the interval in seconds.\n\ninterval.getT()\n\nReturns the current elapsed time within the interval, since the beginning of the interval.\n\ninterval.isPlaying()\n\nReturns true if the interval is currently playing, or false if it was not started, has already finished, or has been explicitly paused or finished.\n\ninterval.isStopped()\n\nReturns true if the interval has not been started, has already played to its completion, or has been explicitly stopped via finish(). This is not quite the same this as (not interval.isPlaying()), since it does not return true for a paused interval.\n\nTable of Contents\n\nlerp-intervals function-intervals actor-intervals sound-intervals sequences-and-parallels motion-paths particle-intervals projectile-intervals",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/ec652f5c_index.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/50ba4075_ec652f5c_index.json",
    "doc_id": "doc_507"
  }
}