{
  "content": "Simple Texture Replacement\n\nAlthough usually you will load and display models that are already textured, you can also apply or replace a texture image on a model at runtime. To do this, you must first get a handle to the texture, for instance by loading it directly:\n\npython\n\nmyTexture = loader.loadTexture(\"myTexture.png\")\n\nThe above loader.loadTexture() <direct.showbase.Loader.Loader.loadTexture> call will search along the current model-path for the named image file (in this example, a file named \"myTexture.png\"). If the texture is not found or cannot be read for some reason, None is returned.\n\ncpp\n\n#include \"texturePool.h\"\n\nPT(Texture) tex;\ntex = TexturePool::load_texture(\"myTexture.png\");\n\nNodePath smiley;\nsmiley = window->load_model(window->get_render(), \"smiley.egg\");\nsmiley.set_texture(tex, 1);\n\nThe above TexturePool::load_texture() call will search along the current model-path for the named image file (in this example, a file named \"myTexture.png\"). If the texture is not found or cannot be read for some reason, None is returned.\n\nNote that the Texture class is reference counted <reference-counting>, so it is necessary to use a smart PT(Texture) pointer to ensure that it is not automatically deleted by the garbage collector.\n\nOnce you have a texture, you can apply it to a model with the ~.NodePath.set_texture() call. For instance, suppose you used the .CardMaker class to generate a plain white card:\n\npython\n\ncm = CardMaker('card')\ncard = render.attachNewNode(cm.generate())\n\ncpp\n\nCardMaker cm(\"card\");\nNodePath card = render.attach_new_node(cm.generate());\n\nThen you can load up a texture and apply it to the card like this:\n\npython\n\ntex = loader.loadTexture('maps/noise.rgb')\ncard.setTexture(tex)\n\ncpp\n\nPT(Texture) tex = TexturePool::load_texture(\"maps/noise.rgb\");\ncard.set_texture(tex);\n\n(Note that it is not necessary to use the override parameter to the ~.NodePath.set_texture() call--that is, you do not need to do card.set_texture(tex, 1)--because in this case, the card does not already have any other texture applied to it, so your texture will be visible even without the override.)\n\nIn order for this to work, the model you apply it to must already have texture coordinates defined (see simple-texturing). As it happens, the CardMaker generates texture coordinates by default when it generates a card, so no problem there.\n\ncpp\n\nAs a special shortcut, you can also directly load the texture as though it were a model, which will automatically create a card for it:\n\nNodePath card;\ncard = window->load_model(window->get_render(), \"maps/noise.rgb\");\n\nThis short piece of code will result in a single polygon in the scene with the noise texture applied to it. Of course, if you need it in the 2-D scene, you should use ~WindowFramework::get_aspect2d() or ~WindowFramework::get_render2d() instead of ~WindowFramework::get_render().\n\nYou can also use ~.NodePath.set_texture() to replace the texture on an already-textured model. In this case, you must specify a second parameter to setTexture, which is the same optional Panda override parameter you can specify on any kind of Panda state change. Normally, you simply pass 1 as the second parameter to ~.NodePath.set_texture(). Without this override, the texture that is assigned directly at the Geom level will have precedence over the state change you make at the model node, and the texture change won't be made.\n\nFor instance, to change the appearance of smiley:\n\npython\n\nsmiley = loader.loadModel('smiley.egg')\nsmiley.reparentTo(render)\ntex = loader.loadTexture('maps/noise.rgb')\nsmiley.setTexture(tex, 1)\n\ncpp\n\nNodePath smiley;\nPT(Texture) tex;\n\nsmiley = window->load_model(window->get_render(), \"smiley.egg\");\ntex = TexturePool::load_texture(\"maps/noise.rgb\");\nsmiley.set_texture(tex, 1);\n\nOften, you want to replace the texture on just one piece of a model, rather than setting the texture on every element. To do this, you simply get a .NodePath handle to the piece or pieces of the model that you want to change, as described in the section manipulating-a-piece-of-a-model, and make the .NodePath.set_texture() call on those NodePaths.\n\nFor instance, this car model has multiple textures available in different colors:\n\nFor the most part, this car was painted with one big texture image, which looks like this:\n\nBut we also have a blue version of the same texture image:\n\nAlthough it is tempting to use .NodePath.set_texture() to assign the blue texture to the whole car, that would also assign the blue texture to the car's tires, which need to use a different texture map. So instead, we apply the blue texture just to the pieces that we want to change:\n\npython\n\ncar = loader.loadModel('bvw-f2004--carnsx/carnsx.egg')\nblue = loader.loadTexture('bvw-f2004--carnsx/carnsx-blue.png')\ncar.find('**/body/body').setTexture(blue, 1)\ncar.find('**/body/polySurface1').setTexture(blue, 1)\ncar.find('**/body/polySurface2').setTexture(blue, 1)\n\ncpp\n\nNodePath car = window->load_model(window->get_render(), \"bvw-f2004--carnsx/carnsx.egg\");\nPT(Texture) blue = TexturePool::load_texture(\"bvw-f2004--carnsx/carnsx-blue.png\");\ncar.find('**/body/body').set_texture(blue, 1);\ncar.find('**/body/polySurface1').set_texture(blue, 1);\ncar.find('**/body/polySurface2').set_texture(blue, 1);\n\nAnd the result is this:\n\nAs of Panda3D 1.10.4, there is an easier way to do this as well, by allowing you to tell Panda3D to replace the texture on all parts where a particular existing texture is applied:\n\npython\n\ncar = loader.loadModel('bvw-f2004--carnsx/carnsx.egg')\nred = loader.loadTexture('bvw-f2004--carnsx/carnsx.png')\nblue = loader.loadTexture('bvw-f2004--carnsx/carnsx-blue.png')\ncar.replaceTexture(red, blue)\n\ncpp\n\nNodePath car = window->load_model(window->get_render(), \"bvw-f2004--carnsx/carnsx.egg\");\nPT(Texture) red = TexturePool::load_texture(\"bvw-f2004--carnsx/carnsx.png\");\nPT(Texture) blue = TexturePool::load_texture(\"bvw-f2004--carnsx/carnsx-blue.png\");\ncar.replace_texture(red, blue);\n\nIf you are interested in changing the image of a texture during program execution, say to adjust some of its pixels, see creating-new-textures-from-scratch.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/814d539f_simple-texture-replacement.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/86c0a6eb_814d539f_simple-texture-replacement.json",
    "doc_id": "doc_439"
  }
}