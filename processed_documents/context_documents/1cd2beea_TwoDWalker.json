{
  "content": "\"\"\"\nTwoDWalker.py is for controlling the avatars in a 2D scroller game environment.\n\"\"\"\n\nfrom .GravityWalker import GravityWalker\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nfrom direct.showbase.InputStateGlobal import inputState\nfrom direct.showbase.MessengerGlobal import messenger\nfrom direct.task.Task import Task\nfrom panda3d.core import ConfigVariableBool, Vec3\n\n\nclass TwoDWalker(GravityWalker):\n    \"\"\"\n    The TwoDWalker is primarily for a 2D Scroller game environment. Eg - Toon Blitz minigame.\n    TODO: This class is still work in progress.\n    Currently Toon Blitz is using this only for jumping.\n    Moving the Toon left to right is handled by toontown/src/minigame/TwoDDrive.py.\n    I eventually want this class to control all the 2 D movements, possibly with a\n    customizable input list.\n    \"\"\"\n    notify = directNotify.newCategory(\"TwoDWalker\")\n    wantDebugIndicator = ConfigVariableBool('want-avatar-physics-indicator', False)\n    wantFloorSphere = ConfigVariableBool('want-floor-sphere', False)\n    earlyEventSphere = ConfigVariableBool('early-event-sphere', False)\n\n    # special methods\n    def __init__(self, gravity = -32.1740, standableGround=0.707,\n            hardLandingForce=16.0):\n        assert self.notify.debugStateCall(self)\n        self.notify.debug('Constructing TwoDWalker')\n        GravityWalker.__init__(self)\n\n    def handleAvatarControls(self, task):\n        \"\"\"\n        Check on the arrow keys and update the avatar.\n        \"\"\"\n        # get the button states:\n        jump = inputState.isSet(\"forward\")\n        if self.lifter.isOnGround():\n            if self.isAirborne:\n                self.isAirborne = 0\n                assert self.debugPrint(\"isAirborne 0 due to isOnGround() true\")\n                impact = self.lifter.getImpactVelocity()\n                messenger.send(\"jumpLand\")\n            assert self.isAirborne == 0\n            self.priorParent = Vec3.zero()\n        else:\n            if self.isAirborne == 0:\n                assert self.debugPrint(\"isAirborne 1 due to isOnGround() false\")\n            self.isAirborne = 1\n\n        return Task.cont\n\n    def jumpPressed(self):\n        \"\"\"This function should be called from TwoDDrive when the jump key is pressed.\"\"\"\n        if self.lifter.isOnGround():\n            if self.isAirborne == 0:\n                if self.mayJump:\n                    # The jump button is down and we're close enough to the ground to jump.\n                    self.lifter.addVelocity(self.avatarControlJumpForce)\n                    messenger.send(\"jumpStart\")\n                    self.isAirborne = 1\n                    assert self.debugPrint(\"isAirborne 1 due to jump\")\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/controls/TwoDWalker.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/1cd2beea_TwoDWalker.json",
    "doc_id": "doc_229"
  }
}