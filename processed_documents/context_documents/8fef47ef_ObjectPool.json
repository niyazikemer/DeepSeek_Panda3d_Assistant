{
  "content": "\"\"\"Contains the ObjectPool utility class.\"\"\"\n\n__all__ = ['Diff', 'ObjectPool']\n\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nfrom direct.showbase.PythonUtil import invertDictLossless, makeList, safeRepr, itype\nfrom direct.showbase.PythonUtil import getNumberedTypedString, getNumberedTypedSortedString\nimport gc\n\n\nclass Diff:\n    def __init__(self, lost, gained):\n        self.lost = lost\n        self.gained = gained\n\n    def printOut(self, full=False):\n        print('lost %s objects, gained %s objects' % (len(self.lost), len(self.gained)))\n        print('\\n\\nself.lost\\n')\n        print(self.lost.typeFreqStr())\n        print('\\n\\nself.gained\\n')\n        print(self.gained.typeFreqStr())\n        if full:\n            self.gained.printObjsByType()\n            print('\\n\\nGAINED-OBJECT REFERRERS\\n')\n            self.gained.printReferrers(1)\n\n\nclass ObjectPool:\n    \"\"\"manipulate a pool of Python objects\"\"\"\n    notify = directNotify.newCategory('ObjectPool')\n\n    def __init__(self, objects):\n        self._objs = list(objects)\n        self._type2objs = {}\n        self._count2types = {}\n        self._len2obj = {}\n        type2count = {}\n        for obj in self._objs:\n            typ = itype(obj)\n            type2count.setdefault(typ, 0)\n            type2count[typ] += 1\n            self._type2objs.setdefault(typ, [])\n            self._type2objs[typ].append(obj)\n            try:\n                self._len2obj[len(obj)] = obj\n            except Exception:\n                pass\n        self._count2types = invertDictLossless(type2count)\n\n    def _getInternalObjs(self):\n        return (self._objs, self._type2objs, self._count2types)\n\n    def destroy(self):\n        del self._objs\n        del self._type2objs\n        del self._count2types\n\n    def getTypes(self):\n        return list(self._type2objs.keys())\n\n    def getObjsOfType(self, type):\n        return self._type2objs.get(type, [])\n\n    def printObjsOfType(self, type):\n        for obj in self._type2objs.get(type, []):\n            print(repr(obj))\n\n    def diff(self, other):\n        \"\"\"print difference between this pool and 'other' pool\"\"\"\n        thisId2obj = {}\n        otherId2obj = {}\n        for obj in self._objs:\n            thisId2obj[id(obj)] = obj\n        for obj in other._objs:\n            otherId2obj[id(obj)] = obj\n        thisIds = set(thisId2obj.keys())\n        otherIds = set(otherId2obj.keys())\n        lostIds = thisIds.difference(otherIds)\n        gainedIds = otherIds.difference(thisIds)\n        del thisIds\n        del otherIds\n        lostObjs = []\n        for i in lostIds:\n            lostObjs.append(thisId2obj[i])\n        gainedObjs = []\n        for i in gainedIds:\n            gainedObjs.append(otherId2obj[i])\n        return Diff(self.__class__(lostObjs), self.__class__(gainedObjs))\n\n    def typeFreqStr(self):\n        s  =   'Object Pool: Type Frequencies'\n        s += '\\n============================='\n        for count in sorted(self._count2types, reverse=True):\n            types = makeList(self._count2types[count])\n            for typ in types:\n                s += '\\n%s\\t%s' % (count, typ)\n        return s\n\n    def printObjsByType(self):\n        print('Object Pool: Objects By Type')\n        print('\\n============================')\n        # print types with the smallest number of instances first, in case\n        # there's a large group that waits a long time before printing\n        #counts.reverse()\n        for count in sorted(self._count2types):\n            types = makeList(self._count2types[count])\n            for typ in types:\n                print('TYPE: %s, %s objects' % (repr(typ), len(self._type2objs[typ])))\n                print(getNumberedTypedSortedString(self._type2objs[typ]))\n\n    def printReferrers(self, numEach=3):\n        \"\"\"referrers of the first few of each type of object\"\"\"\n        for count in sorted(self._count2types, reverse=True):\n            types = makeList(self._count2types[count])\n            for typ in types:\n                print('\\n\\nTYPE: %s' % repr(typ))\n                for i in range(min(numEach, len(self._type2objs[typ]))):\n                    obj = self._type2objs[typ][i]\n                    print('\\nOBJ: %s\\n' % safeRepr(obj))\n                    referrers = gc.get_referrers(obj)\n                    print('%s REFERRERS:\\n' % len(referrers))\n                    if len(referrers) > 0:\n                        print(getNumberedTypedString(referrers, maxLen=80,\n                                                    numPrefix='REF'))\n                    else:\n                        print('<No Referrers>')\n\n    def __len__(self):\n        return len(self._objs)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/ObjectPool.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/8fef47ef_ObjectPool.json",
    "doc_id": "doc_276"
  }
}