{
  "content": "\"\"\"\n   This is the GUI for the Animation Control Panel\n\"\"\"\nfrom . import ObjectGlobals as OG\n\nimport os\nimport wx\nfrom wx.lib.embeddedimage import PyEmbeddedImage\n\n#----------------------------------------------------------------------\nFirstFrame = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACh0lE\"\n    \"QVRIie2Uz08aQRTHd368CZzYGGNjPWkTlB7EK0QSewSSamL9R+upXmpko/LLskgqhrDGyqb4\"\n    \"Y40CB3dnd6aHMYBIjSZe2vhOk/2+93nf93Z3UOvsTHvtwK9OfIP+f1CEEKUUITRWJYQQQl4A\"\n    \"RQgBpQihVqvV6/UwflBCCGGM3XY6tm33H9JhGWPMOR9xFwhhnZzs7e21bPvL+rqu60KIe3eU\"\n    \"3tzcVCqVQqHwYW5ubW0tCIIBlDFmmmbTsjLptBoEADjnjUajWCodHx/3er2JiQklqWEdxzGr\"\n    \"1R8HB7/bbU3TotHoqFOMcfv8vFarZdJpxpjruvV6vVAs1ut1z/MopQBACAEAAGi32xXTLJfL\"\n    \"l5eXGGMAUJ3Gj88Y45w3LSu/v9+0LNd1AYAxpmlaEASE0uvr659HR+Vy2XEcla9pmpRS0zQy\"\n    \"tOsBFCEkhPi2tZXP533fD4VCqqY/iue6Xzc3r66uGGPDUr98kNw/SSkJIclE4tPKiq7rnHNl\"\n    \"QYUQIhwOp5aXF+bnlfERKKUDf3RYkFJOTk5ms9n40lJuZ6d6eOh5HgDcu5AyFoslk8liqWQY\"\n    \"xsXFxcjnOQYqhPB9PwgCzvn76emNjY3FeNzI5ZrNpjKMCQmCAACSicR8NLqfz5dLpU63q9Dk\"\n    \"sVMhRCQSmZmZQQhJKTnnCKGPsdjc7KxpmoZhtGxbCIEwVr11Xc9mMvHFxZ1crlarqfzBfp++\"\n    \"+THGlNLbTmd3d/fX6enn1dV3U1O+7ysVAIQQjUbj+/Z2bGEhlUqpXT+AKpuP0WpxjuOEw+FQ\"\n    \"KDScgxACgG63e3d3F4lEnuV0uFi1HNtVXQjq99VG3v4T8Tecij7uvsczoS+KN+g/Av0D3hpG\"\n    \"5dYDHHkAAAAASUVORK5CYII=\")\n\n\n#----------------------------------------------------------------------\nPreFrame = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACQ0lE\"\n    \"QVRIieWVzW4aMRSFbV+DCHTDJlkAYZMKAek2fQHYddElu/SteA+eoNk0iPA7BBBQgtQJI6Gi\"\n    \"ZoQKM2PP2F24P2RmKFGVRauenSX707nH99r4XtfRc4s8O/G/ghKMMcaHoQAAAIdxhFBKGeeM\"\n    \"MR/XDxVCrFYr0zQP4hzH0TStVqvpuk4p3d3waAEA6/W6Wq2m0ul3l5cIISmlDwcAm81mPp83\"\n    \"m827+ZwCFAoFn9NHUEXZWpZt20F3GGPLsiaTidbvz2Yzx3EQQvFkkgSy8kPVeUJ+xQIACjcc\"\n    \"DjudziddZ4ypBIQQyshh6C4OIWSa5sfZrNVqGYZh2zal9GeCUkq19KUUDsUIUUpN0xwOh71e\"\n    \"b2EYnHNCSCQSCe5EgZYKgWKMGefvr64Gt7f3i4XnebvuQhQoP7z5CSG2ZX15ePA8T2W6D+i7\"\n    \"gL1OpZQUoFwuF4vFD9fXo9HI2m6B0lA0CZuU8KJUPelM5u3Jyavz80ajMZ1OXdf9vesDUOXX\"\n    \"c10gpFAsZk5PB4NBvV5fLpdCiF1rT70oH5ozFj86en1x8fLsrN1ud7vdz6sVAKgo1UPxpJby\"\n    \"SQghhEgmk6VSKZ/PN25u+pq2tSzFCsYRMqacc9d1g2jP8xBCqVTqzfFxsVCo1+vj8Zgx9n2u\"\n    \"9kGFEIlEolKpJOJxGeg+Jdd1CSG5XC6bzbbabcMwghOFfR8fxjgajQohOOfhWfyQyvTrZgOE\"\n    \"xGKxXW5I+er5OSghBEboRSIhpfyTi9oniZAMBIr+0o/vH4d+A5itKwKTfnzPAAAAAElFTkSu\"\n    \"QmCC\")\n\n\n#----------------------------------------------------------------------\nPreKeyFrame = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACPUlE\"\n    \"QVRIib3Vz0/aYBgH8OfHiyTGgAsciJMl6A5j7OLO4+48eHT/qjflSDPlRweNEqPGrTF2hQwW\"\n    \"gbR9nx2Yi9Ii1bE9x7b55Pu87/Ok+PXqChZdtHDxv6FEsLS0UJQZXVcdHIBSi0OJ0HXV4aHE\"\n    \"QJmZmGOgML99BCAipZTjOPVard/vE00jT2gTEYkIEV3XbZpms9HwfP/T3l4mk9FaPwdVSmmt\"\n    \"v7uuaZqmaV5fX2utX66tEbOIPC0pIjIzANi23basRqPR7XaDIGBmRAQACImPoZNmtda2bbda\"\n    \"raZpOo4zeaiUAgARYebwgUajiJhIJPzR6Jtt12u1k5OTG8f5Y90vVgrjoIQ4Ho/Pz87ax8df\"\n    \"TLM/GABAIpGIbkckVvtE9PP2dn9//8KyiFkp9fvsogoRI99Ohw+CIJ1K7e7ulsvllZWVIAim\"\n    \"xuVBIqVinakAIFE+n8/t7LwtlarVauf0dDgaRUeeMQDRt+95HiG+3tx8lc+32m2jWr24vASA\"\n    \"yfDPCj4HBQAR8X2fmd9vbW0UCs1m8/PRkXNzowH4buUnIxW+qTnDLyKe56VSqQ/l8pti0TCM\"\n    \"Rr3+o9+fuDwjeKw1DYIAAbKZzMft7WKxaBiGZVnD4XDWHcbdfZnQiBuFwvr6eqfTqVQqAhBe\"\n    \"/Blo1Hd3b8T3fSZ6Vyrlcrler7eUTIbzhlBEmLU/92jP816srqbTaREJh8UHv2hEGI9xMJBs\"\n    \"9pG8c+thUhFIJmV5GXz/2SJE/E5E/lKMQhdR/wT9BR51CSZZ1VE7AAAAAElFTkSuQmCC\")\n\n#----------------------------------------------------------------------\nPrePlay = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACV0lE\"\n    \"QVRIic2Vz1PaUBDHs5tkH9jROv4LDhUHrLXOlOml/p3+H/VYg6YJQz3UWkDDAJlob8J4AUxq\"\n    \"3tse4lBKEIV6cI9vdz7vuz/eW/h1daU9t+GzE18kFBERpxAWhAJAJpO5u7sbDodp7iJQIjIM\"\n    \"o16v7+/vtzsdk2giwJgLZxqGYZqXl5eWZf04O4ui6NPeHqTCngpFRCFEr9f76jjVarXf7wsh\"\n    \"hBBKqXTw41BEFETD21vbtstHR9fX10SUzWaZmZmllHNDiYiZz2q1Q8vyfV9HzGazIy9r2nxQ\"\n    \"0zR1XQ+CwLKsn7WaUkoQAUwWUEqpMT8O1XWdiLrdrm3b305OBoOBEMI0zSk3M7NSWuqmf6BJ\"\n    \"NwaDgeO69vFxt9dLyvdQNolSnqEUAKSU309PLcsKgkDX9dm4ETR9aIyIiFgulz8fHEgpl5eX\"\n    \"ETEtYdyS+iYjBZo2HnoPZWal1IdS6fXqarVaDYKAmWlaZyYsTpQCjLfrb/rM/Gpp6WOp9G57\"\n    \"u1GvO67rBwErNQP9pDlVSt2Goa7r73d3C8Vio9GoVCrtTkc9gAYAfuKLklJKKRFxZ2enUChc\"\n    \"eJ7rOK12W0ppEuEYmpnlXM9UKRWGISK+3drazOc9z6tUKl6z+TuOiWj03ck4ngM6jgaAYrG4\"\n    \"sbHRarVc1/WazTAMiUjTNKnUrDmdYcycqN7M59/kcu1Ox3Hd8/PzMAzjOF7867tXHUUAkMvl\"\n    \"1tfXfd//cniIACqlFBZb0QBARHEc39zcrKysTHgX3FHMHEWRUmptbS3t/a9tyszxtO6/vL3/\"\n    \"kP0BhtFQnDqk9wIAAAAASUVORK5CYII=\")\n\n#----------------------------------------------------------------------\nPlay = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACTUlE\"\n    \"QVRIidXWzU7bQBAH8JmxLW8SbglXLCchTsKFElEUu4aaHnhSnoInoBeEihoSwodEz5wKya67\"\n    \"Oz24UAiOgQhV6p5sy/r5v7OztvHH9TW896B3F/8hats2Ir4zenNzQ0Su6y5M249PENG27YOD\"\n    \"g5+3t192d33fJyKlFDMvjgIAIRrmo6Oj8/PzTqcThWGjXrcsS6WpMWZBlAFs2xZCAMDx8fFg\"\n    \"MAharTAMm82mEEJK+ZrUsygiWkQAQERCCGPMt5OTwelp0Gr1+/0gCBzHUUoVp55FAcCy/178\"\n    \"QzN/HwyGo1Gz0QijqB0EQogCOg8lmll3QnRdl5mHo9HZeNyo1/v9frfbFUKkaaq1fhlFotzC\"\n    \"4T19Nh6PLy58z4vCsLu2VhJCPk2dl9SyCjr0gb64vLy8uvI8b2trKwiCcqn0EOVp8zMDgG1Z\"\n    \"88THtBDCcZzhcLi/v//18JAeFe1J0uxBRAQAzFy8o5RSWuvV1dUkSYJWyxjzkDR/+sUxtdZK\"\n    \"qVq1Gm9vf9zcrFQqUsqimiJiAWqMkVJWKpUoDOM4rtVqSqnJZDJz27OkzEgEzybOzEopIvqw\"\n    \"vp4kied5Wuvn3Bw0L2maptoY3/d3k6Tb6SDidDqdN5s8NGup++OsfMvLy593dnq9XrlUki/t\"\n    \"0fkoIjNPp9OlpaU4jj9FUbValVJOCgMWoUQkpXRdt7exkSTJysrKrzSdV75XoQyAiHXf39vb\"\n    \"a7fbiPgmLhs484kmoru7O8dxsu576zs/P6kxplwuA0Dx+r4NzdyFuWz8Pz8TvwFpng4ClVur\"\n    \"2QAAAABJRU5ErkJggg==\")\n\n#----------------------------------------------------------------------\nNextKeyFrame = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACNUlE\"\n    \"QVRIic2Vy27aQBSGj+3xBQNRlSJlQWhwSKPUSMkQmcu+Sl8zW56AVfMCTQgLVEQSbxCELhFi\"\n    \"wcUzc7qwihQ8NiTNImdny/P5/89tlNFwCO8d6rsTPyAUEXQdCAHE7VBFUXaCmqZ2d6c9PIBh\"\n    \"bIEi4nK5VFVVVbeYQMMg9/fq4yNGoGRDI2Os2+0yziuVim3bnDGMuFv/P87+JhQBRs/PnU7H\"\n    \"9/1Go+E4jqHrnPNYtCzIxrMCYOg6IPZ6vcFgUHbdWr1+mM8DAOf8jdC1ZELIYrH4dXv75PtV\"\n    \"z6OUfs7lBOdCiFdDETFgLLQalms6nf68ufnd63med3F+nk6nhRDJaEn18eUBTdNUVR2Px61W\"\n    \"q9ls9vt9xhghJKHzJDmNRpgNRHzy/eFo5LpurVr9Ui4rMW0XsQ8QZy1Er1ardrvt+75bq32f\"\n    \"TD4dHES/lNgPGJNC12wAmM/nf8bj2WwmFSuvvjTC+pim+bVUopSeXl5mr6+5TMFO0DXupFSi\"\n    \"lJaOj9OZDLMsBUA6ErKWWq3g31oRQnDObdt2HKdRrxcKBdu2OedBEERHPklpOJGhumwmUzo5\"\n    \"oZQWj44syxJCBEGw1ZkEyjhnjNm2/e3s7ILSYrFo6LoQgiUXMBmaSqUqlHrV6mE+b1kWY2x3\"\n    \"nASKiLqu/7i6yu7tWaYZ5i7pNGJ070mgmqblcrldzRICmhZ9rbz9ilZVZTIBQjCbhZdD+Irm\"\n    \"3wwhcH8fECEy1v8BBYCYtf3R7v34+AuNHRpDa7trrwAAAABJRU5ErkJggg==\")\n\n#----------------------------------------------------------------------\nNextFrame = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACOUlE\"\n    \"QVRIidWVS2/aQBSFZ8ZjYxkTFmSBRFAgpk1CJTIgE/orq/wMJFbNAjbNLqsgxAKVh+INgrhL\"\n    \"HkK8PI8urCKCx01bsWju+vrTuef6noHj0Qgcu9DRie8dCiE8MlQIsdlsEEIIvT0EQkhV1WAn\"\n    \"PtBIKe10OpSxYrFoGAajVAghJUIIF4vFdDqNx+OxWIxzLlcKIRQAjF9eGo1GrVYbDAaMc4yx\"\n    \"1BBN03q93pe7u3a7HdG0UKUAAAiApqpAiG63OxwOP+Xzt5XKWSoFAGCMHTRzzj3P29coh+4k\"\n    \"Y4zX6/VTs/nsOGXbJoQkTk85Y/sICCFCKDjHIVQI4VHqu+ivazabfXt4+N7t2rZ9UyhEo1HO\"\n    \"eVDdfkm2L15/oCgKQsh13Xq9Xq1W+/0+pTTMaLlSaaPvhhDi2XFG43E+n78tlz9eXob9doHx\"\n    \"AQgbzUdvt9tWq+U4TqlUAkJIuXJPpdAdGwCwWq1+uK5pmkhmgnz70vL3E4lEPlgWIaRQKDw1\"\n    \"m/Tx8R+hO1zOsggh1sVF1DQxxmGbko2/3YJfscI5Z4wZhpHNZj9XKul02jAMxpjneb8JB4lS\"\n    \"/9h9dTHTtHI5Qkjm/FzXdf+Egs1vQyljlFLDMK6vrm4IyWQymqpyzmlggUIIznmQC/ffKITQ\"\n    \"crn8en+PFcUul89SKV3XaUhQIYQmk4nruslkMpFIvDrffagfffP5PHZyokcijLGw3NtxMcaM\"\n    \"sYOsgcHXVFEU6VB/XhJPgxH3t/WuX9P/FPoTFHYunoRw1IsAAAAASUVORK5CYII=\")\n\n#----------------------------------------------------------------------\nLastFrame = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAAClElE\"\n    \"QVRIie2VT0sbQRjG950/Gw8mW4QgCWxaMSdjwkq60YDmYD+A/QBiP5keq2IuHuKxxUNFqoI2\"\n    \"UuOlInahHpYkHhLdmXmnh5VNiLFS8CL4nhZm3t/zzvMsM/D76sp47iLPTnyFvkQoABDyqAYh\"\n    \"BAD+DwoA3W632WwyxiilA5u01r7vCyE454+B+iXvoZTSVru9Va1++fq10+2aphltAgAA+H5w\"\n    \"sL6xcXl5yRhjjD2Eaq0HoWHzzc1NrVZbXV09OjoytOacR2iNeHp6ura2tr297ft+LBaLvOKc\"\n    \"Hx4efl5fD+UNw+hpIiIhhHPued5WtXpycjI/P5+dnARChBBaa9M0AyG+7e01zs/nZmeLxWIi\"\n    \"kZBSEkJarZbneRGqB9WIiAgAjDGt9c+zs18XF47jVBYWkskkIhqGQQgxTbPZatV2dn7U65VK\"\n    \"JTc1xTkf8GSIO6EVpmlKKff39xuNhuu6t7e3kRWMUoNSz/M2Nzez2eyHxUWlVH9QLKIopcJx\"\n    \"en4TwhjzfX93d/eNZVFK+9NgjAkh6vX63d2dlUjQvt+x96W17u9BxCAIGGMzMzPLy8uZTEZK\"\n    \"Ga1KKYUQ4+PjH5eWPq2sJJNJqdSQ4yOi1toAQEQp5cjISCGfL5VK7yYmCMDx8XEoHKLTqZTr\"\n    \"uvl83rIsxphSKgiCYVCtpZQiCOLxuOM4ruu+zWQopUqpQIhwNM65bdvvi8VcLmdZllQqCAJE\"\n    \"TKVS07ncEKhSKmaaJdedK5cztg0AIQgAtNaolG3b5XI5Pz09OjoqhIhGk1IWCgXHcYQQ9wmF\"\n    \"zwkhpN1udzqddDodhjbg75/r67GxsUQ8LqUcyPNhQfRGEUIIIQO43okYQ8QncQ88/WdPf/RP\"\n    \"1ku8pF+hz1V/AVdHWFTfbzsRAAAAAElFTkSuQmCC\")\n\n#----------------------------------------------------------------------\nKey = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACl0lE\"\n    \"QVRIie2Uv0sbYRjH3x+X9/JGk9wlYkg6icbJMf0LHCxo/QuKUCfR0TFqB/dKHSztYKHBYHCp\"\n    \"kIIFqZM6ODho3Y2tQ44EMRffu3tz79vhlcNGC5I4+h2/L3yen+8Df19cgKcWenLiM7RbKITw\"\n    \"vql1g6OUAikhQowxIUTw1GGmEEKdkEKh8GZq6v3KCgAAY9wttKen58Pqan5hwTCMcrm8sLhI\"\n    \"COkKSgg5Ozv79PlzcWPjy/r6j50du9HY3d2llHYO1XV9s1R6NTY2OjpqWRbGeG5u7uDwMGjr\"\n    \"LRRCiB4tz/N+nZ6OT0y4rgsAcBwnm82GNK1WqyGEQDB9IYTv+wAAhBDGmHOuaZqUUpl3hRBq\"\n    \"NBp2szk0OOh5HgBASkkpTSSTVcsyTVMIoakeHR8fb5ZKGsYN2242m5l0ulqtYozNROLurqia\"\n    \"GGPX19eGYUgplSmljEQiruOotdUAAJzz4eHh+fl5Sun3cvnn3t7y8nI+n0/29c3MzDRtuz1T\"\n    \"256dnXUcJxKJBJG45yGEVBhNxSGE6LpOKTUMIxqNJpPJWCwWi8USpklCoTZoPB4nhPy5vOzv\"\n    \"71f98X2/Vq8bhqHKQkH+QgghBOfccRwhhOu6nucFfiDf9ymlqVTqYH8/HA4DADDGlmVdXV2l\"\n    \"Uql/oEq+72cymZe5HGNsZGQkOzTEOW8blCpwYnz8a6FQr9ej0ahpmltbWy8ymd7eXvUK2y4/\"\n    \"xhhj7LouIURKyTm/fzIQQhDC15OTmqa9W1o6Ojr6tr1dLBaNeLzVaj0AfaR0Xa9UKm+np09O\"\n    \"TgYGBj6ureVyOcbY7dw6g0opw+Fw8+amcn6eTqdN02SMBTV1CFVCCIVCoVar1fZHOr+nAAC1\"\n    \"JA8E6wb6Pz1Dn15/AQsQSZkYzgBNAAAAAElFTkSuQmCC\")\n\n#----------------------------------------------------------------------\nStop = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAAAvklE\"\n    \"QVRIie3VMQ6DMAwF0G9CEUxMzAwch4NwCEbuxyXoygiBkMQd2KoUM7Cg4tFSnixZ/qH3MODq\"\n    \"ii4XHzQO9IiQpvJTIlgLY06gRFgW3/dwDkRHqHMoiqiq4L2ExjGPo+k6TBOUOkK1VnUdtS2M\"\n    \"AfMhug+bZfBeQAEkSbB9n+0/6IPeAQ2dKTO0htbi7QcjKoQ6hzx/NQ22TUgpa6ksYe1XmgCg\"\n    \"wMe3B4pYe56u64lJATBjnmX0d91n+3+OfgDGM0GplgNFhQAAAABJRU5ErkJggg==\")\n#----------------------------------------------------------------------\nDeleteKey = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAAEXUlE\"\n    \"QVRIibWWX0hUWRzHf+ece4/3TjPjvTMOrqM+lH9KmQhEszCC2OifLRRF+LKwb8X66Eug0UOP\"\n    \"Cz22+7JIGwxmEGmTWUahkhapLQSbwQZFm6iDOubM3DPn3nvOPozT6jhKQft7u/f+zuf3O7/v\"\n    \"+f3ORf98+ADf2vA3JxaC4q8Mg9DGJeufpUSWBYryxSlhcBy0spLHXQ9VFOXxY/z2LWjal+Qo\"\n    \"CaGxGI7HgZDNoQDOwYPqyAianQVV3ZopNY0+eCBDIXfXLrDtzaGuK02THztGYzFIp/PiryPq\"\n    \"Oh0f34ax0tq6jRC81fYBgHNRWens30/v3AEorJvUNPXNG/39+98TiR/b2q5evQoAZE0GBdYg\"\n    \"xpxIRFRV0f5+qaqA0LrPqorn5oqnpn55966zq8vw+WL37nVdukQp3QoKAMiy7JYW6fHQoSG5\"\n    \"VjRCgDHfw4d/VlT81tMTvX69u7v7weBgcmXl0aNHuq5vBc3my48eRcvLyvPnMuuNEGBM+/pw\"\n    \"S0t0bOz4oUPfHz4cj8cJIe3t7WPj40KIdVCEEM4zhLAQzqlT6vS0Oj0Nug6aVjQ4iCoqUvX1\"\n    \"f01Otp48mclkAIAxVlNToyrKwsJCVrFVqBCCc845dxxHSsk5F0II2+aOk2xtxcPD7uwsfvbM\"\n    \"tizrwIHEx4/JVKq6qopzDgBSSk3TAsHgfDyelUsBAErpy5cve27eVAhZSSZTqVS4rGx+fp4Q\"\n    \"YgYCLsZFyeQPg4NzlD7dvh2mpqx0+tOnT4ZhSClXz4OUHo8nwxhCaBVq23ZtbW1HR4eu6/di\"\n    \"scdPnly5cqWzszNYUnLh/Pkk57C0FIhGeSjUdOYMwXhlefnn9nbGmMfj+Vw9m3OMcTYMzsah\"\n    \"lAZMM2CahmH4fL5gMOj3+/1+fyAUCup6eHQULlzQmpu/GxkxQqGKykpK6ceZGSU3JVzXXVhc\"\n    \"NAwjqxX+nL8Q2TLajDEhRCaT4bYtAZTbtzMNDSIUshsaXK8XDwxohlFaWjr29KmmaQBACInH\"\n    \"44lEorS0dB30c8BwONzU2GhZViQSqY5E0N27orzc2bMHGEOM8SNHUCqljI+3nj37x40bi4uL\"\n    \"Pp/PNM1bt26Vh8Nerze7fZQ3+QkhhJBMJkOLi8noqDszw0+fRozlegUDgNbbK5qaTly8qNj2\"\n    \"5cuXX7x4caevLxqNGsXFjuMUgK5Wo6hIef1amZxkbW1ICMipvNpUluXv6/u7vv6nrq5XExPb\"\n    \"d+z49dq1xsZGy7JWdSsAVVU0N0cHBjLnzoGug+sWcJif9w4NJU6ceL+0VFZSYpqmZVkoNyU2\"\n    \"tCkhkE7T+/f58ePS6y1ABADbFmVlqX37vAMDddXVXr+f5U5oIShCAED7+53mZlFejjgvQMw6\"\n    \"Mubu3GnX1cneXjfX8ptAVVUdHhaVlc7u3f+JsxnXsuy9e2VJiTIxAWvmHuTXFCG0vCwNAzYE\"\n    \"39QwRum01PW1Yubfpl9HBAAh8ogboABfR8ylkvfif/lD+Rcv7QbV/D7nwgAAAABJRU5ErkJg\"\n    \"gg==\")\n\nclass TimeSlider(wx.Window):\n    \"\"\"\n    This is the Time Slider Panel.\n    \"\"\"\n    def __init__(self, parent, slidersize, sliderStartFrame, sliderEndFrame, curFrame):\n        wx.Window.__init__(self, parent, size = slidersize, style = wx.SUNKEN_BORDER)\n\n        self._mainDialog = wx.GetTopLevelParent(self)\n        self._mouseIn = False\n        self.points = []\n        self.numbers = []\n\n        self.curFrame = curFrame\n        self.sliderStartFrame = sliderStartFrame\n        self.sliderEndFrame = sliderEndFrame\n        self.frameNum = self.sliderEndFrame-self.sliderStartFrame+1\n\n        self.InitBuffer()\n\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)\n        self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)\n        self.Bind(wx.EVT_MOTION, self.OnMotion)\n\n    def InitBuffer(self):\n        self.w,self.h = self.GetClientSize()\n        self.buffer = wx.EmptyBitmap(self.w, self.h)\n        dc = wx.BufferedDC(wx.ClientDC(self), self.buffer)\n        self.DrawTimeSlider(dc)\n        self.DrawNumber(dc)\n        self.DrawFrame(dc)\n        self.DrawKeys(dc)\n\n    def SetTimeSliderData(self, sliderStartFrame = 1, sliderEndFrame = 24, curFrame = 0):\n        self.curFrame = curFrame\n        self.sliderStartFrame = sliderStartFrame\n        self.sliderEndFrame = sliderEndFrame\n        self.frameNum = self.sliderEndFrame-self.sliderStartFrame+1\n\n        self.points = []\n        self.numbers = []\n\n        self.InitBuffer()\n        self.Refresh()\n\n    def OnPaint(self, evt):\n        dc = wx.BufferedPaintDC(self, self.buffer)\n\n    def DrawTimeSlider(self,dc):\n\n        dc.SetBackground(wx.Brush(self.GetBackgroundColour()))\n        dc.Clear()\n\n        dc.SetPen(wx.BLACK_PEN)\n        dc.SetBrush(wx.BLACK_BRUSH)\n        dc.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))\n\n        self.unitWidth = self.w/float(self.frameNum)\n\n        if self.frameNum <= 20:\n\n            self.points.append(((float(0),self.h),(float(0),self.h-15)))\n\n            for i in range(1,self.frameNum):\n                temp = self.points[i-1][0][0]+self.unitWidth\n                self.points.append(((temp,self.h),(temp,self.h-15)))\n\n            for i in range(self.frameNum):\n                self.numbers.append(self.sliderStartFrame+i)\n\n            for i in range(self.frameNum):\n                dc.DrawLine(self.points[i][0][0], self.points[i][0][1], self.points[i][1][0], self.points[i][1][1])\n                st = str(self.numbers[i])\n                tw,th = dc.GetTextExtent(st)\n                dc.DrawText(st, self.points[i][0][0]+2, 0.5)\n\n        elif self.frameNum <= 70:\n\n            self.points.append(((self.unitWidth,self.h),(self.unitWidth,self.h-15)))\n\n            for i in range(1,int((self.frameNum+1)/2)):\n                temp = self.points[i-1][0][0]+2*self.unitWidth\n                self.points.append(((temp,self.h),(temp,self.h-15)))\n\n            for i in range(1,self.frameNum/2+1):\n                self.numbers.append(self.sliderStartFrame-1+i*2)\n\n            for i in range(int((self.frameNum+1)/2)):\n                dc.DrawLine(self.points[i][0][0], self.points[i][0][1], self.points[i][1][0], self.points[i][1][1])\n\n            for i in range(self.frameNum/2):\n                st = str(self.numbers[i])\n                tw,th = dc.GetTextExtent(st)\n                dc.DrawText(st, self.points[i][0][0]+2, 0.5)\n\n        elif self.frameNum <= 150:\n\n            self.points.append(((self.unitWidth*4.0,self.h),(self.unitWidth*4.0,self.h-15)))\n\n            for i in range(1,int(self.frameNum/5)):\n                temp = self.points[i-1][0][0]+5*self.unitWidth\n                self.points.append(((temp,self.h),(temp,self.h-15)))\n\n            for i in range(1,self.frameNum/5+1):\n                self.numbers.append(self.sliderStartFrame-1+i*5)\n\n            for i in range(int(self.frameNum/5)):\n                dc.DrawLine(self.points[i][0][0], self.points[i][0][1], self.points[i][1][0], self.points[i][1][1])\n\n            for i in range(self.frameNum/5):\n                st = str(self.numbers[i])\n                tw,th = dc.GetTextExtent(st)\n                dc.DrawText(st, self.points[i][0][0]+2, 0.5)\n\n        elif self.frameNum <= 250:\n\n            self.points.append(((self.unitWidth*9.0,self.h),(self.unitWidth*9.0,self.h-15)))\n\n            for i in range(1,int(self.frameNum/10)):\n                temp = self.points[i-1][0][0]+10*self.unitWidth\n                self.points.append(((temp,self.h),(temp,self.h-15)))\n\n            for i in range(1,self.frameNum/10+1):\n                self.numbers.append(self.sliderStartFrame+i*10)\n\n            for i in range(int(self.frameNum/10)):\n                dc.DrawLine(self.points[i][0][0], self.points[i][0][1], self.points[i][1][0], self.points[i][1][1])\n\n            for i in range(self.frameNum/10):\n                st = str(self.numbers[i])\n                tw,th = dc.GetTextExtent(st)\n                dc.DrawText(st, self.points[i][0][0]+2, 0.5)\n\n        elif self.frameNum <= 1000:\n\n            self.points.append(((self.unitWidth*49.0,self.h),(self.unitWidth*49.0,self.h-15)))\n\n            for i in range(1,int(self.frameNum/50)):\n                temp = self.points[i-1][0][0]+50*self.unitWidth\n                self.points.append(((temp,self.h),(temp,self.h-15)))\n\n            for i in range(1,self.frameNum/50+1):\n                self.numbers.append(self.sliderStartFrame-1+i*50)\n\n            for i in range(int(self.frameNum/50)):\n                dc.DrawLine(self.points[i][0][0], self.points[i][0][1], self.points[i][1][0], self.points[i][1][1])\n\n            for i in range(self.frameNum/50):\n                st = str(self.numbers[i])\n                tw,th = dc.GetTextExtent(st)\n                dc.DrawText(st, self.points[i][0][0]+2, 0.5)\n\n        elif self.frameNum <= 2000:\n\n            self.points.append(((self.unitWidth*99.0,self.h),(self.unitWidth*99.0,self.h-15)))\n\n            for i in range(1,int(self.frameNum/100)):\n                temp = self.points[i-1][0][0]+100*self.unitWidth\n                self.points.append(((temp,self.h),(temp,self.h-15)))\n\n            for i in range(1,self.frameNum/100+1):\n                self.numbers.append(self.sliderStartFrame-1+i*100)\n\n            for i in range(int(self.frameNum/100)):\n                dc.DrawLine(self.points[i][0][0], self.points[i][0][1], self.points[i][1][0], self.points[i][1][1])\n\n            for i in range(self.frameNum/100):\n                st = str(self.numbers[i])\n                tw,th = dc.GetTextExtent(st)\n                dc.DrawText(st, self.points[i][0][0]+2, 0.5)\n\n        elif self.frameNum <= 10000:\n\n            self.points.append(((self.unitWidth*999.0,self.h),(self.unitWidth*999.0,self.h-15)))\n\n            for i in range(1,int(self.frameNum/1000)):\n                temp = self.points[i-1][0][0]+1000*self.unitWidth\n                self.points.append(((temp,self.h),(temp,self.h-15)))\n\n            for i in range(1,self.frameNum/1000+1):\n                self.numbers.append(self.sliderStartFrame-1+i*1000)\n\n            for i in range(int(self.frameNum/1000)):\n                dc.DrawLine(self.points[i][0][0], self.points[i][0][1], self.points[i][1][0], self.points[i][1][1])\n\n            for i in range(self.frameNum/1000):\n                st = str(self.numbers[i])\n                tw,th = dc.GetTextExtent(st)\n                dc.DrawText(st, self.points[i][0][0]+2, 0.5)\n\n        else:\n            pass\n\n\n    def DrawNumber(self, dc):\n        dc.SetPen(wx.BLACK_PEN)\n        dc.SetBrush(wx.BLACK_BRUSH)\n        dc.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))\n\n        i = self.curFrame-self.sliderStartFrame\n        st = str(self.curFrame)\n        tw,th = dc.GetTextExtent(st)\n        dc.DrawText(st, float(self.unitWidth)*float(i)+2, self.h-th-0.5)\n\n    def DrawFrame(self, dc):\n        i = self.curFrame-self.sliderStartFrame\n        pos = float(self.unitWidth)*float(i)\n        self.curRect = wx.Rect(pos, float(0), self.unitWidth, self.h)\n\n        oldPen, oldBrush, oldMode = dc.GetPen(), dc.GetBrush(), dc.GetLogicalFunction()\n\n        gray = wx.Colour(200, 200, 200)\n        grayPen = wx.Pen(gray)\n        grayBrush = wx.Brush(gray)\n        dc.SetPen(grayPen)\n        dc.SetBrush(grayBrush)\n        dc.SetLogicalFunction(wx.XOR)\n        dc.DrawRectangleRect(self.curRect)\n\n        dc.SetPen(oldPen)\n        dc.SetBrush(oldBrush)\n        dc.SetLogicalFunction(oldMode)\n\n    def DrawKeys(self, dc):\n        if len(self._mainDialog.keys) != 0:\n            for key in self._mainDialog.keys:\n                keyFrame = key\n                i = keyFrame-self.sliderStartFrame\n                pos = float(self.unitWidth)*float(i)\n\n                oldPen, oldBrush, oldMode = dc.GetPen(), dc.GetBrush(), dc.GetLogicalFunction()\n\n                dc.SetPen(wx.Pen(\"red\"))\n                dc.SetBrush(wx.Brush(\"red\"))\n                dc.SetLogicalFunction(wx.AND)\n                dc.DrawLine(pos, float(0), pos, self.h)\n\n                dc.SetPen(oldPen)\n                dc.SetBrush(oldBrush)\n                dc.SetLogicalFunction(oldMode)\n        else:\n            pass\n\n    def OnSize(self, evt):\n        self.InitBuffer()\n\n    def OnLeftDown(self, evt):\n        point = (evt.GetX(), evt.GetY())\n\n        if point[1]>= float(0) and point[1]<= (float(self.h)-2.0):\n            if point[0]>= float(0) and point[0]<= float(self.w):\n                self._mouseIn = True\n\n        if self._mouseIn:\n            self.CaptureMouse()\n            self.curFrame = int(float(point[0])/self.unitWidth)+self.sliderStartFrame\n            self._mainDialog.curFrame = self.curFrame\n            self._mainDialog.curFrameSpin.SetValue(self.curFrame)\n            self._mainDialog.OnAnimation(self.curFrame)\n            self.SetTimeSliderData(self.sliderStartFrame, self.sliderEndFrame, self.curFrame)\n\n    def OnLeftUp(self, evt):\n        if self.GetCapture():\n            self.ReleaseMouse()\n            self._mouseIn = False\n\n    def OnMotion(self, evt):\n        self._mouseIn = False\n        if evt.Dragging() and evt.LeftIsDown():\n            point = (evt.GetX(), evt.GetY())\n            if point[1]>= float(0) and point[1]<= (float(self.h)-2.0):\n                if point[0]>= float(0) and point[0]<= float(self.w):\n                    self._mouseIn = True\n\n            if self._mouseIn:\n                self.curFrame = int(float(point[0])/self.unitWidth)+self.sliderStartFrame\n                self._mainDialog.curFrame = self.curFrame\n                self._mainDialog.curFrameSpin.SetValue(self.curFrame)\n                self._mainDialog.OnAnimation(self.curFrame)\n                self.SetTimeSliderData(self.sliderStartFrame, self.sliderEndFrame, self.curFrame)\n\n        evt.Skip()\n        self._mouseIn = False\n\nclass TimeRange(wx.Window):\n    \"\"\"\n    This is the Time Range Panel.\n    \"\"\"\n    def __init__(self, parent, rangesize, startFrame, endFrame, sliderStartFrame, sliderEndFrame):\n        wx.Window.__init__(self, parent, size = rangesize, style = wx.SUNKEN_BORDER)\n\n        self._mainDialog = wx.GetTopLevelParent(self)\n\n        self._mouseIn = False\n\n        self.startFrame = startFrame\n        self.endFrame = endFrame\n        self.sliderStartFrame = sliderStartFrame\n        self.sliderEndFrame = sliderEndFrame\n        self.frameNum = self.endFrame-self.startFrame+1\n\n        self.InitBuffer()\n\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)\n        self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)\n        self.Bind(wx.EVT_MOTION, self.OnMotion)\n\n    def InitBuffer(self):\n        self.w,self.h = self.GetClientSize()\n        self.buffer = wx.EmptyBitmap(self.w, self.h)\n        dc = wx.BufferedDC(wx.ClientDC(self), self.buffer)\n        self.DrawTimeRange(dc)\n\n    def SetTimeRangeData(self, startFrame = 1, endFrame = 24, sliderStartFrame = 1, sliderEndFrame = 24):\n        self.startFrame = startFrame\n        self.endFrame = endFrame\n        self.sliderStartFrame = sliderStartFrame\n        self.sliderEndFrame = sliderEndFrame\n        self.frameNum = self.endFrame-self.startFrame+1\n\n        self.InitBuffer()\n        self.Refresh()\n\n    def OnPaint(self, evt):\n        dc = wx.BufferedPaintDC(self, self.buffer)\n\n    def DrawTimeRange(self,dc):\n        dc.SetBackground(wx.Brush(wx.Colour(150, 150, 150)))\n        dc.Clear()\n\n        dc.SetPen(wx.Pen(self.GetBackgroundColour()))\n        dc.SetBrush(wx.Brush(self.GetBackgroundColour()))\n\n        self.unitWidth = (self.w-6.0)/float(self.frameNum)\n        self.rangePosX = 3.0+(float(self.sliderStartFrame-self.startFrame))*self.unitWidth\n        self.rangePosY = 2.0\n        self.rangeWidth = float(self.sliderEndFrame-self.sliderStartFrame+1)*self.unitWidth\n        self.rangeHeight = self.h-4.0\n        self.curRect = wx.Rect(self.rangePosX, self.rangePosY, self.rangeWidth, self.rangeHeight)\n\n        dc.DrawRoundedRectangleRect(self.curRect, radius = 2)\n\n    def OnSize(self, evt):\n        self.InitBuffer()\n\n    def OnLeftDown(self, evt):\n        point = (evt.GetX(), evt.GetY())\n        self.pos = 0\n\n        if point[1]>= self.rangePosY and point[1]<= self.rangePosY+self.rangeHeight:\n            if point[0]>= self.rangePosX and point[0]<= self.rangePosX+self.rangeWidth:\n                self._mouseIn = True\n\n        if self._mouseIn:\n            self.CaptureMouse()\n            self.pos = point\n\n    def OnLeftUp(self, evt):\n        if self.GetCapture():\n            self.ReleaseMouse()\n            self._mouseIn = False\n\n    def OnMotion(self, evt):\n        self._mouseIn = False\n        if evt.Dragging() and evt.LeftIsDown():\n            newPos = (evt.GetX(), evt.GetY())\n            if newPos[1]>= self.rangePosY and newPos[1]<= self.rangePosY+self.rangeHeight:\n                if newPos[0]>= self.rangePosX and newPos[0]<= self.rangePosX+self.rangeWidth:\n                    self._mouseIn = True\n\n            if self._mouseIn:\n                if newPos[0] == self.pos[0]:\n                    evt.Skip()\n                    self._mouseIn = False\n                if newPos[0] > self.pos[0]:\n                    if float(newPos[0]-self.pos[0]) >= self.unitWidth:\n                        if self.sliderEndFrame < self.endFrame:\n                            self.sliderStartFrame += 1\n                            self.sliderEndFrame += 1\n                            self.SetTimeRangeData(self.startFrame, self.endFrame, self.sliderStartFrame, self.sliderEndFrame)\n                            self.MainPanelUpdate()\n                            self.pos = newPos\n                            evt.Skip()\n                            self._mouseIn = False\n                if newPos[0] < self.pos[0]:\n                    if float(self.pos[0]-newPos[0]) >= self.unitWidth:\n                        if self.sliderStartFrame > self.startFrame:\n                            self.sliderStartFrame -=1\n                            self.sliderEndFrame -=1\n                            self.SetTimeRangeData(self.startFrame, self.endFrame, self.sliderStartFrame, self.sliderEndFrame)\n                            self.MainPanelUpdate()\n                            self.pos = newPos\n                            evt.Skip()\n                            self._mouseIn = False\n        evt.Skip()\n        self._mouseIn = False\n\n    def MainPanelUpdate(self):\n        self._mainDialog.sliderStartFrame = self.sliderStartFrame\n        self._mainDialog.sliderEndFrame = self.sliderEndFrame\n        self._mainDialog.timeSliderStartSpin.SetValue(self.sliderStartFrame)\n        self._mainDialog.timeSliderEndSpin.SetValue(self.sliderEndFrame)\n        self._mainDialog.timeSlider.SetTimeSliderData(self._mainDialog.sliderStartFrame, self._mainDialog.sliderEndFrame, self._mainDialog.curFrame)\n\n\nclass AnimControlUI(wx.Dialog):\n    \"\"\"\n    This is the Animation Control main class implementation.\n    \"\"\"\n    def __init__(self, parent, editor):\n        wx.Dialog.__init__(self, parent, id=wx.ID_ANY, title=\"Animation Controller\",\n                           pos=wx.DefaultPosition, size=(920, 110))\n\n        self.editor = editor\n        self._initOver = False\n\n        self.parallel = []\n        if self.editor.animMgr.keyFramesInfo != []:\n            self.editor.animMgr.generateKeyFrames()\n        self.keys = self.editor.animMgr.keyFrames\n        self.editor.objectMgr.findActors(render)\n        self.editor.objectMgr.findNodes(render)\n\n        self.prePlay = False\n        self.play = False\n        self.stop = True\n\n        self.curFrame = 1\n        self.startFrame = 1\n        self.sliderStartFrame = 1\n        self.endFrame = 24\n        self.sliderEndFrame = 24\n\n        self.mainPanel1 = wx.Panel(self, -1)\n\n        self.timeSlider = TimeSlider(self.mainPanel1, wx.Size(560, 35), self.sliderStartFrame, self.sliderEndFrame, self.curFrame)\n        self.curFrameSpin = wx.SpinCtrl(self.mainPanel1, -1, \"\",size = (70,25), min=self.startFrame, max=self.endFrame)\n\n        bmpFirstFrame = FirstFrame.GetBitmap()\n        bmpPreFrame = PreFrame.GetBitmap()\n        bmpPreKeyFrame = PreKeyFrame.GetBitmap()\n        self.bmpPrePlay = PrePlay.GetBitmap()\n        self.bmpPlay = Play.GetBitmap()\n        bmpNextKeyFrame = NextKeyFrame.GetBitmap()\n        bmpNextFrame = NextFrame.GetBitmap()\n        bmpLastFrame = LastFrame.GetBitmap()\n        bmpKey = Key.GetBitmap()\n        self.bmpStop = Stop.GetBitmap()\n        bmpDeleteKey = DeleteKey.GetBitmap()\n\n        self.buttonFirstFrame = wx.BitmapButton(self.mainPanel1, -1, bmpFirstFrame, size = (30,30), style = wx.BU_AUTODRAW)\n        self.buttonPreFrame = wx.BitmapButton(self.mainPanel1, -1, bmpPreFrame, size = (30,30), style = wx.BU_AUTODRAW)\n        self.buttonPreKeyFrame = wx.BitmapButton(self.mainPanel1, -1, bmpPreKeyFrame, size = (30,30), style = wx.BU_AUTODRAW)\n        self.buttonPrePlay = wx.BitmapButton(self.mainPanel1, -1, self.bmpPrePlay, size = (30,30), style = wx.BU_AUTODRAW)\n        self.buttonPlay = wx.BitmapButton(self.mainPanel1, -1, self.bmpPlay, size = (30,30), style = wx.BU_AUTODRAW)\n        self.buttonNextKeyFrame = wx.BitmapButton(self.mainPanel1, -1, bmpNextKeyFrame, size = (30,30), style = wx.BU_AUTODRAW)\n        self.buttonNextFrame = wx.BitmapButton(self.mainPanel1, -1, bmpNextFrame, size = (30,30), style = wx.BU_AUTODRAW)\n        self.buttonLastFrame = wx.BitmapButton(self.mainPanel1, -1, bmpLastFrame, size = (30,30), style = wx.BU_AUTODRAW)\n\n        self.mainPanel2 = wx.Panel(self, -1)\n\n        self.timeStartSpin = wx.SpinCtrl(self.mainPanel2, -1, \"\",size = (70,25), min=0, max=self.sliderEndFrame)\n        self.timeSliderStartSpin = wx.SpinCtrl(self.mainPanel2, -1, \"\",size = (70,25), min=self.startFrame, max=self.sliderEndFrame)\n        self.timeRange = TimeRange(self.mainPanel2, wx.Size(450, 25), self.startFrame, self.endFrame, self.sliderStartFrame, self.sliderEndFrame)\n        self.timeSliderEndSpin = wx.SpinCtrl(self.mainPanel2, -1, \"\",size = (70,25), min=self.sliderStartFrame, max=self.endFrame)\n        self.timeEndSpin = wx.SpinCtrl(self.mainPanel2, -1, \"\",size = (70,25), min=self.sliderStartFrame, max=10000)\n        self.buttonDeleteKey = wx.BitmapButton(self.mainPanel2, -1, bmpDeleteKey, size = (30,30), style = wx.BU_AUTODRAW)\n\n        self.SetProperties()\n        self.DoLayout()\n\n        self.Bind(wx.EVT_SPINCTRL, self.OnCurrentTime, self.curFrameSpin)\n\n        self.Bind(wx.EVT_BUTTON, self.OnFirstFrame, self.buttonFirstFrame)\n        self.Bind(wx.EVT_BUTTON, self.OnPreFrame, self.buttonPreFrame)\n        self.Bind(wx.EVT_BUTTON, self.OnPreKeyFrame, self.buttonPreKeyFrame)\n        self.Bind(wx.EVT_BUTTON, self.OnPrePlay, self.buttonPrePlay)\n        self.Bind(wx.EVT_BUTTON, self.OnPlay, self.buttonPlay)\n        self.Bind(wx.EVT_BUTTON, self.OnNextKeyFrame, self.buttonNextKeyFrame)\n        self.Bind(wx.EVT_BUTTON, self.OnNextFrame, self.buttonNextFrame)\n        self.Bind(wx.EVT_BUTTON, self.OnLastFrame, self.buttonLastFrame)\n\n        self.Bind(wx.EVT_SPINCTRL, self.OnTimeStartSpin, self.timeStartSpin)\n        self.Bind(wx.EVT_SPINCTRL, self.OnTimeSliderStartSpin, self.timeSliderStartSpin)\n        self.Bind(wx.EVT_SPINCTRL, self.OnTimeSliderEndSpin, self.timeSliderEndSpin)\n        self.Bind(wx.EVT_SPINCTRL, self.OnTimeEndSpin, self.timeEndSpin)\n\n        self.Bind(wx.EVT_BUTTON, self.OnDeleteKey, self.buttonDeleteKey)\n\n        self.Bind(wx.EVT_CLOSE, self.OnExit)\n\n        self.OnPropKey()\n        self.OnAnimation(self.curFrame)\n\n        self.timeUnit = float(1)/float(24)*float(1000)\n        self.timer = wx.Timer(self)\n        self.Bind(wx.EVT_TIMER, self.OnTimer, self.timer)\n\n        self._initOver = True\n\n    def SetProperties(self):\n        self.curFrameSpin.SetValue(self.curFrame)\n        self.timeStartSpin.SetValue(self.startFrame)\n        self.timeSliderStartSpin.SetValue(self.sliderStartFrame)\n        self.timeSliderEndSpin.SetValue(self.sliderEndFrame)\n        self.timeEndSpin.SetValue(self.endFrame)\n\n    def DoLayout(self):\n        dialogSizer = wx.BoxSizer(wx.VERTICAL)\n        mainSizer1 = wx.FlexGridSizer(1, 10, 0, 0)\n        mainSizer2 = wx.FlexGridSizer(1, 6, 0, 0)\n\n        mainSizer1.Add(self.timeSlider, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)\n        mainSizer1.Add(self.curFrameSpin, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 3)\n\n        mainSizer1.Add(self.buttonFirstFrame, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 3)\n        mainSizer1.Add(self.buttonPreFrame, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 3)\n        mainSizer1.Add(self.buttonPreKeyFrame, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 3)\n        mainSizer1.Add(self.buttonPrePlay, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 3)\n        mainSizer1.Add(self.buttonPlay, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 3)\n        mainSizer1.Add(self.buttonNextKeyFrame, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 3)\n        mainSizer1.Add(self.buttonNextFrame, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 3)\n        mainSizer1.Add(self.buttonLastFrame, 0, wx.ALIGN_CENTER_VERTICAL)\n\n        mainSizer2.Add(self.timeStartSpin, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 5)\n        mainSizer2.Add(self.timeSliderStartSpin, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 5)\n        mainSizer2.Add(self.timeRange, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 5)\n        mainSizer2.Add(self.timeSliderEndSpin, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 5)\n        mainSizer2.Add(self.timeEndSpin, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 5)\n        mainSizer2.Add(self.buttonDeleteKey, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 3)\n\n        self.mainPanel1.SetSizerAndFit(mainSizer1)\n        self.mainPanel2.SetSizerAndFit(mainSizer2)\n\n        dialogSizer.Add(self.mainPanel1, 1, wx.ALIGN_CENTER_VERTICAL|wx.TOP, 5)\n        dialogSizer.Add(self.mainPanel2, 1, wx.ALIGN_CENTER_VERTICAL|wx.TOP, 7)\n\n        self.SetSizer(dialogSizer)\n        self.Layout()\n\n        self.dialogSizer = dialogSizer\n\n    def OnCurrentTime(self, evt):\n        self.curFrame = evt.GetInt()\n        self.timeSlider.SetTimeSliderData(self.sliderStartFrame, self.sliderEndFrame, self.curFrame)\n        self.OnAnimation(self.curFrame)\n\n    def OnControl(self):\n        self.curFrameSpin.SetValue(self.curFrame)\n        self.timeSlider.SetTimeSliderData(self.sliderStartFrame, self.sliderEndFrame, self.curFrame)\n        self.OnAnimation(self.curFrame)\n\n    def OnFirstFrame(self, evt):\n        self.curFrame = self.sliderStartFrame\n        self.OnControl()\n\n    def OnPreFrame(self, evt):\n        if self.curFrame-1 >= self.startFrame:\n            self.curFrame -= 1\n            self.OnControl()\n        else:\n            evt.Skip()\n\n    def sortKey(self):\n        for i in range(0, len(self.keys)-1):\n            for j in range(i+1, len(self.keys)):\n                if self.keys[i]>self.keys[j]:\n                    temp = self.keys[i]\n                    self.keys[i] = self.keys[j]\n                    self.keys[j] = temp\n\n    def OnPreKeyFrame(self, evt):\n        self.sortKey()\n        if self.curFrame <= self.keys[0] or self.curFrame > self.keys[len(self.keys)-1]:\n            self.curFrame = self.keys[len(self.keys)-1]\n        else:\n            for i in range(1, len(self.keys)):\n                if self.curFrame <= self.keys[i] and self.curFrame > self.keys[i-1]:\n                    self.curFrame = self.keys[i-1]\n                    break\n        self.OnControl()\n\n    def OnTimer(self, evt):\n        if self.prePlay is True and self.stop is False and self.play is False:\n            if self.curFrame-1>=self.sliderStartFrame:\n                self.curFrame -= 1\n                self.OnControl()\n            elif self.curFrame == self.sliderStartFrame:\n                self.curFrame = self.sliderEndFrame\n                self.OnControl()\n\n        if self.play is True and self.stop is False and self.prePlay is False:\n            if self.curFrame+1<=self.sliderEndFrame:\n                self.curFrame += 1\n                self.OnControl()\n            elif self.curFrame == self.sliderEndFrame:\n                self.curFrame = self.sliderStartFrame\n                self.OnControl()\n\n    def OnPrePlay(self, evt):\n        if self.prePlay is False and self.stop is True and self.play is False:\n            self.buttonPrePlay = wx.BitmapButton(self.mainPanel1, -1, self.bmpStop, size = (30,30), style = wx.BU_AUTODRAW)\n            self.DoLayout()\n            self.prePlay = True\n            self.stop = False\n            self.timer.Start(self.timeUnit)\n            evt.Skip()\n\n        elif self.prePlay is True and self.stop is False and self.play is False:\n            self.buttonPrePlay = wx.BitmapButton(self.mainPanel1, -1, self.bmpPrePlay, size = (30,30), style = wx.BU_AUTODRAW)\n            self.DoLayout()\n            self.prePlay = False\n            self.stop = True\n            self.timer.Stop()\n            evt.Skip()\n        else:\n            evt.Skip()\n\n    def OnPlay(self, evt):\n        if self.play is False and self.stop is True and self.prePlay is False:\n            self.buttonPlay = wx.BitmapButton(self.mainPanel1, -1, self.bmpStop, size = (30,30), style = wx.BU_AUTODRAW)\n            self.DoLayout()\n            self.play = True\n            self.stop = False\n            self.timer.Start(self.timeUnit)\n            evt.Skip()\n\n        elif self.play is True and self.stop is False and self.prePlay is False:\n            self.buttonPlay = wx.BitmapButton(self.mainPanel1, -1, self.bmpPlay, size = (30,30), style = wx.BU_AUTODRAW)\n            self.DoLayout()\n            self.play = False\n            self.stop = True\n            self.timer.Stop()\n            evt.Skip()\n        else:\n            evt.Skip()\n\n    def OnNextKeyFrame(self, evt):\n        self.sortKey()\n        if self.curFrame < self.keys[0] or self.curFrame >= self.keys[len(self.keys)-1]:\n            self.curFrame = self.keys[0]\n        else:\n            for i in range(0, len(self.keys)-1):\n                if self.curFrame >= self.keys[i] and self.curFrame < self.keys[i+1]:\n                    self.curFrame = self.keys[i+1]\n                    break\n        self.OnControl()\n\n    def OnNextFrame(self, evt):\n        if self.curFrame+1 <= self.endFrame:\n            self.curFrame += 1\n            self.OnControl()\n        else:\n            evt.Skip()\n\n    def OnLastFrame(self, evt):\n        self.curFrame = self.sliderEndFrame\n        self.OnControl()\n\n    def OnTime(self):\n        preFrame = self.curFrame\n        self.curFrameSpin.SetRange(self.startFrame,self.endFrame)\n        self.curFrame = preFrame\n        self.timeSlider.SetTimeSliderData(self.sliderStartFrame, self.sliderEndFrame, self.curFrame)\n        self.timeRange.SetTimeRangeData(self.startFrame, self.endFrame, self.sliderStartFrame, self.sliderEndFrame)\n        self.parallel = self.editor.animMgr.createParallel(self.startFrame,self.endFrame)\n\n    def OnTimeStartSpin(self, evt):\n        self.startFrame = evt.GetInt()\n        self.timeSliderStartSpin.SetRange(self.startFrame, self.sliderEndFrame)\n        if self.startFrame >= self.sliderStartFrame:\n            self.sliderStartFrame = self.startFrame\n            self.timeSliderStartSpin.SetValue(self.sliderStartFrame)\n            self.OnTime()\n        else:\n            self.OnTime()\n\n    def OnTimeSliderStartSpin(self, evt):\n        self.sliderStartFrame = evt.GetInt()\n        self.timeEndSpin.SetRange(self.sliderStartFrame, 10000)\n        self.OnTime()\n\n    def OnTimeSliderEndSpin(self, evt):\n        self.sliderEndFrame = evt.GetInt()\n        self.timeStartSpin.SetRange(0, self.sliderEndFrame)\n        self.OnTime()\n\n    def OnTimeEndSpin(self, evt):\n        self.endFrame = evt.GetInt()\n        self.timeSliderEndSpin.SetRange(self.sliderStartFrame, self.endFrame)\n        if self.endFrame <= self.sliderEndFrame:\n            self.sliderEndFrame = self.endFrame\n            self.timeSliderEndSpin.SetValue(self.sliderEndFrame)\n            self.OnTime()\n        else:\n            self.OnTime()\n\n    def OnDeleteKey(self, evt):\n        for i in range(0,len(self.keys)):\n            if self.curFrame == self.keys[i]:\n                del self.keys[i]\n                break\n\n        for j in list(self.editor.animMgr.keyFramesInfo.keys()):\n            for k in range(0,len(self.editor.animMgr.keyFramesInfo[j])):\n                if self.curFrame == self.editor.animMgr.keyFramesInfo[j][k][0]:\n                    del self.editor.animMgr.keyFramesInfo[j][k]\n                    break\n\n        for l in list(self.editor.animMgr.keyFramesInfo.keys()):\n            if len(self.editor.animMgr.keyFramesInfo[l]) == 0:\n                del self.editor.animMgr.keyFramesInfo[l]\n\n        self.OnPropKey()\n        self.OnAnimation(self.curFrame)\n\n    def OnPropKey(self):\n        self.parallel = self.editor.animMgr.createParallel(self.startFrame, self.endFrame)\n        self.timeSlider.SetTimeSliderData(self.sliderStartFrame, self.sliderEndFrame, self.curFrame)\n\n\n    def OnAnimation(self, curFrame):\n        time = float(curFrame-1)/float(24)\n        self.parallel.setT(time)\n        if self.editor.GRAPH_EDITOR is True:\n            self.editor.ui.graphEditorUI.curFrameChange()\n\n    def OnExit(self, evt):\n        for actor in self.editor.objectMgr.Actor:\n            actorAnim = os.path.basename(actor[OG.OBJ_ANIM])\n            actor[OG.OBJ_NP].loop(actorAnim)\n        self.parallel = None\n        self.Destroy()\n        self.editor.ui.editAnimMenuItem.Check(False)\n        self.editor.mode = self.editor.BASE_MODE\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/AnimControlUI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/9260a80b_AnimControlUI.json",
    "doc_id": "doc_49"
  }
}