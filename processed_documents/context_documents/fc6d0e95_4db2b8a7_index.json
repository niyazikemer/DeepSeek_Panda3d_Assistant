{
  "content": "Particle Effects\n\npython\n\nParticle effects involve the use of several small images acting on the same set of forces. These particles are created, they move, and they die out. These systems are dynamic and may be used for such effects as explosions, smoke, bubbling liquid and swarms.\n\nIn essence, any particle effect needs three key parts: the renderer, the emitter, and the factory. The renderer translates the particle object into a visible object on the screen. The emitter assigns initial locations and velocity vectors for the particles. The factory generates particles and assigns their attributes. There are many different types of each part, and they each have their own parameters.\n\nCreating your own particle effects using code alone may be difficult. A particle effect panel is available to ease through this process. This section will discuss using the particle panel and the large number of variables associated with particle effects.\n\ncpp\n\nFire, smoke, glowing, explosion, water fountain, falling leaves, fur, hair and many other fuzzy effects are created procedurally using particle systems. It's important not to make the assumption that particles must have the size of a 'particle' that is very small, particles can have any size and any mass. Particles are physical entities which inherit PhysicsObject.\n\nPanda3D provides a tool which simplifies testing particle systems. The tool is called \"Particle Panel\" and is written in Python. The link to run the particle panel is in the same folder as the particle sample which comes with Panda3D.\n\nA particle system in Panda3D consists of 6 components:\n\nFactory\n\nEmitter\n\nPhysics engine\n\nRenderer\n\nParticle System Controller (Particle System)\n\nParticle System Manager (Optional)\n\nFactory\n\nParticles are generated in this stage using the provided parameters. Panda3D Provides 2 Factories:\n\nPointParticleFactory: Generates particles with default rotation.\n\nZspinParticleFactory: Generates particles which spin along their Z-axis. This is kind of an intermediary class- if you're using a SpriteParticleRenderer and you want your sprites to spin without having them be full-blown oriented (i.e. angry quat math), use this. Note: 'set_final_angle' and 'angular_velocity' are mutually exclusive APIs if angular-velocity is specified, final_angle is ignored.\n\nPT(PointParticleFactory) pt_particle_factory = new PointParticleFactory();\npt_particle_factory->set_lifespan_base(0.5);\npt_particle_factory->set_lifespan_spread(0);\npt_particle_factory->set_mass_base(1.0);\npt_particle_factory->set_mass_spread(0);\npt_particle_factory->set_terminal_velocity_base(400);\npt_particle_factory->set_terminal_velocity_spread(0);\n\nEmitter\n\nThe emitter is used to emit the particles generated by the factory. The shape of the emitter determins the initial position and motion direction of the particles.\n\nAvailable Emitters\n\n.ArcEmitter\n\n.BoxEmitter\n\n.DiscEmitter\n\n.LineEmitter\n\n.RectangleEmitter\n\n.RingEmitter\n\n.SphereSurfaceEmitter\n\n.SphereVolumeEmitter\n\n.TangentRingEmitter\n\nEach emitter is declared in a separate .h file with the same name as the emitter. For example: ArcEmitter is declared in arcEmitter.h\n\nPT(SphereVolumeEmitter) sphere_emitter = new SphereVolumeEmitter;\nsphere_emitter->set_emission_type(SphereVolumeEmitter::ET_RADIATE);\nsphere_emitter->set_radius(3.0);\n// negative values emit the particles toward the sphere center\nsphere_emitter->set_amplitude(1);\nsphere_emitter->set_amplitude_spread(0);\nsphere_emitter->set_offset_force(LVector3(0, 0, 0));\nsphere_emitter->set_explicit_launch_vector(LVector3(1, 0, 0));\nsphere_emitter->set_radiate_origin(LPoint3(0, 0, 0));\n\nRenderer\n\nThe renderer is used to specify how the particle appears on screen.\n\nAvailable renderers\n\n.GeomParticleRenderer: displays each particle in the shape of a selected PandaNode\n\n.LineParticleRenderer: displays each particle as a line\n\n.PointParticleRenderer: displays each particle as a point\n\n.SparkleParticleRenderer displays each particle as a plus (+)\n\n.SpriteParticleRenderer: displays each particle as a sprite\n\nEach renderer is declared in a separate .h file with the same name as the renderer. For example: GeomParticleRenderer is declared in geomParticleRenderer.h\n\nPT(PointParticleRenderer) pt_particle_rend = new PointParticleRenderer();\npt_particle_rend->set_alpha_mode(BaseParticleRenderer::PR_ALPHA_OUT);\npt_particle_rend->set_user_alpha(1);\npt_particle_rend->set_point_size(2.0);\npt_particle_rend->set_start_color(LColor(1, 0, 0, 1)); // alpha value is ignored\npt_particle_rend->set_end_color(LColor(1, 1, 0, 1));\npt_particle_rend->set_blend_type(PointParticleRenderer::PointParticleBlendType::PP_BLEND_LIFE);\npt_particle_rend->set_blend_method(BaseParticleRenderer::ParticleRendererBlendMethod::PP_BLEND_LINEAR);\n//pt_particle_rend->set_color_blend_mode(ColorBlendAttrib::Mode::M_inv_subtract);\n//pt_particle_rend->set_ignore_scale(false);\n\nParticleSystem\n\nThis class is the controller of the particle system. The main parameters are:\n\nPool Size: the maximum number of particles the factory can generate Birth Rate: number of seconds between particle births, also it is the time after which the first birth occurs. So if the value is 6 the first litter will be born after 6 seconds.\n\nLitter Size: number of particles created at each birth. If you want all the particles to be born at the same time, set this value to the value of (Pool Size) Litter Spread: this adds a random value in the range [-spread, +spread] to the value of Litter Size.\n\nLifespan: umber of seconds the system will live.\n\nSystem Grows Older: this flag must be set for the Lifespan value to be used. It's very important to remember that particle systems which reach the end of their lifespan are automatically removed from the ParticleSystemManager and if you want to reuse them, they should be added to the ParticleSystemManager again.\n\nPT(ParticleSystem) particle_sys = new ParticleSystem();\nparticle_sys->set_pool_size(100);\nparticle_sys->set_birth_rate(0.1);\nparticle_sys->set_litter_size(10);\nparticle_sys->set_litter_spread(0);\nparticle_sys->set_local_velocity_flag(true);\n//particle_sys->set_spawn_on_death_flag(true); // this caused an exception!!\nparticle_sys->set_system_grows_older_flag(true);\nparticle_sys->set_system_lifespan(3.0);\nparticle_sys->set_active_system_flag(true);\n// use it to advance system age, or start at some age\n//particle_sys->set_system_age(5.0);\n// system_age is updated only when set_system_grows_older_flag(true);\n// get_system_age() returns 0 unless system_grows_older_flag is set\n\nThe particle factory, emitter and renderer should be attached to the ParticleSystem and most important the render node should be set.\n\nparticle_sys->set_factory(pt_particle_factory);\nparticle_sys->set_renderer(pt_particle_rend);\nparticle_sys->set_emitter(sphere_emitter);\n// if spawn and render parents should be different\n//particle_sys->set_spawn_render_node_path(window->get_render());\nparticle_sys->set_render_parent(window->get_render());\n\nParticleSystemManager\n\nThis class is responsible for simplifying control of particle systems. Instead of stepping each particle system in the scene they are all added to the ParticleSystemManager and they can be all stepped using a single command or they can be stepped individually. This class is not count referenced so PT() and CPT() should not be used with it. To attach a particle system to the manager:\n\nparticle_sys_mgr.attach_particlesystem(particle_sys);\n\nTo step all the particle systems:\n\nparticle_sys_mgr.do_particles(ClockObject::get_global_clock()->get_dt());\n\nTo step a specific particle system:\n\nparticle_sys_mgr.do_particles(ClockObject::get_global_clock()->get_dt(), particle_sys);\n\nNote\n\nParticle systems which reach the end of their lifespan are automatically removed from the ParticleSystemManager and if you want to reuse them, they should be added to the ParticleSystemManager again.\n\nusing-the-particle-panel loading-particle-systems basic-effect-parameters factories emitters renderers",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/4db2b8a7_index.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/fc6d0e95_4db2b8a7_index.json",
    "doc_id": "doc_429"
  }
}