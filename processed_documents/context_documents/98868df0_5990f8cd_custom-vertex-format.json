{
  "content": "Defining your own GeomVertexFormat\n\nBefore you can create any geometry in Panda3D, you must have a valid geomvertexformat. You can decide exactly which columns you want to have in your format, by building the format up one column at a time. (But you might be able to avoid this effort by taking advantage of one of the pre-defined formats <pre-defined-vertex-formats> listed on the next page.)\n\nTo build up your custom format, you need to first create an empty .GeomVertexArrayFormat, and add columns one at a time by calling ~.GeomVertexArrayFormat.add_column():\n\npython\n\narray = GeomVertexArrayFormat()\narray.addColumn(\"vertex\", 3, Geom.NTFloat32, Geom.CPoint)\n\ncpp\n\nPT(GeomVertexArrayFormat) array;\narray = new GeomVertexArrayFormat();\narray->add_column(InternalName::make(\"vertex\"), 3,\n                  Geom::NT_float32, Geom::C_point);\n\nThe parameters to ~.GeomVertexArrayFormat.add_column() are, in order, the column name, the number of components, the numeric type, and the contents specification. See geomvertexformat for a detailed description of each of these parameters and their appropriate values. You may also supply an optional fifth parameter, which specifies the byte offset within the row at which the column's data begins; but normally you should omit this to indicate that the column's data immediately follows the previous column's data.\n\ncpp\n\nNote that the column name should be an .InternalName object, as returned by a call to .InternalName.make(). This is Panda's mechanism for tokenizing a string name, to allow for fast name lookups during rendering. Other than this detail, the column name is really just an arbitrary string.\n\nIt is your responsibility to ensure that all of the parameters passed to ~.GeomVertexArrayFormat.add_column() are appropriate for the column you are defining. The column data will be stored exactly as you specify. When rendering, Panda will attempt to convert the column data as it is stored to whatever format your graphics API (e.g. OpenGL or DirectX) expects to receive.\n\nFor instance, to define a vertex format that includes a vertex position and a (U, V) texture coordinate:\n\npython\n\narray = GeomVertexArrayFormat()\narray.addColumn(\"vertex\", 3, Geom.NTFloat32, Geom.CPoint)\narray.addColumn(\"texcoord\", 2, Geom.NTFloat32, Geom.CTexcoord)\n\ncpp\n\nPT(GeomVertexArrayFormat) array;\narray = new GeomVertexArrayFormat();\narray->add_column(InternalName::make(\"vertex\"), 3,\n                  Geom::NT_float32, Geom::C_point);\narray->add_column(InternalName::make(\"texcoord\"), 2,\n                  Geom::NT_float32, Geom::C_texcoord);\n\nOnce you have defined the columns of your array, you should create a .GeomVertexFormat to hold the array:\n\npython\n\nformat = GeomVertexFormat()\nformat.addArray(array)\n\ncpp\n\nPT(GeomVertexFormat) unregistered_format;\nunregistered_format = new GeomVertexFormat();\nunregistered_format->add_array(array);\n\nIf you want your format to consist of multiple different arrays, you can create additional arrays and add them at this point as well.\n\nFinally, before you can use your new format, you must register it. Registering a format builds up the internal tables necessary to use the vertex format for rendering. However, once you have registered a format, you can no longer add or remove columns, or modify it in any way; if you want to make changes to the format after this point, you'll have to start over with a new .GeomVertexFormat object.\n\npython\n\nformat = GeomVertexFormat.registerFormat(format)\n\ncpp\n\nCPT(GeomVertexFormat) format;\nformat = GeomVertexFormat::register_format(unregistered_format);\n\nYou should always register a format with a syntax similar to the above: that is, you should use the return value of registerFormat as your new, registered format object, and discard the original format object. (The returned format object may be the same format object you started with, or it may be a different object with an equivalent meaning. Either way, the format object you started with should be discarded.)",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/5990f8cd_custom-vertex-format.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/98868df0_5990f8cd_custom-vertex-format.json",
    "doc_id": "doc_482"
  }
}