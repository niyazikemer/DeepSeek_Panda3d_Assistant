{
  "content": "DirectButton\n\nDirectButton is a DirectGui object that will respond to the mouse and can execute an arbitrary function when the user clicks on the object. This is actually implemented by taking advantage of the \"state\" system supported by every DirectGui object.\n\nEach DirectGui object has a predefined number of available \"states\", and a current state. This concept of \"state\" is completely unrelated to Panda's FSM <finite-state-machines> object. For a DirectGui object, the current state is simply as an integer number, which is used to select one of a list of different NodePaths that represent the way the DirectGui object appears in each state. Each DirectGui object can therefore have a completely different appearance in each of its states.\n\nMost types of DirectGui objects do not use this state system, and only have one state, which is state 0. The DirectButton is presently the only predefined object that has more than one state defined by default. In fact, DirectButton defines four states, numbered 0 through 3, which are called ready, press, rollover, and disabled, in that order. Furthermore, the DirectButton automatically manages its current state into one of these states, according to the user's interaction with the mouse.\n\nWith a DirectButton, then, you have the flexibility to define four completely different NodePaths, each of which represents the way the button appears in a different state. Usually, you want to define these such that the ready state is the way the button looks most of the time, the press state looks like the button has been depressed, the rollover state is lit up, and the disabled state is grayed out. In fact, the DirectButton interfaces will set these NodePaths up for you, if you use the simple forms of the constructor (for instance, if you specify just a single text string to the text parameter).\n\nSometimes you want to have explicit control over the various states, for instance to display a different text string in each state. To do this, you can pass a 4-tuple to the text parameter (or to many of the other parameters, such as relief or geom), where each element of the tuple is the parameter value for the corresponding state, like this:\n\nb = DirectButton(text=(\"OK\", \"click!\", \"rolling over\", \"disabled\"))\n\nThe above example would create a DirectButton whose label reads \"OK\" when it is not being touched, but it will change to a completely different label as the mouse rolls over it and clicks it.\n\nAnother common example is a button you have completely customized by painting four different texture maps to represent the button in each state. Normally, you would convert these texture maps into an egg file using egg-texture-cards like this:\n\negg-texture-cards -o button_maps.egg -p 240,240 button_ready.png button_click.png button_rollover.png button_disabled.png\n\nAnd then you would load up the that egg file in Panda and apply it to the four different states like this:\n\nmaps = loader.loadModel('button_maps')\nb = DirectButton(geom=(maps.find('**/button_ready'),\n                       maps.find('**/button_click'),\n                       maps.find('**/button_rollover'),\n                       maps.find('**/button_disabled')))\n\nYou can also access one of the state-specific NodePaths after the button has been created with the interface myButton.stateNodePath[stateNumber]. Normally, however, you should not need to access these NodePaths directly.\n\nThe following are the DirectGui keywords that are specific to a DirectButton. (These are in addition to the generic DirectGui keywords described on the previous page <directgui>.)\n\nKeyword Definition Value command Command the button performs when clicked Function extraArgs Extra arguments to the function specified in command [Extra Arguments] commandButtons Which mouse button must be clicked to do the command LMB, MMB, or RMB rolloverSound The sound made when the cursor rolls over the button AudioSound instance clickSound The sound made when the cursor clicks on the button AudioSound instance pressEffect Whether or not the button sinks in when clicked <0 or 1> state Whether or not the button is disabled DGG.NORMAL or DGG.DISABLED\n\nLike any other DirectGui <directgui> widget, you can change any of the properties by treating the element as a dictionary:\n\nbutton[\"state\"] = DGG.DISABLED\n\nExample\n\nimport direct.directbase.DirectStart\nfrom direct.gui.OnscreenText import OnscreenText\nfrom direct.gui.DirectGui import *\n\nfrom panda3d.core import TextNode\n\n# Add some text\nbk_text = \"This is my Demo\"\ntextObject = OnscreenText(text=bk_text, pos=(0.95,-0.95), scale=0.07,\n                          fg=(1, 0.5, 0.5, 1), align=TextNode.ACenter,\n                          mayChange=1)\n\n# Callback function to set  text\ndef setText():\n        bk_text = \"Button Clicked\"\n        textObject.setText(bk_text)\n\n# Add button\nb = DirectButton(text=(\"OK\", \"click!\", \"rolling over\", \"disabled\"),\n                 scale=.05, command=setText)\n\n# Run the tutorial\nbase.run()\n\nNote that you will not be able to set the text unless the mayChange flag is 1. This is an optimization, which is easily missed by newcomers.\n\nWhen you are positioning your button, keep in mind that the button's vertical center is located at the base of the text. For example, if you had a button with the word \"Apple\", the vertical center would be aligned with the base of the letter \"A\".",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/7ebb6a99_directbutton.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/eb85b2b2_7ebb6a99_directbutton.json",
    "doc_id": "doc_585"
  }
}