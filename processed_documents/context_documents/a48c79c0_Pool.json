{
  "content": "\"\"\"\nPool is a collection of python objects that you can checkin and\ncheckout. This is useful for a cache of objects that are expensive to load\nand can be reused over and over, like splashes on cannonballs, or\nbulletholes on walls. The pool is unsorted. Items do not have to be unique\nor be the same type.\n\nInternally the pool is implemented with 2 lists, free items and used items.\n\nExample:\n\n    .. code-block:: python\n\n        p = Pool([1, 2, 3, 4, 5])\n        x = p.checkout()\n        p.checkin(x)\n\n\"\"\"\n\n__all__ = ['Pool']\n\n\nfrom direct.directnotify import DirectNotifyGlobal\n\n\nclass Pool:\n\n    notify = DirectNotifyGlobal.directNotify.newCategory(\"Pool\")\n\n    def __init__(self, free=None):\n        if free:\n            self.__free = free\n        else:\n            self.__free = []\n        self.__used = []\n\n    def add(self, item):\n        \"\"\"\n        Add an item to the free list.\n        \"\"\"\n        self.__free.append(item)\n\n    def remove(self, item):\n        \"\"\"\n        Remove an item. Error is flagged if the item is not in the pool.\n        \"\"\"\n        if item in self.__free:\n            self.__free.remove(item)\n        elif item in self.__used:\n            self.__used.remove(item)\n        else:\n            self.notify.error(\"item not in pool\")\n\n    def checkout(self):\n        \"\"\"\n        Get an arbitrary item from the pool.\n        \"\"\"\n        if not self.__free:\n            self.notify.error(\"no items are free\")\n        item = self.__free.pop()\n        self.__used.append(item)\n        return item\n\n    def checkin(self, item):\n        \"\"\"\n        Put back a checked out item.\n        Error if the item is not checked out.\n        \"\"\"\n        if item not in self.__used:\n            self.notify.error(\"item is not checked out\")\n        self.__used.remove(item)\n        self.__free.append(item)\n\n    def reset(self):\n        \"\"\"\n        Resets the pool so all items are free.\n        \"\"\"\n        self.__free.extend(self.__used)\n        self.__used = []\n\n    def hasFree(self):\n        \"\"\"\n        Returns true if there is at least one free item.\n        \"\"\"\n        return len(self.__free) != 0\n\n    def isFree(self, item):\n        \"\"\"\n        Returns true if this item is free for check out.\n        \"\"\"\n        return item in self.__free\n\n    def isUsed(self, item):\n        \"\"\"\n        Returns true if this item has already been checked out.\n        \"\"\"\n        return item in self.__used\n\n    def getNumItems(self):\n        \"\"\"\n        Returns the number of free items and the number of used items.\n        \"\"\"\n        return len(self.__free), len(self.__used)\n\n    def cleanup(self, cleanupFunc=None):\n        \"\"\"\n        Completely cleanup the pool and all of its objects.\n        cleanupFunc will be called on every free and used item.\n        \"\"\"\n        if cleanupFunc:\n            # Make a list of all the items first in case the act of\n            # calling cleanupFunc moves some from used to free.\n            allItems = self.__free + self.__used\n            for item in allItems:\n                cleanupFunc(item)\n        del self.__free\n        del self.__used\n\n    def __repr__(self):\n        return \"free = %s\\nused = %s\" % (self.__free, self.__used)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/Pool.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/a48c79c0_Pool.json",
    "doc_id": "doc_274"
  }
}