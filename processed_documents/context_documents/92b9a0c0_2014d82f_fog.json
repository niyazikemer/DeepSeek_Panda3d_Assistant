{
  "content": "Fog\n\nBasic Fog\n\nTo turn on fog, create an object of class .Fog, and then apply it using the .NodePath.set_fog method:\n\npython\n\nmyFog = Fog(\"Fog Name\")\nmyFog.setColor(R, G, B)\nmyFog.setExpDensity(Float 0 to 1)\nrender.setFog(myFog)\n\ncpp\n\nPT(Fog) my_fog = new Fog(\"Fog Name\");\nmy_fog->set_color(R, G, B);\nmy_fog->set_exp_density(Float 0 to 1);\nrender.set_fog(my_fog);\n\nHowever, there is more here than meets the eye. We have created a fog node, which goes into the scene graph. Therefore, the fog has a position, a place where the fog is (conceptually) thickest.\n\nIf the fog object is not parented into the scene graph (in the example above, for instance), then the fog's position is ignored, and the fog is camera-relative. Likewise, if the fog is exponential, the fog's position is ignored, and the fog is camera-relative.\n\nThe ~.NodePath.set_fog method creates a fog attribute object. Like any Render Attribute <render-attributes>, the fog attribute affects the node that it is attached to, and any nodes below it in the scene graph. So you can easily cause only a subset of the objects (or just a single model) to be affected by the fog, by calling ~.NodePath.set_fog on the root of the subgraph you want to be affected. To remove the fog attribute later, use the ~.NodePath.clear_fog method:\n\npython\n\nrender.clearFog()\n\ncpp\n\nrender.clear_fog();\n\nWhile you have fog in effect, it is often desirable to set the background color to match the fog:\n\npython\n\nbase.setBackgroundColor(myFogColor)\n\ncpp\n\nwindow->get_display_region_3d()->set_clear_color(myFogColor);\n\nFog Modes\n\nThere are three fog modes in Panda: Fog.MExponential, Fog.MExponentialSquared and Fog.MLinear. You can switch the mode of a .Fog object using fog.get_mode() <.Fog.get_mode> and fog.set_mode(Fog.Mode) <.Fog.set_mode>. This explicit mode switching isn't normally necessary, as .Fog methods implicitly switch the mode for you.\n\nA .Fog object in Panda3D is a node that can be parented into the scene graph with a position, colour and orientation like any other node (importantly, .Fog is a subclass of .PandaNode, not of .NodePath) (do .Fog nodes have a scale?).\n\nThe position of a .Fog node in the scene graph does not determine which objects the fog affects, it determines the origin and direction of the fog when it is in linear mode. When a fog node is in exponential mode its position and orientation in the scene graph are irrelevant. Either way, a .Fog node must be activated by calling nodePath.set_fog(fogNode) <.NodePath.set_fog> on some .NodePath in the scene graph. Which .NodePath you call the ~.NodePath.set_fog method on determines which parts of the scene will be fogged: that .NodePath and all its children.\n\nLinear Fog\n\nThis is the default mode. In this mode the position and orientation of a .Fog node are important. A linear-mode .Fog node must first be parented into the scene graph, then activated by calling set_fog(fogNode) <.NodePath.set_fog> on some .NodePath in the scene graph.\n\nSetup a linear fog node at the origin:\n\npython\n\ncolor = (0.5, 0.8, 0.8)\nlinfog = Fog(\"A linear-mode Fog node\")\nlinfog.setColor(*color)\nlinfog.setLinearRange(0, 320)\nlinfog.setLinearFallback(45, 160, 320)\nrender.attachNewNode(linfog)\nrender.setFog(linfog)\n\ncpp\n\nLColor color(0.5,0.8,0.8);\nPT(Fog) linfog = new Fog(\"A linear-mode Fog node\");\nlinfog->set_color(color);\nlinfog->set_linear_range(0, 320);\nlinfog->set_linear_fallback(45, 160, 320);\nrender.attach_new_node(linfog);\nrender.set_fog(linfog);\n\nIn linear mode, the onset and opaque distances of the fog are defined as offsets along the local forward (+Y) axis of the fog node. The onset distance is the distance from the fog node at which the fog will begin to have effect, and the opaque distance is the distance from the fog node at which the fog will be completely opaque. From reading the API page for the .Fog class, it sounds as if beyond this opaque point there is no fog (rather than continuing opaque fog up to the location of the fog node as you might expect): \"the fog will be rendered as if it extended along the vector from the onset point to the opaque point.\"\n\nThese settings can be modified using the methods ~.Fog.get_linear_onset_point(), ~.Fog.get_linear_opaque_point(), ~.Fog.set_linear_onset_point(), ~.Fog.set_linear_opaque_point() and ~.Fog.set_linear_range() of .Fog.\n\nThere is a hardware issue with rendering fog which means that linear fog can break down and vanish depending on the angle from which it is viewed:\n\n\"the underlying fog effect supported by hardware is generally only one-dimensional, and must be rendered based on linear distance from the camera plane. Thus, this in-the-world effect is most effective when the fog vector from onset point to opaque point is most nearly parallel to the camera\u2019s eye vector. As the angle between the fog vector and the eye vector increases, the accuracy of the effect diminishes, up to a complete breakdown of the effect at a 90 degree angle.\"\n\nThe .Fog method set_linear_fallback(float angle, float onset, float opaque) <.Fog.set_linear_fallback> defines how the fog should be rendered when the fog effect is diminished in this way. angle is the minimum viewing angle (angle between the camera direction and fog direction) at which the fallback effect will be employed. onset and opaque specify camera-relative onset and opaque distances that will be fallen back on, overriding the .Fog node\u2019s own onset and opaque distances.\n\nThe linear fallback workaround will only look good in certain situations, for example when the fog is deep inside a dark cave. So in general, exponential mode fog is more useful than the default linear mode fog.\n\nExponential Fog\n\nIn exponential fog mode the position and orientation of your fog node in the scene graph and the onset and opaque points are ignored (in fact you don\u2019t even have to put your fog node in the scene graph). Instead, fog is rendered camera relative according to a density factor: the fog begins at the camera and continues to infinity, with an exponentially increasing density determined by the density factor. The fog moves with the camera as the camera\u2019s position and orientation changes:\n\n\"the onset point and opaque point are not used, and the fog effect is based on the value specified to ~.Fog.set_exp_density(), and it doesn\u2019t matter to which node the fog object is parented, or if it is parented anywhere at all.\"\n\nThe .Fog.set_exp_density() method determines the density value used for exponential fog calculations. The below example uses it to set up some scene-wide exponential fog:\n\npython\n\ncolor = (0.5, 0.8, 0.8)\nexpfog = Fog(\"Scene-wide exponential Fog object\")\nexpfog.setColor(*color)\nexpfog.setExpDensity(0.005)\nrender.setFog(expfog)\nbase.setBackgroundColor(*color)\n\ncpp\n\nLColor color(0.5, 0.8, 0.8, 1); PT(Fog) expfog = Fog(\"Scene-wide exponential Fog object\"); expfog->set_color(color); expfog->set_exp_density(0.005); window->get_render().set_fog(expfog); window->get_display_region_3d()->set_clear_color(color);\n\nThe last line in the sample above doesn't actually affect the fog, however, it generally looks better if the scene background color matches the color of the fog.\n\nSince ~.NodePath.set_fog() is called on render it affects the entire scene. ~.NodePath.set_fog() can just as easily be called on some other .NodePath and will affect only that .NodePath and its children.\n\nThe exponential fog effect can be turned off again using ~.NodePath.clear_fog():\n\npython\n\nrender.clearFog()\n\ncpp\n\nrender.clear_fog();",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/2014d82f_fog.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/92b9a0c0_2014d82f_fog.json",
    "doc_id": "doc_663"
  }
}