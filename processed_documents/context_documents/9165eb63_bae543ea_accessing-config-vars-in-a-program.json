{
  "content": "Accessing Config Vars in a Program\n\nPanda3D uses a configuration file <configuring-panda3d> named Config.prc. Panda3D supplies functions to easily read values out of Config.prc, and to alter their values in memory (the modified values are not written back out to disk). The ability to read and alter configuration settings procedurally has two major uses:\n\nStoring your own configuration data.\n\nTweaking Panda3D's behavior.\n\n\"Storing your own configuration data\" means that your game might have its own settings that need to be stored. Rather than writing your own configuration file parser, you might consider adding your configuration data to the panda configuration file instead.\n\nSuppose hypothetically that you are writing an online game, and your online game connects to a server. You need a configuration file to tell you the name of the server. Open up the \"Config.prc\" file and add the following line at the end of the file.\n\nmy-game-server panda3dgame.com\n\nNote that I invented the variable name \"my-game-server\" out of thin air. This variable is not recognized by Panda3D in any way. Therefore, this line has no effect on the engine whatsoever.\n\nTo manipulate this variable procedurally, use code not unlike the following, which creates an object of class .ConfigVariableString and then manipulates it using the methods ~.ConfigVariableString.set_value() and ~.ConfigVariableString.get_value().\n\npython\n\nfrom panda3d.core import ConfigVariableString\n\nmyGameServer = ConfigVariableString('my-game-server', '127.0.0.1')\nprint('Server specified in config file: ', myGameServer.getValue())\n\n# Allow the user to change servers on the command-line.\nif (sys.argv[1] == '--server'):\n    myGameServer.setValue(sys.argv[2])\nprint('Server that we will use: ', myGameServer.getValue())\n\nThe second parameter to the ConfigVariableString constructor is the default value that should be returned, in case the line \"my-game-server\" does not appear in any Config.prc file. There is also an optional third parameter, which is a description of the purpose of the variable.\n\npython\n\nThis string will be displayed when the user executes the command print(cvMgr).\n\nThe types of configuration variable are:\n\nConfigVariableString ConfigVariableInt ConfigVariableBool ConfigVariableColor ConfigVariableDouble ConfigVariableFilename ConfigVariableList ConfigVariableSearchPath\n\nMost of these follow the same form as ConfigVariableString, above, except that the value is of the indicated type, rather than a string. The two exceptions are ConfigVariableList and ConfigVariableSearchPath. These types of variables do not accept a default value to the constructor since the default value in both cases is always the empty list or search path.\n\npython\n\nTo display the current value of a particular variable interactively (for a string-type variable in this example), type the following:\n\nprint(ConfigVariableString(\"my-game-server\"))\n\nPanda3D will automatically load any PRC files it finds in its standard config directory at start-up.\n\npython\n\nYou can view a list of the files it has actually loaded with the following command:\n\nprint(cpMgr)\n\nIt is helpful to do this to ensure that you are editing the correct Config.prc file.\n\nSometimes, it is desirable to load an additional configuration file from disk, by giving an explicit filename. To do so, use .load_prc_file(). Note that filename-syntax uses a forward slash even under Windows.\n\npython\n\nfrom panda3d.core import loadPrcFile\n\nloadPrcFile(\"config/Config.prc\")\n\ncpp\n\n#include \"load_prc_file.h\"\n\nload_prc_file(\"config/Config.prc\");\n\nThe filename you specify is searched for along the model-path, in the same way that an Egg or Bam file is searched for when you use loader.loadModel() <direct.showbase.Loader.Loader.loadModel>.\n\npython\n\nYou should load your own PRC file before instantiating ShowBase. Changing certain configuration variables later on may not affect the window/environment that has already been created.\n\ncpp\n\nYou should load your own PRC file before opening the window. Changing certain configuration variables later on may not affect the window/environment that has already been created.\n\nYou can also use .load_prc_file_data() to load a string that you define in your code, as if it were the contents read from a disk file. The .load_prc_file_data() call requires two parameters. The first parameter is an arbitrary string name to assign to this \"file\" (and it can be the empty string if you don't care), while the second parameter is the contents of the file itself. This second parameter should contain newlines between variable definitions if you want to set the value of more than one variable.\n\nFor example, let's say that Panda3D's configuration file contains this line:\n\nfullscreen #f\n\nBy default, Panda3D programs will run in a window, not fullscreen. However, if you do this, then by the time you instantiate ShowBase, you will have changed the fullscreen-flag to true, and your program will run in fullscreen.\n\npython\n\nfrom panda3d.core import loadPrcFileData\n\nloadPrcFileData('', 'fullscreen true')\n\ncpp\n\n#include \"load_prc_file.h\"\n\nload_prc_file_data(\"\", \"fullscreen true\");\n\nThere are other ways to go to fullscreen. This is not necessarily the most straightforward approach, but it illustrates the point.\n\nYou can get a more complete list of available config variables at runtime, with the ~.ConfigVariableManager.list_variables() method:\n\npython\n\ncvMgr = ConfigVariableManager.getGlobalPtr()\ncvMgr.listVariables()\n\ncpp\n\nConfigVariableManager::get_global_ptr()->list_variables();\n\nFor a more complete documentation about Panda3D's configuration system, view the original documentation file.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/bae543ea_accessing-config-vars-in-a-program.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/9165eb63_bae543ea_accessing-config-vars-in-a-program.json",
    "doc_id": "doc_626"
  }
}