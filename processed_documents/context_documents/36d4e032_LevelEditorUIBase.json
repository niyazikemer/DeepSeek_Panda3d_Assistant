{
  "content": "import wx\nimport os\n## from wx.lib.agw import fourwaysplitter as FWS\n\nfrom panda3d.core import BitMask32, Mat4, NodePath, Vec3\nfrom direct.wxwidgets.WxPandaShell import WxPandaShell\nfrom direct.wxwidgets.WxSlider import WxSlider\nfrom direct.directtools.DirectSelection import SelectionRay\nfrom direct.showbase.MessengerGlobal import messenger\nfrom direct.showbase import ShowBaseGlobal\n\n#from ViewPort import *\nfrom . import ObjectGlobals as OG\nfrom .ObjectPaletteUI import ObjectPaletteUI\nfrom .ObjectPropertyUI import ObjectPropertyUI\nfrom .SceneGraphUI import SceneGraphUI\nfrom .LayerEditorUI import LayerEditorUI\nfrom .HotKeyUI import HotKeyUI\nfrom .ProtoPaletteUI import ProtoPaletteUI\nfrom .ActionMgr import ActionAddNewObj, ActionTransformObj\nfrom .AnimControlUI import AnimControlUI\nfrom .CurveAnimUI import CurveAnimUI\nfrom .GraphEditorUI import GraphEditorUI\n\n\nclass PandaTextDropTarget(wx.TextDropTarget):\n    def __init__(self, editor, view):\n        wx.TextDropTarget.__init__(self)\n        self.editor = editor\n        self.view = view\n\n    def OnDropText(self, x, y, text):\n        # create new object\n        parentNPRef = [None]\n        if not self.editor.propMeetsReq(text, parentNPRef):\n            return\n        action = ActionAddNewObj(self.editor, text, parent=parentNPRef[0])\n        self.editor.actionMgr.push(action)\n        newobj = action()\n        print(newobj)\n        if newobj is None:\n            return\n\n        # change window coordinate to mouse coordinate\n        mx = 2 * (x/float(self.view.ClientSize.GetWidth()) - 0.5)\n        my = -2 * (y/float(self.view.ClientSize.GetHeight()) - 0.5)\n\n        # create ray from the camera to detect 3d position\n        iRay = SelectionRay(self.view.camera)\n        iRay.collider.setFromLens(self.view.camNode, mx, my)\n        hitPt = None\n        if self.editor.objectMgr.currLiveNP:\n            iRay.collideWithGeom()\n            iRay.ct.traverse(self.editor.objectMgr.currLiveNP)\n\n            def isEntryBackfacing(iRay, entry):\n                if not entry.hasSurfaceNormal():\n                    # Well, no way to tell.  Assume we're not backfacing.\n                    return 0\n\n                fromNodePath = entry.getFromNodePath()\n                v = Vec3(entry.getSurfacePoint(fromNodePath))\n                n = entry.getSurfaceNormal(fromNodePath)\n                # Convert to camera space for backfacing test\n                p2cam = iRay.collisionNodePath.getParent().getMat(self.view.camera)\n                v = Vec3(p2cam.xformPoint(v))\n                n = p2cam.xformVec(n)\n                # Normalize and check angle between to vectors\n                v.normalize()\n                return v.dot(n) >= 0\n\n            iRay.sortEntries()\n            for entry in iRay.getEntries():\n                if isEntryBackfacing(iRay, entry):\n                    pass\n                else:\n                    hitPt = entry.getSurfacePoint(entry.getFromNodePath())\n                    break\n\n        if hitPt is None:\n            iRay.collideWithBitMask(BitMask32.bit(21))\n            iRay.ct.traverse(self.view.collPlane)\n            if iRay.getNumEntries() > 0:\n                entry = iRay.getEntry(0)\n                hitPt = entry.getSurfacePoint(entry.getFromNodePath())\n\n        if hitPt:\n            # create a temp nodePath to get the position\n            np = NodePath('temp')\n            np.setPos(self.view.camera, hitPt)\n\n            if ShowBaseGlobal.direct.manipulationControl.fGridSnap:\n                snappedPos = self.view.grid.computeSnapPoint(np.getPos())\n                np.setPos(snappedPos)\n\n            # update temp nodePath's HPR and scale with newobj's\n            np.setHpr(newobj.getHpr())\n            np.setScale(newobj.getScale())\n\n            # transform newobj to cursor position\n            obj = self.editor.objectMgr.findObjectByNodePath(newobj)\n            action2 = ActionTransformObj(self.editor, obj[OG.OBJ_UID], Mat4(np.getMat()))\n            self.editor.actionMgr.push(action2)\n            np.remove()\n            action2()\n        iRay.collisionNodePath.removeNode()\n        del iRay\n\n\nID_NEW = 101\nID_OPEN = 102\nID_SAVE = 103\nID_SAVE_AS = 104\nID_EXPORT_TO_MAYA = 105\n\nID_DUPLICATE = 201\nID_MAKE_LIVE = 202\nID_UNDO = 203\nID_REDO = 204\n\nID_SHOW_GRID = 301\nID_GRID_SIZE = 302\nID_GRID_SNAP = 303\nID_SHOW_PANDA_OBJECT = 304\nID_HOT_KEYS = 305\nID_PARENT_TO_SELECTED = 306\n\nID_CREATE_CURVE = 601\nID_EDIT_CURVE = 602\nID_CURVE_ANIM = 603\n\nID_ANIM = 701\nID_GRAPH = 702\n\n\nclass LevelEditorUIBase(WxPandaShell):\n    \"\"\" Class for Panda3D LevelEditor \"\"\"\n\n    def __init__(self, editor):\n        self.MENU_TEXTS.update({\n            ID_NEW: (\"&New\", \"LE-NewScene\"),\n            ID_OPEN: (\"&Open\", \"LE-OpenScene\"),\n            ID_SAVE: (\"&Save\", \"LE-SaveScene\"),\n            ID_SAVE_AS: (\"Save &As\", None),\n            ID_EXPORT_TO_MAYA: (\"Export to Maya\", None),\n            wx.ID_EXIT: (\"&Quit\", \"LE-Quit\"),\n            ID_DUPLICATE: (\"&Duplicate\", \"LE-Duplicate\"),\n            ID_MAKE_LIVE: (\"Make &Live\", \"LE-MakeLive\"),\n            ID_UNDO: (\"&Undo\", \"LE-Undo\"),\n            ID_REDO: (\"&Redo\", \"LE-Redo\"),\n            ID_SHOW_GRID: (\"&Show Grid\", None),\n            ID_GRID_SIZE: (\"&Grid Size\", None),\n            ID_GRID_SNAP: (\"Grid S&nap\", None),\n            ID_SHOW_PANDA_OBJECT: (\"Show &Panda Objects\", None),\n            ID_HOT_KEYS: (\"&Hot Keys\", None),\n            ID_PARENT_TO_SELECTED: (\"&Parent To Selected\", None),\n            ID_CREATE_CURVE: (\"&Create Curve\", None),\n            ID_EDIT_CURVE: (\"&Edit Curve\", None),\n            ID_CURVE_ANIM: (\"&Curve Animation\", None),\n            ID_ANIM: (\"&Edit Animation\", None),\n            ID_GRAPH: (\"&Graph Editor\", None)\n        })\n\n        self.editor = editor\n        WxPandaShell.__init__(self, fStartDirect=True)\n        self.contextMenu = ViewportMenu()\n        self.bindKeyEvents(True)\n\n    def bindKeyEvents(self, toBind=True):\n        if toBind:\n            self.wxApp.Bind(wx.EVT_CHAR, self.onKeyEvent)\n            self.wxApp.Bind(wx.EVT_KEY_DOWN, self.onKeyDownEvent)\n            self.wxApp.Bind(wx.EVT_KEY_UP, self.onKeyUpEvent)\n        else:\n            self.wxApp.Unbind(wx.EVT_CHAR)\n            self.wxApp.Unbind(wx.EVT_KEY_DOWN)\n            self.wxApp.Unbind(wx.EVT_KEY_UP)\n\n    def createMenu(self):\n        menuItem = self.menuFile.Insert(0, ID_NEW, self.MENU_TEXTS[ID_NEW][0])\n        self.Bind(wx.EVT_MENU, self.onNew, menuItem)\n\n        menuItem = self.menuFile.Insert(1, ID_OPEN, self.MENU_TEXTS[ID_OPEN][0])\n        self.Bind(wx.EVT_MENU, self.onOpen, menuItem)\n\n        menuItem = self.menuFile.Insert(2, ID_SAVE, self.MENU_TEXTS[ID_SAVE][0])\n        self.Bind(wx.EVT_MENU, self.onSave, menuItem)\n\n        menuItem = self.menuFile.Insert(3, ID_SAVE_AS, self.MENU_TEXTS[ID_SAVE_AS][0])\n        self.Bind(wx.EVT_MENU, self.onSaveAs, menuItem)\n\n        menuItem = self.menuFile.Insert(4, ID_EXPORT_TO_MAYA, self.MENU_TEXTS[ID_EXPORT_TO_MAYA][0])\n        self.Bind(wx.EVT_MENU, self.onExportToMaya, menuItem)\n\n        self.menuEdit = wx.Menu()\n        self.menuBar.Insert(1, self.menuEdit, \"&Edit\")\n\n        menuItem = self.menuEdit.Append(ID_DUPLICATE, self.MENU_TEXTS[ID_DUPLICATE][0])\n        self.Bind(wx.EVT_MENU, self.onDuplicate, menuItem)\n\n        menuItem = self.menuEdit.Append(ID_MAKE_LIVE, self.MENU_TEXTS[ID_MAKE_LIVE][0])\n        self.Bind(wx.EVT_MENU, self.onMakeLive, menuItem)\n\n        menuItem = self.menuEdit.Append(ID_UNDO, self.MENU_TEXTS[ID_UNDO][0])\n        self.Bind(wx.EVT_MENU, self.editor.actionMgr.undo, menuItem)\n\n        menuItem = self.menuEdit.Append(ID_REDO, self.MENU_TEXTS[ID_REDO][0])\n        self.Bind(wx.EVT_MENU, self.editor.actionMgr.redo, menuItem)\n\n        self.menuOptions = wx.Menu()\n        self.menuBar.Insert(2, self.menuOptions, \"&Options\")\n\n        self.showGridMenuItem = self.menuOptions.Append(ID_SHOW_GRID, self.MENU_TEXTS[ID_SHOW_GRID][0], kind = wx.ITEM_CHECK)\n        self.Bind(wx.EVT_MENU, self.toggleGrid, self.showGridMenuItem)\n\n        self.gridSizeMenuItem = self.menuOptions.Append(ID_GRID_SIZE, self.MENU_TEXTS[ID_GRID_SIZE][0])\n        self.Bind(wx.EVT_MENU, self.onGridSize, self.gridSizeMenuItem)\n\n        self.gridSnapMenuItem = self.menuOptions.Append(ID_GRID_SNAP, self.MENU_TEXTS[ID_GRID_SNAP][0], kind = wx.ITEM_CHECK)\n        self.Bind(wx.EVT_MENU, self.toggleGridSnap, self.gridSnapMenuItem)\n\n        self.showPandaObjectsMenuItem = self.menuOptions.Append(ID_SHOW_PANDA_OBJECT, self.MENU_TEXTS[ID_SHOW_PANDA_OBJECT][0], kind = wx.ITEM_CHECK)\n        self.Bind(wx.EVT_MENU, self.onShowPandaObjects, self.showPandaObjectsMenuItem)\n\n        self.parentToSelectedMenuItem = self.menuOptions.Append(ID_PARENT_TO_SELECTED, self.MENU_TEXTS[ID_PARENT_TO_SELECTED][0], kind = wx.ITEM_CHECK)\n\n        self.hotKeysMenuItem = self.menuOptions.Append(ID_HOT_KEYS, self.MENU_TEXTS[ID_HOT_KEYS][0])\n        self.Bind(wx.EVT_MENU, self.onHotKeys, self.hotKeysMenuItem)\n\n        self.menuCurve = wx.Menu()\n        self.menuBar.Insert(3, self.menuCurve, \"&CurveMode\")\n\n        self.createCurveMenuItem = self.menuCurve.Append(ID_CREATE_CURVE, self.MENU_TEXTS[ID_CREATE_CURVE][0], kind = wx.ITEM_CHECK)\n        self.Bind(wx.EVT_MENU, self.onCreateCurve, self.createCurveMenuItem)\n\n        self.editCurveMenuItem = self.menuCurve.Append(ID_EDIT_CURVE, self.MENU_TEXTS[ID_EDIT_CURVE][0], kind = wx.ITEM_CHECK)\n        self.Bind(wx.EVT_MENU, self.onEditCurve, self.editCurveMenuItem)\n\n        self.curveAnimMenuItem = self.menuCurve.Append(ID_CURVE_ANIM, self.MENU_TEXTS[ID_CURVE_ANIM][0], kind = wx.ITEM_CHECK)\n        self.Bind(wx.EVT_MENU, self.onCurveAnim, self.curveAnimMenuItem)\n\n        self.menuAnim = wx.Menu()\n        self.menuBar.Insert(4, self.menuAnim, \"&AnimationMode\")\n\n        self.editAnimMenuItem = self.menuAnim.Append(ID_ANIM, self.MENU_TEXTS[ID_ANIM][0], kind = wx.ITEM_CHECK)\n        self.Bind(wx.EVT_MENU, self.onAnimation, self.editAnimMenuItem)\n\n        self.graphEditorMenuItem = self.menuAnim.Append(ID_GRAPH, self.MENU_TEXTS[ID_GRAPH][0], kind = wx.ITEM_CHECK)\n        self.Bind(wx.EVT_MENU, self.onGraphEditor, self.graphEditorMenuItem)\n\n        WxPandaShell.createMenu(self)\n\n    def onGraphEditor(self, e):\n        if ShowBaseGlobal.direct.selected.last is None:\n            dlg = wx.MessageDialog(None, 'Please select a object first.', 'NOTICE', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            self.graphEditorMenuItem.Check(False)\n        else:\n            currentObj = self.editor.objectMgr.findObjectByNodePath(ShowBaseGlobal.direct.selected.last)\n            self.graphEditorUI = GraphEditorUI(self, self.editor, currentObj)\n            self.graphEditorUI.Show()\n            self.graphEditorMenuItem.Check(True)\n\n    def onAnimation(self, e):\n        if self.editor.mode != self.editor.ANIM_MODE:\n            self.animUI = AnimControlUI(self, self.editor)\n            self.animUI.Show()\n            self.editor.mode = self.editor.ANIM_MODE\n        if self.editor.mode == self.editor.ANIM_MODE:\n            self.editAnimMenuItem.Check(True)\n\n    def onCurveAnim(self, e):\n        self.curveAnimUI = CurveAnimUI(self, self.editor)\n        self.curveAnimUI.Show()\n        self.curveAnimMenuItem.Check(True)\n\n    def onCreateCurve(self, e):\n        \"\"\"Function to invoke curve creating, need to check previous mode\"\"\"\n        if self.editor.mode == self.editor.CREATE_CURVE_MODE:\n            self.createCurveMenuItem.Check(False)\n            self.editor.curveEditor.onBaseMode()\n        else:\n            if self.editor.mode == self.editor.EDIT_CURVE_MODE:\n                self.editor.curveEditor.onBaseMode()\n                self.editCurveMenuItem.Check(False)\n                self.createCurveMenuItem.Check(True)\n                self.onCreateCurve(None)\n            else:\n                self.currentView = self.getCurrentView()\n                if self.currentView is None:\n                    dlg = wx.MessageDialog(None, 'Please select a viewport first.Do not support curve creation under four viewports.', 'NOTICE', wx.OK)\n                    dlg.ShowModal()\n                    dlg.Destroy()\n                    self.createCurveMenuItem.Check(False)\n                else:\n                    self.editor.mode = self.editor.CREATE_CURVE_MODE\n                    self.editor.updateStatusReadout('Please press ENTER to end the curve creation.')\n                    degreeUI = CurveDegreeUI(self, -1, 'Curve Degree')\n                    degreeUI.ShowModal()\n                    degreeUI.Destroy()\n                    ShowBaseGlobal.direct.manipulationControl.disableManipulation()\n                    self.editCurveMenuItem.Check(False)\n\n    def onEditCurve(self, e):\n        \"\"\"Function to invoke curve editing and translate global information to local information. Need to check previous mode\"\"\"\n        if self.editor.mode == self.editor.EDIT_CURVE_MODE:\n            self.editCurveMenuItem.Check(False)\n            self.editor.curveEditor.onBaseMode()\n        else:\n            if self.editor.mode == self.editor.CREATE_CURVE_MODE:\n                self.editor.curveEditor.onBaseMode()\n                self.editCurveMenuItem.Check(True)\n                self.createCurveMenuItem.Check(False)\n                self.onEditCurve(None)\n            else:\n                if ShowBaseGlobal.direct.selected.last is None:\n                    dlg = wx.MessageDialog(None, 'Please select a curve first.', 'NOTICE', wx.OK)\n                    dlg.ShowModal()\n                    dlg.Destroy()\n                    self.editCurveMenuItem.Check(False)\n                if ShowBaseGlobal.direct.selected.last is not None:\n                    ShowBaseGlobal.direct.manipulationControl.enableManipulation()\n                    self.createCurveMenuItem.Check(False)\n                    self.curveObj = self.editor.objectMgr.findObjectByNodePath(ShowBaseGlobal.direct.selected.last)\n                    if self.curveObj[OG.OBJ_DEF].name == '__Curve__':\n                        self.editor.mode = self.editor.EDIT_CURVE_MODE\n                        self.editor.updateStatusReadout('Please press ENTER to end the curve editing.')\n                        self.editor.curveEditor.currentRope = self.curveObj[OG.OBJ_NP]\n                        self.editor.curveEditor.curveControl = self.curveObj[OG.OBJ_PROP]['curveInfo']\n                        self.editor.curveEditor.degree = self.curveObj[OG.OBJ_PROP]['Degree']\n                        for item in self.editor.curveEditor.curveControl:\n                            item[1].show()\n                            self.editor.curveEditor.curve.append((None, item[1].getPos()))\n                    else:\n                        dlg = wx.MessageDialog(None, 'Please select a curve first.', 'NOTICE', wx.OK)\n                        dlg.ShowModal()\n                        dlg.Destroy()\n                        self.editCurveMenuItem.Check(False)\n\n    def updateMenu(self):\n        hotKeyDict = {}\n        for hotKey in ShowBaseGlobal.direct.hotKeyMap.keys():\n            desc = ShowBaseGlobal.direct.hotKeyMap[hotKey]\n            hotKeyDict[desc[1]] = hotKey\n\n        for id in self.MENU_TEXTS.keys():\n            desc = self.MENU_TEXTS[id]\n            if desc[1]:\n                menuItem = self.menuBar.FindItemById(id)\n                hotKey = hotKeyDict.get(desc[1])\n                if hotKey:\n                    menuItem.SetText(desc[0] + \"\\t%s\"%hotKey)\n\n    def createInterface(self):\n        WxPandaShell.createInterface(self)\n\n        self.leftBarUpNB = wx.Notebook(self.leftBarUpPane, style=wx.NB_BOTTOM)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.leftBarUpNB, 1, wx.EXPAND)\n        self.leftBarUpPane.SetSizer(sizer)\n        self.leftBarUpPane0 = wx.Panel(self.leftBarUpNB, -1)\n        self.leftBarUpNB.AddPage(self.leftBarUpPane0, 'Object Palette')\n        self.leftBarUpPane1 = wx.Panel(self.leftBarUpNB, -1)\n        self.leftBarUpNB.AddPage(self.leftBarUpPane1, 'Proto Palette')\n\n        self.leftBarDownNB = wx.Notebook(self.leftBarDownPane)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.leftBarDownNB, 1, wx.EXPAND)\n        self.leftBarDownPane.SetSizer(sizer)\n        self.leftBarDownPane0 = wx.Panel(self.leftBarDownNB, -1)\n        self.leftBarDownNB.AddPage(self.leftBarDownPane0, 'Scene Graph')\n\n        self.rightBarDownNB = wx.Notebook(self.rightBarDownPane)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.rightBarDownNB, 1, wx.EXPAND)\n        self.rightBarDownPane.SetSizer(sizer)\n        self.rightBarDownPane0 = wx.Panel(self.rightBarDownNB, -1)\n        self.rightBarDownNB.AddPage(self.rightBarDownPane0, 'Layers')\n\n        self.topView.SetDropTarget(PandaTextDropTarget(self.editor, self.topView))\n        self.frontView.SetDropTarget(PandaTextDropTarget(self.editor, self.frontView))\n        self.leftView.SetDropTarget(PandaTextDropTarget(self.editor, self.leftView))\n        self.perspView.SetDropTarget(PandaTextDropTarget(self.editor, self.perspView))\n\n        self.rightBarDownPane.Layout()\n        self.Layout()\n\n        self.objectPaletteUI = ObjectPaletteUI(self.leftBarUpPane0, self.editor)\n        self.protoPaletteUI = ProtoPaletteUI(self.leftBarUpPane1, self.editor)\n        self.objectPropertyUI = ObjectPropertyUI(self.rightBarUpPane, self.editor)\n        self.sceneGraphUI = SceneGraphUI(self.leftBarDownPane0, self.editor)\n        self.layerEditorUI = LayerEditorUI(self.rightBarDownPane0, self.editor)\n\n        self.showGridMenuItem.Check(True)\n\n    def onRightDown(self, evt=None):\n        \"\"\"Invoked when the viewport is right-clicked.\"\"\"\n        if evt is None:\n            mpos = wx.GetMouseState()\n            mpos = self.ScreenToClient((mpos.x, mpos.y))\n        else:\n            mpos = evt.GetPosition()\n\n        ShowBaseGlobal.direct.fMouse3 = 0\n        self.PopupMenu(self.contextMenu, mpos)\n\n    def onKeyDownEvent(self, evt):\n        if evt.GetKeyCode() == wx.WXK_ALT:\n            ShowBaseGlobal.direct.fAlt = 1\n        elif evt.GetKeyCode() == wx.WXK_CONTROL:\n            ShowBaseGlobal.direct.fControl = 1\n        elif evt.GetKeyCode() == wx.WXK_SHIFT:\n            ShowBaseGlobal.direct.fShift = 1\n        elif evt.GetKeyCode() == wx.WXK_UP:\n            messenger.send('arrow_up')\n        elif evt.GetKeyCode() == wx.WXK_DOWN:\n            messenger.send('arrow_down')\n        elif evt.GetKeyCode() == wx.WXK_LEFT:\n            messenger.send('arrow_left')\n        elif evt.GetKeyCode() == wx.WXK_RIGHT:\n            messenger.send('arrow_right')\n        elif evt.GetKeyCode() == wx.WXK_PAGEUP:\n            messenger.send('page_up')\n        elif evt.GetKeyCode() == wx.WXK_PAGEDOWN:\n            messenger.send('page_down')\n        else:\n            evt.Skip()\n\n    def onKeyUpEvent(self, evt):\n        if evt.GetKeyCode() == wx.WXK_ALT:\n            ShowBaseGlobal.direct.fAlt = 0\n        elif evt.GetKeyCode() == wx.WXK_CONTROL:\n            ShowBaseGlobal.direct.fControl = 0\n        elif evt.GetKeyCode() == wx.WXK_SHIFT:\n            ShowBaseGlobal.direct.fShift = 0\n        elif evt.GetKeyCode() == wx.WXK_UP:\n            messenger.send('arrow_up-up')\n        elif evt.GetKeyCode() == wx.WXK_DOWN:\n            messenger.send('arrow_down-up')\n        elif evt.GetKeyCode() == wx.WXK_LEFT:\n            messenger.send('arrow_left-up')\n        elif evt.GetKeyCode() == wx.WXK_RIGHT:\n            messenger.send('arrow_right-up')\n        elif evt.GetKeyCode() == wx.WXK_PAGEUP:\n            messenger.send('page_up-up')\n        elif evt.GetKeyCode() == wx.WXK_PAGEDOWN:\n            messenger.send('page_down-up')\n        else:\n            evt.Skip()\n\n    def onKeyEvent(self, evt):\n        input = ''\n        if evt.GetKeyCode() in range(97, 123): # for keys from a to z\n            if evt.GetModifiers() == 4: # when shift is pressed while caps lock is on\n                input = 'shift-%s'%chr(evt.GetKeyCode())\n            else:\n                input = chr(evt.GetKeyCode())\n        elif evt.GetKeyCode() in range(65, 91):\n            if evt.GetModifiers() == 4: # when shift is pressed\n                input = 'shift-%s'%chr(evt.GetKeyCode() + 32)\n            else:\n                input = chr(evt.GetKeyCode() + 32)\n        elif evt.GetKeyCode() in range(1, 27): # for keys from a to z with control\n            input = 'control-%s'%chr(evt.GetKeyCode()+96)\n        elif evt.GetKeyCode() == wx.WXK_DELETE:\n            input = 'delete'\n        elif evt.GetKeyCode() == wx.WXK_ESCAPE:\n            input = 'escape'\n        else:\n            if evt.GetModifiers() == 4:\n                input = 'shift-%s'%chr(evt.GetKeyCode())\n            elif evt.GetModifiers() == 2:\n                input = 'control-%s'%chr(evt.GetKeyCode())\n            elif evt.GetKeyCode() < 256:\n                input = chr(evt.GetKeyCode())\n        if input in ShowBaseGlobal.direct.hotKeyMap.keys():\n            keyDesc = ShowBaseGlobal.direct.hotKeyMap[input]\n            messenger.send(keyDesc[1])\n\n    def reset(self):\n        self.sceneGraphUI.reset()\n        self.layerEditorUI.reset()\n\n    def onNew(self, evt=None):\n        self.editor.reset()\n\n    def onOpen(self, evt=None):\n        dialog = wx.FileDialog(None, \"Choose a file\", os.getcwd(), \"\", \"*.py\", style = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)\n        if dialog.ShowModal() == wx.ID_OK:\n            self.editor.load(dialog.GetPath())\n            self.editor.setTitleWithFilename(dialog.GetPath())\n        dialog.Destroy()\n\n    def onSave(self, evt=None):\n        if self.editor.currentFile is None or\\\n           not self.editor.currentFile.endswith('.py'):\n            return self.onSaveAs(evt)\n        else:\n            self.editor.save()\n\n    def onSaveAs(self, evt):\n        dialog = wx.FileDialog(None, \"Choose a file\", os.getcwd(), \"\", \"*.py\", style = wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)\n        result = True\n        if dialog.ShowModal() == wx.ID_OK:\n            self.editor.saveAs(dialog.GetPath())\n            self.editor.setTitleWithFilename(dialog.GetPath())\n        else:\n            result = False\n        dialog.Destroy()\n        return result\n\n    def onExportToMaya(self, evt):\n        dialog = wx.FileDialog(None, \"Choose a file\", os.getcwd(), \"\", \"*.mb\", style = wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)\n        if dialog.ShowModal() == wx.ID_OK:\n            self.editor.exportToMaya(dialog.GetPath())\n        dialog.Destroy()\n\n    def onDuplicate(self, evt):\n        self.editor.objectMgr.duplicateSelected()\n\n    def onMakeLive(self, evt):\n        self.editor.objectMgr.makeSelectedLive()\n\n    def toggleGrid(self, evt):\n        if self.showGridMenuItem.IsChecked():\n            for grid in [self.perspView.grid, self.topView.grid, self.frontView.grid, self.leftView.grid]:\n                if grid.isHidden():\n                    grid.show()\n        else:\n            for grid in [self.perspView.grid, self.topView.grid, self.frontView.grid, self.leftView.grid]:\n                if not grid.isHidden():\n                    grid.hide()\n\n    def toggleGridSnap(self, evt):\n        if self.gridSnapMenuItem.IsChecked():\n            ShowBaseGlobal.direct.manipulationControl.fGridSnap = 1\n            for grid in [self.perspView.grid, self.topView.grid, self.frontView.grid, self.leftView.grid]:\n                grid.fXyzSnap = 1\n\n        else:\n            ShowBaseGlobal.direct.manipulationControl.fGridSnap = 0\n            for grid in [self.perspView.grid, self.topView.grid, self.frontView.grid, self.leftView.grid]:\n                grid.fXyzSnap = 0\n\n    def onGridSize(self, evt):\n        gridSizeUI = GridSizeUI(self, -1, 'Change Grid Size', self.perspView.grid.gridSize, self.perspView.grid.gridSpacing)\n        gridSizeUI.ShowModal()\n        gridSizeUI.Destroy()\n\n    def onShowPandaObjects(self, evt):\n        self.sceneGraphUI.showPandaObjectChildren()\n\n    def onDestroy(self, evt):\n        self.editor.protoPalette.saveToFile()\n        self.editor.saveSettings()\n        self.editor.reset()\n\n    def updateGrids(self, newSize, newSpacing):\n        self.perspView.grid.gridSize = newSize\n        self.perspView.grid.gridSpacing = newSpacing\n        self.perspView.grid.updateGrid()\n\n        self.topView.grid.gridSize = newSize\n        self.topView.grid.gridSpacing = newSpacing\n        self.topView.grid.updateGrid()\n\n        self.frontView.grid.gridSize = newSize\n        self.frontView.grid.gridSpacing = newSpacing\n        self.frontView.grid.updateGrid()\n\n        self.leftView.grid.gridSize = newSize\n        self.leftView.grid.gridSpacing = newSpacing\n        self.leftView.grid.updateGrid()\n\n    def onHotKeys(self, evt):\n        hotKeyUI = HotKeyUI(self, -1, 'Hot Key List')\n        hotKeyUI.ShowModal()\n        hotKeyUI.Destroy()\n\n    def buildContextMenu(self, nodePath):\n        for menuItem in self.contextMenu.GetMenuItems():\n            self.contextMenu.RemoveItem(menuItem)\n\n        self.contextMenu.addItem('Replace This', call=lambda\\\n                                 p0=None, p1=False:self.replaceObject(p0, p1))\n\n        self.contextMenu.addItem('Replace All', call=lambda\\\n                                 p0=None, p1=True:self.replaceObject(p0, p1))\n        self.contextMenu.AppendSeparator()\n\n    def replaceObject(self, evt, all=False):\n        currObj = self.editor.objectMgr.findObjectByNodePath(ShowBaseGlobal.direct.selected.last)\n        if currObj is None:\n            print('No valid object is selected for replacement')\n            return\n\n        targetType = self.editor.ui.objectPaletteUI.getSelected()\n        if targetType is None:\n            print('No valid target type is selected for replacement')\n            return\n\n        if all:\n            typeName = currObj[OG.OBJ_DEF].name\n            objs = self.editor.objectMgr.findObjectsByTypeName(typeName)\n            for obj in objs:\n                self.editor.objectMgr.replaceObjectWithTypeName(obj, targetType)\n        else:\n            self.editor.objectMgr.replaceObjectWithTypeName(currObj, targetType)\n\n\nclass GridSizeUI(wx.Dialog):\n    def __init__(self, parent, id, title, gridSize, gridSpacing):\n        wx.Dialog.__init__(self, parent, id, title, size=(250, 240))\n\n        self.parent = parent\n        panel = wx.Panel(self, -1)\n        vbox = wx.BoxSizer(wx.VERTICAL)\n\n        wx.StaticBox(panel, -1, 'Grid Size', (5, 5), (235, 80))\n\n        self.gridSizeSlider = WxSlider(panel, -1, float(gridSize), 10.0, 100000.0,\n                           pos = (10, 25), size=(220, -1),\n                           style=wx.SL_HORIZONTAL | wx.SL_LABELS, textSize=(80,20))\n        self.gridSizeSlider.Enable()\n\n        wx.StaticBox(panel, -1, 'Grid Space', (5, 90), (235, 80))\n\n        self.gridSpacingSlider = WxSlider(panel, -1, float(gridSpacing), 0.01, 2000.0,\n                           pos = (10, 115), size=(220, -1),\n                           style=wx.SL_HORIZONTAL | wx.SL_LABELS)\n        self.gridSpacingSlider.Enable()\n\n        okButton = wx.Button(self, -1, 'Apply', size=(70, 20))\n        okButton.Bind(wx.EVT_BUTTON, self.onApply)\n        vbox.Add(panel)\n        vbox.Add(okButton, 1, wx.ALIGN_CENTER | wx.TOP | wx.BOTTOM, 5)\n\n        self.SetSizer(vbox)\n        ShowBaseGlobal.base.le.ui.bindKeyEvents(False)\n\n    def onApply(self, evt):\n        newSize = self.gridSizeSlider.GetValue()\n        newSpacing = self.gridSpacingSlider.GetValue()\n        self.parent.updateGrids(newSize, newSpacing)\n        ShowBaseGlobal.base.le.ui.bindKeyEvents(True)\n        self.Destroy()\n\n\nclass ViewportMenu(wx.Menu):\n    \"\"\"Represents a menu that appears when right-clicking a viewport.\"\"\"\n\n    def __init__(self):\n        wx.Menu.__init__(self)\n\n    def addItem(self, name, parent = None, call = None, id = None):\n        if id is None:\n            id = wx.NewId()\n        if parent is None:\n            parent = self\n        item = wx.MenuItem(parent, id, name)\n        parent.AppendItem(item)\n        if call is not None:\n            self.Bind(wx.EVT_MENU, call, item)\n\n    def addMenu(self, name, parent = None, id = None):\n        if id is None:\n            id = wx.NewId()\n        subMenu = wx.Menu()\n        if parent is None:\n            parent = self\n        parent.AppendMenu(id, name, subMenu)\n        return subMenu\n\n\nclass CurveDegreeUI(wx.Dialog):\n    def __init__(self, parent, id, title):\n        wx.Dialog.__init__(self, parent, id, title, size=(150, 120))\n\n        self.parent = parent\n        panel = wx.Panel(self, -1)\n        degreeBox = wx.BoxSizer(wx.VERTICAL)\n\n        degreeList = ['2','3','4']\n\n        self.degree = wx.RadioBox(panel, -1, 'Curve Degree', (5, 5), wx.DefaultSize, degreeList, 3, wx.RA_SPECIFY_COLS)\n        self.degree.SetToolTipString(\"Select the degree of the curve.\")\n        self.degree.SetSelection(1)\n\n        okButton = wx.Button(self, -1, 'Apply', size=(70, 20))\n        okButton.Bind(wx.EVT_BUTTON, self.onApply)\n\n        degreeBox.Add(panel, 1, wx.ALIGN_CENTER | wx.TOP | wx.BOTTOM, 5)\n        degreeBox.Add(okButton, 0, wx.ALIGN_CENTER | wx.TOP | wx.BOTTOM, 5)\n        self.SetSizer(degreeBox)\n\n    def onApply(self, evt):\n        if str(self.degree.GetSelection()) == '0':\n            self.parent.editor.curveEditor.degree = 2\n        if str(self.degree.GetSelection()) == '1':\n            self.parent.editor.curveEditor.degree = 3\n        if str(self.degree.GetSelection()) == '2':\n            self.parent.editor.curveEditor.degree = 4\n        self.Destroy()\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/LevelEditorUIBase.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/36d4e032_LevelEditorUIBase.json",
    "doc_id": "doc_29"
  }
}