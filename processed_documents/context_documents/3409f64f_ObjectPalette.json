{
  "content": "\"\"\"\nThis is just a sample code.\n\nLevelEditor, ObjectHandler, ObjectPalette should be rewritten\nto be game specific.\n\nYou can define object template class inheriting ObjectBase\nto define properties shared by multiple object types.\nWhen you are defining properties\nyou should specify their name, UI type, data type,\nupdate function, default value, and value range.\n\nThen you need implement ObjectPalette class inheriting ObjectPaletteBase,\nand in the populate function you can define ObjectPalette tree structure.\n\"\"\"\n\nfrom . import ObjectGlobals as OG\nfrom .ObjectPaletteBase import ObjectBase, ObjectPaletteBase\n\n\nclass ObjectProp(ObjectBase):\n    def __init__(self, *args, **kw):\n        ObjectBase.__init__(self, *args, **kw)\n        self.properties['Abc'] =[OG.PROP_UI_RADIO, # UI type\n                                 OG.PROP_STR,      # data type\n                                 None,             # update function\n                                 'a',              # default value\n                                 ['a', 'b', 'c']]  # value range\n\n\nclass ObjectSmiley(ObjectProp):\n    def __init__(self, *args, **kw):\n        ObjectProp.__init__(self, *args, **kw)\n        self.properties['123'] = [OG.PROP_UI_COMBO,\n                                  OG.PROP_INT,\n                                  None,\n                                  1,\n                                  [1, 2, 3]]\n\n\nclass ObjectDoubleSmileys(ObjectProp):\n    def __init__(self, *args, **kw):\n        ObjectProp.__init__(self, *args, **kw)\n        self.properties['Distance'] = [OG.PROP_UI_SLIDE,\n                                                    OG.PROP_FLOAT,\n                                                    ('.updateDoubleSmiley',\n                                                     {'val':OG.ARG_VAL, 'obj':OG.ARG_OBJ}),\n                                                    # In this case, an update function for property is defined\n                                                    # so whenever you change the value of this property from UI\n                                                    # this update function will be called with these arguments.\n                                                    # OG.ARG_VAL will be replaced by the value from UI.\n                                                    # OG.ARG_OBJ will be replaced by object data structure.\n                                                    # When an update function is starting with .\n                                                    # it means this function belongs to the default objectHandler.\n                                                    1.0, [0, 10, 0.1]]\n\n\nclass ObjectPalette(ObjectPaletteBase):\n    def __init__(self):\n        ObjectPaletteBase.__init__(self)\n\n    def populate(self):\n        # Create a group called 'Prop' in the ObjectPalette tree\n        self.add('Prop')\n\n        # Create a group called 'Double Smileys' under 'Prop' group\n        self.add('Double Smileys', 'Prop')\n\n        # Add an object type 'Smiley' which is inheriting ObjectSmiley template\n        # and have following properties.\n        self.add(ObjectSmiley(name='Smiley',\n                              model='models/smiley.egg',\n                              models=['models/smiley.egg',\n                                      'models/frowney.egg',\n                                      'models/jack.egg'],\n                              # when an object is just a simple geometry, you can define\n                              # model, and models like this\n                              # instead of defining createFunction\n                              properties={'Happy':[OG.PROP_UI_CHECK,\n                                                   OG.PROP_BOOL,\n                                                   None,\n                                                   True],\n                                          'Number':[OG.PROP_UI_SPIN,\n                                                    OG.PROP_INT,\n                                                    ('.updateSmiley',\n                                                     {'val':OG.ARG_VAL, 'obj':OG.ARG_OBJ}),\n                                                    1, [1, 10]],\n                                          }),\n                 'Prop') # This object type will be added under the 'Prop' group.\n        self.add(ObjectDoubleSmileys(name='H Double Smiley',\n                                     createFunction = ('.createDoubleSmiley', {})),\n                                     # When the createFunction is defined like this,\n                                     # this function will be called to create the object.\n                                     # When a create function is starting with .\n                                     # it means this function belongs to the default objectHandler.\n                 'Double Smileys')\n\n        self.add(ObjectDoubleSmileys(name='V Double Smiley',\n                                     createFunction = ('.createDoubleSmiley', {'horizontal':False})),\n                                     # You can specify argument for the create function, too\n                 'Double Smileys')\n\n        self.add('Animal')\n        self.add(ObjectBase(name='Panda',\n                            createFunction = ('.createPanda', {}),\n                            anims = ['models/panda-walk4.egg',],\n                            properties = {}),\n                 'Animal')\n\n        self.add('BG')\n        self.add(ObjectBase(name='Grass',\n                            createFunction = ('.createGrass', {}),\n                            properties = {}),\n                 'BG')\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/ObjectPalette.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/3409f64f_ObjectPalette.json",
    "doc_id": "doc_35"
  }
}