{
  "content": "\"\"\"DistributedSmoothNodeBase module: contains the DistributedSmoothNodeBase class\"\"\"\n\nfrom .ClockDelta import globalClockDelta\nfrom direct.task import Task\nfrom direct.task.TaskManagerGlobal import taskMgr\nfrom direct.showbase.PythonUtil import randFloat\nfrom panda3d.direct import CDistributedSmoothNodeBase\n\nfrom enum import IntEnum\n\n\nclass DummyTaskClass:\n    def setDelay(self, blah):\n        pass\n\n\nDummyTask = DummyTaskClass()\n\n\nclass DistributedSmoothNodeBase:\n    \"\"\"common base class for DistributedSmoothNode and DistributedSmoothNodeAI\n    \"\"\"\n\n    class BroadcastTypes(IntEnum):\n        FULL = 0\n        XYH = 1\n        XY = 2\n\n    def __init__(self):\n        self.__broadcastPeriod = None\n\n    def generate(self):\n        self.cnode = CDistributedSmoothNodeBase()\n        self.cnode.setClockDelta(globalClockDelta)\n        self.d_broadcastPosHpr = None\n\n    def disable(self):\n        del self.cnode\n        # make sure our task is gone\n        self.stopPosHprBroadcast()\n\n    def delete(self):\n        pass\n\n    def b_clearSmoothing(self):\n        self.d_clearSmoothing()\n        self.clearSmoothing()\n\n    def d_clearSmoothing(self):\n        self.sendUpdate(\"clearSmoothing\", [0])\n\n    ### posHprBroadcast ###\n\n    def getPosHprBroadcastTaskName(self):\n        # presumably, we have a doId at this point\n        return \"sendPosHpr-%s\" % self.doId\n\n    def setPosHprBroadcastPeriod(self, period):\n        # call this at any time to change the delay between broadcasts\n        self.__broadcastPeriod = period\n\n    def getPosHprBroadcastPeriod(self):\n        # query the current delay between broadcasts\n        return self.__broadcastPeriod\n\n    def stopPosHprBroadcast(self):\n        taskMgr.remove(self.getPosHprBroadcastTaskName())\n        # Delete this callback because it maintains a reference to self\n        self.d_broadcastPosHpr = None\n\n    def posHprBroadcastStarted(self):\n        return self.d_broadcastPosHpr is not None\n\n    def wantSmoothPosBroadcastTask(self):\n        return True\n\n    def startPosHprBroadcast(self, period=.2, stagger=0, type=None):\n        if self.cnode is None:\n            self.initializeCnode()\n\n        BT = DistributedSmoothNodeBase.BroadcastTypes\n        if type is None:\n            type = BT.FULL\n        # set the broadcast type\n        self.broadcastType = type\n\n        broadcastFuncs = {\n            BT.FULL: self.cnode.broadcastPosHprFull,\n            BT.XYH:  self.cnode.broadcastPosHprXyh,\n            BT.XY:  self.cnode.broadcastPosHprXy,\n        }\n        # this comment is here so it will show up in a grep for 'def d_broadcastPosHpr'\n        self.d_broadcastPosHpr = broadcastFuncs[self.broadcastType]\n\n        # Set stagger to non-zero to randomly delay the initial task execution\n        # over 'period' seconds, to spread out task processing over time\n        # when a large number of SmoothNodes are created simultaneously.\n        taskName = self.getPosHprBroadcastTaskName()\n\n        # Set up telemetry optimization variables\n        self.cnode.initialize(self, self.dclass, self.doId)\n\n        self.setPosHprBroadcastPeriod(period)\n        # Broadcast our initial position\n        self.b_clearSmoothing()\n        self.cnode.sendEverything()\n\n        # remove any old tasks\n        taskMgr.remove(taskName)\n        # spawn the new task\n        delay = 0.\n        if stagger:\n            delay = randFloat(period)\n        if self.wantSmoothPosBroadcastTask():\n            taskMgr.doMethodLater(self.__broadcastPeriod + delay,\n                                  self._posHprBroadcast, taskName)\n\n    def _posHprBroadcast(self, task=DummyTask):\n        # TODO: we explicitly stagger the initial task timing in\n        # startPosHprBroadcast; we should at least make an effort to keep\n        # this task accurately aligned with its period and starting time.\n        self.d_broadcastPosHpr()\n        task.setDelay(self.__broadcastPeriod)\n        return Task.again\n\n    def sendCurrentPosition(self):\n        # if we're not currently broadcasting, make sure things are set up\n        if self.d_broadcastPosHpr is None:\n            self.cnode.initialize(self, self.dclass, self.doId)\n        self.cnode.sendEverything()\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/DistributedSmoothNodeBase.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/8613714e_DistributedSmoothNodeBase.json",
    "doc_id": "doc_332"
  }
}