{
  "content": "\"\"\"\nPalette for Prototyping\n\"\"\"\nimport imp\n\nfrom .ObjectPaletteBase import ObjectBase, ObjectPaletteBase\n\nclass ProtoPaletteBase(ObjectPaletteBase):\n    def __init__(self):\n        ObjectPaletteBase.__init__(self)\n        # self.dirname should be defined in inherited class\n        assert self.dirname\n\n    def addItems(self):\n        if type(protoData) == dict:\n            for key in list(protoData.keys()):\n                if type(protoData[key]) == dict:\n                    self.add(key, parent)\n                    self.addItems(protoData[key], key)\n                else:\n                    self.add(protoData[key], parent)\n\n    def populate(self):\n        moduleName = 'protoPaletteData'\n        try:\n            file, pathname, description = imp.find_module(moduleName, [self.dirname])\n            module = imp.load_module(moduleName, file, pathname, description)\n            self.data = module.protoData\n            self.dataStruct = module.protoDataStruct\n        except:\n            print(\"protoPaletteData doesn't exist\")\n            return\n\n        #self.addItems()\n\n    def saveProtoDataStruct(self, f):\n        if not f:\n            return\n\n        for key in list(self.dataStruct.keys()):\n            f.write(\"\\t'%s':'%s',\\n\"%(key, self.dataStruct[key]))\n\n    def saveProtoData(self, f):\n        if not f:\n            return\n\n        for key in list(self.data.keys()):\n            if isinstance(self.data[key], ObjectBase):\n                f.write(\"\\t'%s':ObjectBase(name='%s', model='%s', anims=%s, actor=%s),\\n\"%(key, self.data[key].name, self.data[key].model, self.data[key].anims, self.data[key].actor))\n            else:\n                f.write(\"\\t'%s':ObjectGen(name='%s'),\\n\"%(key, self.data[key].name))\n\n    def saveToFile(self):\n        try:\n            f = open(self.dirname + '/protoPaletteData.py', 'w')\n            f.write(\"from direct.leveleditor.ObjectPaletteBase import *\\n\\n\")\n            f.write(\"protoData = {\\n\")\n            self.saveProtoData(f)\n            f.write(\"}\\n\")\n            f.write(\"protoDataStruct = {\\n\")\n            self.saveProtoDataStruct(f)\n            f.write(\"}\\n\")\n            f.close()\n        except:\n            pass\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/ProtoPaletteBase.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/ec9d7679_ProtoPaletteBase.json",
    "doc_id": "doc_46"
  }
}