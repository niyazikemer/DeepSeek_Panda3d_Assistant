{
  "content": "from . import DistributedNodeAI\nfrom . import DistributedSmoothNodeBase\n\nclass DistributedSmoothNodeAI(DistributedNodeAI.DistributedNodeAI,\n                              DistributedSmoothNodeBase.DistributedSmoothNodeBase):\n\n    def __init__(self, air, name=None):\n        DistributedNodeAI.DistributedNodeAI.__init__(self, air, name)\n        DistributedSmoothNodeBase.DistributedSmoothNodeBase.__init__(self)\n\n    def generate(self):\n        DistributedNodeAI.DistributedNodeAI.generate(self)\n        DistributedSmoothNodeBase.DistributedSmoothNodeBase.generate(self)\n        self.cnode.setRepository(self.air, 1, self.air.ourChannel)\n\n    def disable(self):\n        DistributedSmoothNodeBase.DistributedSmoothNodeBase.disable(self)\n        DistributedNodeAI.DistributedNodeAI.disable(self)\n\n    def delete(self):\n        DistributedSmoothNodeBase.DistributedSmoothNodeBase.delete(self)\n        DistributedNodeAI.DistributedNodeAI.delete(self)\n\n    # distributed set pos and hpr functions\n    # these are invoked by the DC system\n    # 'send' (d_set*) versions are inherited from DistributedSmoothNodeBase\n    def setSmStop(self, t=None):\n        pass\n\n    # These have their FFI functions exposed for efficiency\n    def setSmH(self, h, t=None):\n        self.setH(h)\n\n    def setSmZ(self, z, t=None):\n        self.setZ(z)\n\n    def setSmXY(self, x, y, t=None):\n        self.setX(x)\n        self.setY(y)\n\n    def setSmXZ(self, x, z, t=None):\n        self.setX(x)\n        self.setZ(z)\n\n    def setSmPos(self, x, y, z, t=None):\n        self.setPos(x, y, z)\n\n    def setSmHpr(self, h, p, r, t=None):\n        self.setHpr(h, p, r)\n\n    def setSmXYH(self, x, y, h, t=None):\n        self.setX(x)\n        self.setY(y)\n        self.setH(h)\n\n    def setSmXYZH(self, x, y, z, h, t=None):\n        self.setPos(x, y, z)\n        self.setH(h)\n\n    def setSmPosHpr(self, x, y, z, h, p, r, t=None):\n        self.setPosHpr(x, y, z, h, p, r)\n\n    def setSmPosHprL(self, l, x, y, z, h, p, r, t=None):\n        self.setPosHpr(x, y, z, h, p, r)\n\n    def clearSmoothing(self, bogus = None):\n        pass\n\n\n    # Do we use these on the AIx?\n    def setComponentX(self, x):\n        self.setX(x)\n    def setComponentY(self, y):\n        self.setY(y)\n    def setComponentZ(self, z):\n        self.setZ(z)\n    def setComponentH(self, h):\n        self.setH(h)\n    def setComponentP(self, p):\n        self.setP(p)\n    def setComponentR(self, r):\n        self.setR(r)\n    def setComponentL(self, l):\n        pass\n    def setComponentT(self, t):\n        pass\n\n    def getComponentX(self):\n        return self.getX()\n    def getComponentY(self):\n        return self.getY()\n    def getComponentZ(self):\n        return self.getZ()\n    def getComponentH(self):\n        return self.getH()\n    def getComponentP(self):\n        return self.getP()\n    def getComponentR(self):\n        return self.getR()\n    def getComponentL(self):\n        if self.zoneId:\n            return self.zoneId\n        else:\n            # we can't send None over the wire which self.zoneId can sometimes be\n            return 0\n    def getComponentT(self):\n        return 0\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/DistributedSmoothNodeAI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/6bdbd1f3_DistributedSmoothNodeAI.json",
    "doc_id": "doc_307"
  }
}