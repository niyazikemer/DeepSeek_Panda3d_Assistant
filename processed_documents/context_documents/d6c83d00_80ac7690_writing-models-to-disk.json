{
  "content": "Writing 3D Models out to Disk\n\nPanda has two native file formats for models.\n\nEgg files (with the extension .egg) are written in an ASCII human readable format. The egg format is designed to be easy to read and modify if necessary, and easy to write a convert into from another third-party format. Also, the egg format is intended to be backward-compatible from all future versions of Panda3D, so if you have an egg file that Panda can load now, it should always be able to load that file. (Well, we can't really make guarantees, but this is what we shoot for.) See parsing-and-generating-egg-files for more information about the egg format.\n\nBAM Files\n\nBecause of the way the egg syntax is designed, an egg file might be very large, sometimes many times larger than the file it was converted from. It can also sometimes take several seconds for Panda to load a large egg file.\n\nBam files (with the extension .bam), on the other hand, are binary files that are more closely tied to a particular version of Panda3D. The bam format is designed to be as similar as possible to the actual Panda data structures, so that a bam file is relatively small and can be loaded very quickly. However, you should not consider the bam file format to be a good long-term storage format for your models, since a future version of Panda3D may not be able to load bam files from older versions. (That said, we have been pretty good at retaining backward compatibility for .bam files anyway, so you may find it possible to ignore this advice, albeit at your peril.)\n\nYou can always convert egg files to bam files using the program egg2bam <converting-egg-to-bam>. For many simple models, it is also possible to convert back again with the program bam2egg <list-of-panda3d-executables>, but you should not rely on this, since it does not convert advanced features like animation; and some structure of the original egg file may be lost in the conversion.\n\nYou can load files of these formats, as well as any other supported format <supported-model-formats>, using the loader.loadModel <model-files> interface. Any file types other than .bam or .egg will be automatically converted at runtime, exactly as if you had run the appropriate command-line conversion tool first.\n\nThe Bam Interface\n\nThe easiest way to save geometry is to use to call write_bam_file(filename) <.NodePath.write_bam_file> from the NodePath that contains your geometry.\n\nmyPanda = loader.loadModel(\"panda\")\n\n# do some fancy calculations on the normals, or texture coordinates that you\n# dont want to do at runtime\n\n# Save your new custom Panda\nmyPanda.writeBamFile(\"customPanda.bam\")\n\nThe Egg Interface\n\nOne easy way to create .egg file for geometry that has already been made is to create a .bam file and use bam2egg. However, you will often want to use the egg interface to create geometry in the first place; this is usually the easiest way to create geometry in Panda3D.\n\nThe complete documentation for using the egg interfaces has yet to be written, but the egg library is really quite simple to use. The basic idea is that you create an EggData, and an EggVertexPool to hold your vertices; and then you can create a series of EggVertex and EggPolygon objects. If you want to create some structure in your egg file, you can create one or more EggGroups to separate the polygons into different groups. Here is an example:\n\nfrom panda3d.core import Point3D, deg2Rad, NodePath, Filename, CSZupRight\nfrom panda3d.egg import EggPolygon, EggVertexPool, EggData, EggVertex, loadEggData, EggCoordinateSystem\nimport math\n\n...\n\ndef makeWedge(angleDegrees = 360, numSteps = 16):\n\n    z_up = EggCoordinateSystem()\n    z_up.setValue(CSZupRight)\n\n    data = EggData()\n    data.addChild(z_up)\n\n    vp = EggVertexPool('fan')\n    data.addChild(vp)\n\n    poly = EggPolygon()\n    data.addChild(poly)\n\n    v = EggVertex()\n    v.setPos(Point3D(0, 0, 0))\n    poly.addVertex(vp.addVertex(v))\n\n    angleRadians = deg2Rad(angleDegrees)\n\n    for i in range(numSteps + 1):\n        a = angleRadians * i / numSteps\n        y = math.sin(a)\n        x = math.cos(a)\n\n        v = EggVertex()\n        v.setPos(Point3D(x, 0, y))\n        poly.addVertex(vp.addVertex(v))\n\n    return data\n...\n\n# Creating egg data\ndata = makeWedge()\n\n# To write the egg file to disk, use this:\ndata.writeEgg(Filename(\"wedge.egg\"))\n\n# To load the egg file and render it immediately, use this:\nmodel = NodePath(loadEggData(data))\nmodel.reparentTo(render)\n\nSee the generated API documentation of panda3d.egg for more complete information about the egg library.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/80ac7690_writing-models-to-disk.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/d6c83d00_80ac7690_writing-models-to-disk.json",
    "doc_id": "doc_366"
  }
}