{
  "content": "\"\"\"\nDefines Layer UI\n\"\"\"\nimport wx\n\nfrom . import ObjectGlobals as OG\n\n\nclass LayerEditorUI(wx.Panel):\n    def __init__(self, parent, editor):\n        wx.Panel.__init__(self, parent)\n\n        self.editor = editor\n        self.editorTxt = \"Layer Editor\"\n        self.saveData = []\n        self.layersDataDict = dict()\n        self.layersDataDictNextKey = 0\n        self.systemLayerKeys = []\n        self.llist = wx.ListCtrl(self, -1, style=wx.LC_REPORT | wx.LC_EDIT_LABELS | wx.LC_NO_HEADER)\n        self.llist.InsertColumn(0, \"Layers\")\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.llist, 1, wx.EXPAND, 0)\n        self.SetSizer(sizer)\n        self.Layout()\n\n        parentSizer = wx.BoxSizer(wx.VERTICAL)\n        parentSizer.Add(self, 1, wx.EXPAND, 0)\n        parent.SetSizer(parentSizer)\n        parent.Layout()\n\n        self.opAdd       = \"Add Layer\"\n        self.opDelete    = \"Delete Layer\"\n        self.opRename    = \"Rename Layer\"\n        self.opAddObj    = \"Add Selected Object\"\n        self.opRemoveObj = \"Remove Selected Object\"\n        self.opShowObj   = \"Show Layer Objects\"\n        self.opHideObj   = \"Hide Layer Objects\"\n\n        self.menuItemsGen = list()\n        self.menuItemsGen.append(self.opAdd)\n        #self.menuItems.append(self.opRename)\n\n        self.menuItemsObj = list()\n        self.menuItemsObj.append(self.opAddObj)\n        self.menuItemsObj.append(self.opRemoveObj)\n        self.menuItemsObj.append(self.opShowObj)\n        self.menuItemsObj.append(self.opHideObj)\n        self.menuItemsObj.append(self.opDelete)\n\n        self.popupmenu = wx.Menu()\n        for item in self.menuItemsGen:\n            menuItem = self.popupmenu.Append(-1, item)\n            self.Bind(wx.EVT_MENU, self.onPopupItemSelected, menuItem)\n\n        self.Bind(wx.EVT_CONTEXT_MENU, self.onShowPopup)\n        self.llist.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.onShowMembers)\n\n    def menuAppendGenItems(self):\n        for item in self.menuItemsGen:\n            menuItem = self.popupmenu.Append(-1, item)\n            self.Bind(wx.EVT_MENU, self.onPopupItemSelected, menuItem)\n\n    def menuAppendObjItems(self, hitItem):\n        for item in self.menuItemsObj:\n            if hitItem in self.systemLayerKeys:\n                if item in [self.opRemoveObj, self.opDelete, self.opAddObj]:\n                    continue\n            menuItem = self.popupmenu.Append(-1, item)\n            self.Bind(wx.EVT_MENU, self.onPopupItemSelected, menuItem)\n\n    def onShowPopup(self, event):\n        pos = event.GetPosition()\n        pos = self.ScreenToClient(pos)\n\n        for menuItem in self.popupmenu.GetMenuItems():\n            self.popupmenu.RemoveItem(menuItem)\n\n        #import pdb;set_trace()\n        hitItem, flags = self.llist.HitTest(pos)\n        if hitItem == -1:\n            self.menuAppendGenItems()\n        else:\n            self.menuAppendObjItems(hitItem)\n        self.PopupMenu(self.popupmenu, pos)\n\n    def onPopupItemSelected(self, event):\n        menuItem = self.popupmenu.FindItemById(event.GetId())\n        text = menuItem.GetText()\n        if text == self.opAddObj:\n            self.addObj()\n        elif text == self.opRemoveObj:\n            self.removeObj()\n        elif text == self.opShowObj:\n            self.HideObj(False)\n        elif text == self.opHideObj:\n            self.HideObj(True)\n        elif text == self.opAdd:\n            self.addLayer()\n        elif text == self.opDelete:\n            self.deleteLayer()\n        elif text == self.opRename:\n            self.renameLayer()\n        else:\n            wx.MessageBox(\"You selected item '%s'\" % text)\n\n    def reset(self):\n        #import pdb;set_trace()\n        self.layersDataDict.clear()\n        self.layersDataDictNextKey = 0\n        self.llist.DeleteAllItems()\n        self.systemLayerKeys = []\n\n    def findLabel(self, text):\n        found = False\n        for index in range(self.llist.GetItemCount()):\n            itemtext = self.llist.GetItemText(index)\n            if itemtext == text:\n                return True\n        return found\n\n    def addLayerData(self, idx, objUID):\n        self.removeObjData(objUID)\n        layerData = self.layersDataDict[idx]\n        layerData.append(objUID)\n\n    def addLayerEntry(self, name, idx):\n        index = self.llist.InsertStringItem(self.llist.GetItemCount(), name)\n        self.llist.SetItemData(index, idx)\n        layersData = list()\n        self.layersDataDict[idx] = layersData\n        if idx > self.layersDataDictNextKey:\n            self.layersDataDictNextKey = idx\n\n    def addLayer(self):\n        #import pdb;set_trace()\n        count = self.llist.GetItemCount()\n        i = 1\n        text = \"Layer%s\"%(count + i)\n        found = self.findLabel(text)\n        while found:\n            i = i + 1\n            text = \"Layer%s\"%(count + i)\n            found = self.findLabel(text)\n\n        self.layersDataDictNextKey = self.layersDataDictNextKey + 1\n        self.addLayerEntry(text, self.layersDataDictNextKey)\n\n    def deleteLayer(self):\n        index = self.llist.GetFirstSelected()\n        if index != -1:\n            key = self.llist.GetItemData(index)\n            del self.layersDataDict[key]\n            item = self.llist.DeleteItem(index)\n\n    def renameLayer(self):\n        index = self.llist.GetFirstSelected()\n        if index != -1:\n            self.llist.SetItemState(index, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)\n            self.llist.SetItemState(index, wx.LIST_STATE_FOCUSED, wx.LIST_STATE_FOCUSED)\n\n    def removeObjData(self, objUID):\n        layersDataDictKeys = list(self.layersDataDict.keys())\n        for i in range(len(layersDataDictKeys)):\n            layersData = self.layersDataDict[layersDataDictKeys[i]]\n            for j in range(len(layersData)):\n                if layersData[j] == objUID:\n                    del layersData[j]\n\n    def removeObj(self):\n        objNodePath = base.direct.selected.last\n        if objNodePath is None:\n            wx.MessageBox(\"No object was selected.\", self.editorTxt, wx.OK | wx.ICON_EXCLAMATION)\n            return\n        obj = self.editor.objectMgr.findObjectByNodePath(objNodePath)\n        if obj is not None:\n            self.removeObjData(obj[OG.OBJ_UID])\n\n    def addObj(self):\n        index = self.llist.GetFirstSelected()\n        if index == -1:\n            wx.MessageBox(\"No layer was selected.\", self.editorTxt, wx.OK | wx.ICON_EXCLAMATION)\n            return\n        objNodePath = base.direct.selected.last\n        if objNodePath is None:\n            wx.MessageBox(\"No object was selected.\", self.editorTxt, wx.OK | wx.ICON_EXCLAMATION)\n            return\n\n        # Checking if the object was laready added to the layer\n        obj = self.editor.objectMgr.findObjectByNodePath(objNodePath)\n        if obj is not None:\n            i = self.llist.GetItemData(index)\n            layersData = self.layersDataDict[i]\n            for j in range(len(layersData)):\n                if layersData[j] == obj[OG.OBJ_UID]:\n                    wx.MessageBox(\"Selected object already is this layer\", self.editorTxt, wx.OK | wx.ICON_EXCLAMATION)\n                    return\n            # Looking for the object in the other layers\n            # If the object is found - delete it.\n            self.removeObj()\n\n            layersData.append(obj[OG.OBJ_UID])\n\n    def onShowMembers(self, event):\n        item = event.GetItem()\n        layerMembers = list()\n        layerName = item.GetText()\n        key = item.GetData()\n        layerData = self.layersDataDict[key]\n        for i in range(len(layerData)):\n            obj = self.editor.objectMgr.findObjectById(layerData[i])\n            namestr = \"%s_%s\"%(obj[OG.OBJ_DEF].name, obj[OG.OBJ_UID])\n            layerMembers.append(namestr)\n        dialog = wx.SingleChoiceDialog(None, layerName, self.editorTxt, layerMembers)\n        if dialog.ShowModal() == wx.ID_OK:\n            #do something here\n            dialog.GetStringSelection()\n        dialog.Destroy()\n\n    def HideObj(self, hide):\n        index = self.llist.GetFirstSelected()\n        if index == -1:\n            wx.MessageBox(\"No layer was selected.\", self.editorTxt, wx.OK | wx.ICON_EXCLAMATION)\n            return\n\n        key = self.llist.GetItemData(index)\n        layerData = self.layersDataDict[key]\n        if len(layerData) == 0:\n            return\n        for i in range(len(layerData)):\n            obj = self.editor.objectMgr.findObjectById(layerData[i])\n            if hide:\n                obj[OG.OBJ_NP].hide()\n            else:\n                obj[OG.OBJ_NP].show()\n\n        font = wx.Font\n        font = self.llist.GetItemFont(index)\n        if hide:\n            font.SetWeight(wx.FONTWEIGHT_BOLD)\n        else:\n            font.SetWeight(wx.FONTWEIGHT_NORMAL)\n        self.llist.SetItemFont(index, font)\n\n    def traverse(self):\n        self.saveData.append(\"\\nif hasattr(base, 'le'):\")\n        self.saveData.append(\"    ui.layerEditorUI.reset()\")\n        for index in range(self.llist.GetItemCount()):\n            self.saveData.append(\"    ui.layerEditorUI.addLayerEntry('%s', %s )\"%(self.llist.GetItemText(index), self.llist.GetItemData(index)))\n        layersDataDictKeys = list(self.layersDataDict.keys())\n        for i in range(len(layersDataDictKeys)):\n            layerData = self.layersDataDict[layersDataDictKeys[i]]\n            for j in range(len(layerData)):\n                self.saveData.append(\"    ui.layerEditorUI.addLayerData(%s, '%s')\"%(layersDataDictKeys[i], layerData[j]))\n\n    def getSaveData(self):\n        self.saveData = []\n        self.traverse()\n        return self.saveData\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/LayerEditorUI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/bf9b01c2_LayerEditorUI.json",
    "doc_id": "doc_40"
  }
}