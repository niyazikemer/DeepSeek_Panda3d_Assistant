{
  "content": "from direct.showbase.DirectObject import DirectObject\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\n\n\nclass DistributedObjectBase(DirectObject):\n    \"\"\"\n    The Distributed Object class is the base class for all network based\n    (i.e. distributed) objects.  These will usually (always?) have a\n    dclass entry in a \\\\*.dc file.\n    \"\"\"\n    notify = directNotify.newCategory(\"DistributedObjectBase\")\n\n    def __init__(self, cr):\n        assert self.notify.debugStateCall(self)\n        self.cr = cr\n        self.parentId = None\n        self.zoneId = None\n\n    if __debug__:\n        def status(self, indent=0):\n            \"\"\"\n            print out \"doId(parentId, zoneId) className\"\n            \"\"\"\n            spaces = ' ' * (indent + 2)\n            try:\n                print(\"%s%s:\" % (' ' * indent, self.__class__.__name__))\n                print(\"%sfrom DistributedObject doId:%s, parent:%s, zone:%s\" % (\n                    spaces, self.doId, self.parentId, self.zoneId))\n            except Exception as e:\n                print(\"%serror printing status %s\" % (spaces, e))\n\n    def getLocation(self):\n        try:\n            if self.parentId == 0 and self.zoneId == 0:\n                return None\n            # This is a -1 stuffed into a uint32\n            if self.parentId == 0xffffffff and self.zoneId == 0xffffffff:\n                return None\n            return (self.parentId, self.zoneId)\n        except AttributeError:\n            return None\n\n    def handleChildArrive(self, childObj, zoneId):\n        \"\"\"\n        A new child has just setLocation beneath us.  Give us a\n        chance to run code when a new child sets location to us. For\n        example, we may want to scene graph reparent the child to\n        some subnode we own.\n        \"\"\"\n        assert self.notify.debugCall()\n        # Inheritors should override\n\n    def handleChildArriveZone(self, childObj, zoneId):\n        \"\"\"\n        A child has just changed zones beneath us with setLocation.\n        Give us a chance to run code when an existing child sets\n        location to us. For example, we may want to scene graph\n        reparent the child to some subnode we own.\n        \"\"\"\n        assert self.notify.debugCall()\n        # Inheritors should override\n\n    def handleChildLeave(self, childObj, zoneId):\n        \"\"\"\n        A child is about to setLocation away from us.  Give us a\n        chance to run code just before a child sets location away from us.\n        \"\"\"\n        assert self.notify.debugCall()\n        # Inheritors should override\n\n    def handleChildLeaveZone(self, childObj, zoneId):\n        \"\"\"\n        A child is about to setLocation to another zone beneath us.\n        Give us a chance to run code just before a child sets\n        location to that zone.\n        \"\"\"\n        assert self.notify.debugCall()\n        # Inheritors should override\n\n    def handleQueryObjectChildrenLocalDone(self, context):\n        assert self.notify.debugCall()\n        # Inheritors should override\n\n    def getParentObj(self):\n        if self.parentId is None:\n            return None\n        return self.cr.doId2do.get(self.parentId)\n\n    def hasParentingRules(self):\n        return self.dclass.getFieldByName('setParentingRules') is not None\n\n    def delete(self):\n        \"\"\"\n        Override this to handle cleanup right before this object\n        gets deleted.\n        \"\"\"\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/DistributedObjectBase.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/084461fa_DistributedObjectBase.json",
    "doc_id": "doc_296"
  }
}