{
  "content": "\nfrom direct.showbase.InputStateGlobal import inputState\nfrom direct.showbase.MessengerGlobal import messenger\n#from DirectGui import *\n#from PythonUtil import *\n#from IntervalGlobal import *\n\n#from otp.avatar import Avatar\nfrom direct.directnotify import DirectNotifyGlobal\n#import GhostWalker\n#import GravityWalker\n#import NonPhysicsWalker\n#import PhysicsWalker\n#if __debug__:\n#    import DevWalker\nfrom direct.task import Task\nfrom panda3d.core import ConfigVariableBool\n\n# This is a hack, it may be better to use a line instead of a ray.\nCollisionHandlerRayStart = 4000.0\n\n\nclass ControlManager:\n    notify = DirectNotifyGlobal.directNotify.newCategory(\"ControlManager\")\n    wantWASD = ConfigVariableBool('want-WASD', False)\n\n    def __init__(self, enable=True, passMessagesThrough = False):\n        assert self.notify.debug(\"init control manager %s\" % (passMessagesThrough))\n        assert self.notify.debugCall(id(self))\n        self.passMessagesThrough = passMessagesThrough\n        self.inputStateTokens = []\n        # Used to switch between strafe and turn. We will reset to whatever was last set.\n        self.WASDTurnTokens = []\n        self.__WASDTurn = True\n        self.controls = {}\n        self.currentControls = None\n        self.currentControlsName = None\n        self.isEnabled = 0\n        if enable:\n            self.enable()\n        #self.monitorTask = taskMgr.add(self.monitor, \"ControlManager-%s\"%(id(self)), priority=-1)\n        self.forceAvJumpToken = None\n\n        if self.passMessagesThrough: # for not breaking toontown\n            ist=self.inputStateTokens\n            ist.append(inputState.watchWithModifiers(\"forward\", \"arrow_up\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watchWithModifiers(\"reverse\", \"arrow_down\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watchWithModifiers(\"turnLeft\", \"arrow_left\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watchWithModifiers(\"turnRight\", \"arrow_right\", inputSource=inputState.ArrowKeys))\n\n    def __str__(self):\n        return 'ControlManager: using \\'%s\\'' % self.currentControlsName\n\n    def add(self, controls, name=\"basic\"):\n        \"\"\"Add a control instance to the list of available control systems.\n\n        Args:\n            controls: an avatar control system.\n            name (str): any key that you want to use to refer to the controls\n                later (e.g. using the use(<name>) call).\n\n        See also: :meth:`use()`.\n        \"\"\"\n        assert self.notify.debugCall(id(self))\n        assert controls is not None\n        oldControls = self.controls.get(name)\n        if oldControls is not None:\n            assert self.notify.debug(\"Replacing controls: %s\" % name)\n            oldControls.disableAvatarControls()\n            oldControls.setCollisionsActive(0)\n            oldControls.delete()\n        controls.disableAvatarControls()\n        controls.setCollisionsActive(0)\n        self.controls[name] = controls\n\n    def get(self, name):\n        return self.controls.get(name)\n\n    def remove(self, name):\n        \"\"\"Remove a control instance from the list of available control\n        systems.\n\n        Args:\n            name: any key that was used to refer to the controls when they were\n                added (e.g. using the add(<controls>, <name>) call).\n\n        See also: :meth:`add()`.\n        \"\"\"\n        assert self.notify.debugCall(id(self))\n        oldControls = self.controls.pop(name,None)\n        if oldControls is not None:\n            assert self.notify.debug(\"Removing controls: %s\" % name)\n            oldControls.disableAvatarControls()\n            oldControls.setCollisionsActive(0)\n\n    if __debug__:\n        def lockControls(self):\n            self.ignoreUse=True\n\n        def unlockControls(self):\n            if hasattr(self, \"ignoreUse\"):\n                del self.ignoreUse\n\n    def use(self, name, avatar):\n        \"\"\"\n        name is a key (string) that was previously passed to add().\n\n        Use a previously added control system.\n\n        See also: :meth:`add()`.\n        \"\"\"\n        assert self.notify.debugCall(id(self))\n        if __debug__ and hasattr(self, \"ignoreUse\"):\n            return\n        controls = self.controls.get(name)\n\n        if controls is not None:\n            if controls is not self.currentControls:\n                if self.currentControls is not None:\n                    self.currentControls.disableAvatarControls()\n                    self.currentControls.setCollisionsActive(0)\n                    self.currentControls.setAvatar(None)\n                self.currentControls = controls\n                self.currentControlsName = name\n                self.currentControls.setAvatar(avatar)\n                self.currentControls.setCollisionsActive(1)\n                if self.isEnabled:\n                    self.currentControls.enableAvatarControls()\n                messenger.send('use-%s-controls'%(name,), [avatar])\n            #else:\n            #    print \"Controls are already\", name\n        else:\n            assert self.notify.debug(\"Unkown controls: %s\" % name)\n\n    def setSpeeds(self, forwardSpeed, jumpForce,\n            reverseSpeed, rotateSpeed, strafeLeft=0, strafeRight=0):\n        assert self.notify.debugCall(id(self))\n        for controls in self.controls.values():\n            controls.setWalkSpeed(\n                forwardSpeed, jumpForce, reverseSpeed, rotateSpeed)\n\n    def delete(self):\n        assert self.notify.debugCall(id(self))\n        self.disable()\n        for controls in list(self.controls.keys()):\n            self.remove(controls)\n        del self.controls\n        del self.currentControls\n\n        for token in self.inputStateTokens:\n            token.release()\n\n        for token in self.WASDTurnTokens:\n            token.release()\n        self.WASDTurnTokens = []\n\n        #self.monitorTask.remove()\n\n    def getSpeeds(self):\n        if self.currentControls:\n            return self.currentControls.getSpeeds()\n        return None\n\n    def getIsAirborne(self):\n        if self.currentControls:\n            return self.currentControls.getIsAirborne()\n        return False\n\n    def setTag(self, key, value):\n        assert self.notify.debugCall(id(self))\n        for controls in self.controls.values():\n            controls.setTag(key, value)\n\n    def deleteCollisions(self):\n        assert self.notify.debugCall(id(self))\n        for controls in self.controls.values():\n            controls.deleteCollisions()\n\n    def collisionsOn(self):\n        assert self.notify.debugCall(id(self))\n        if self.currentControls:\n            self.currentControls.setCollisionsActive(1)\n\n    def collisionsOff(self):\n        assert self.notify.debugCall(id(self))\n        if self.currentControls:\n            self.currentControls.setCollisionsActive(0)\n\n    def placeOnFloor(self):\n        assert self.notify.debugCall(id(self))\n        if self.currentControls:\n            self.currentControls.placeOnFloor()\n\n    def enable(self):\n        assert self.notify.debugCall(id(self))\n\n        if self.isEnabled:\n            assert self.notify.debug('already isEnabled')\n            return\n\n        self.isEnabled = 1\n\n        # keep track of what we do on the inputState so we can undo it later on\n        #self.inputStateTokens = []\n        ist = self.inputStateTokens\n        ist.append(inputState.watch(\"run\", 'runningEvent', \"running-on\", \"running-off\"))\n\n        ist.append(inputState.watchWithModifiers(\"forward\", \"arrow_up\", inputSource=inputState.ArrowKeys))\n        ist.append(inputState.watch(\"forward\", \"force-forward\", \"force-forward-stop\"))\n\n        ist.append(inputState.watchWithModifiers(\"reverse\", \"arrow_down\", inputSource=inputState.ArrowKeys))\n        ist.append(inputState.watchWithModifiers(\"reverse\", \"mouse4\", inputSource=inputState.Mouse))\n\n        if self.wantWASD:\n            ist.append(inputState.watchWithModifiers(\"turnLeft\", \"arrow_left\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watch(\"turnLeft\", \"mouse-look_left\", \"mouse-look_left-done\"))\n            ist.append(inputState.watch(\"turnLeft\", \"force-turnLeft\", \"force-turnLeft-stop\"))\n\n            ist.append(inputState.watchWithModifiers(\"turnRight\", \"arrow_right\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watch(\"turnRight\", \"mouse-look_right\", \"mouse-look_right-done\"))\n            ist.append(inputState.watch(\"turnRight\", \"force-turnRight\", \"force-turnRight-stop\"))\n\n            ist.append(inputState.watchWithModifiers(\"forward\", \"w\", inputSource=inputState.WASD))\n            ist.append(inputState.watchWithModifiers(\"reverse\", \"s\", inputSource=inputState.WASD))\n\n            ist.append(inputState.watchWithModifiers(\"slideLeft\", \"q\", inputSource=inputState.QE))\n            ist.append(inputState.watchWithModifiers(\"slideRight\", \"e\", inputSource=inputState.QE))\n\n            self.setWASDTurn(self.__WASDTurn)\n        else:\n            ist.append(inputState.watchWithModifiers(\"turnLeft\", \"arrow_left\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watch(\"turnLeft\", \"mouse-look_left\", \"mouse-look_left-done\"))\n            ist.append(inputState.watch(\"turnLeft\", \"force-turnLeft\", \"force-turnLeft-stop\"))\n\n            ist.append(inputState.watchWithModifiers(\"turnRight\", \"arrow_right\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watch(\"turnRight\", \"mouse-look_right\", \"mouse-look_right-done\"))\n            ist.append(inputState.watch(\"turnRight\", \"force-turnRight\", \"force-turnRight-stop\"))\n\n        # Jump controls\n        if self.wantWASD:\n            ist.append(inputState.watchWithModifiers(\"jump\", \"space\"))\n        else:\n            ist.append(inputState.watch(\"jump\", \"control\", \"control-up\"))\n\n        if self.currentControls:\n            self.currentControls.enableAvatarControls()\n\n    def disable(self):\n        assert self.notify.debugCall(id(self))\n        self.isEnabled = 0\n\n        for token in self.inputStateTokens:\n            token.release()\n        self.inputStateTokens = []\n\n        for token in self.WASDTurnTokens:\n            token.release()\n        self.WASDTurnTokens = []\n\n        if self.currentControls:\n            self.currentControls.disableAvatarControls()\n\n        if self.passMessagesThrough: # for not breaking toontown\n            ist=self.inputStateTokens\n            ist.append(inputState.watchWithModifiers(\"forward\", \"arrow_up\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watchWithModifiers(\"reverse\", \"arrow_down\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watchWithModifiers(\"turnLeft\", \"arrow_left\", inputSource=inputState.ArrowKeys))\n            ist.append(inputState.watchWithModifiers(\"turnRight\", \"arrow_right\", inputSource=inputState.ArrowKeys))\n\n    def stop(self):\n        self.disable()\n        if self.currentControls:\n            self.currentControls.setCollisionsActive(0)\n            self.currentControls.setAvatar(None)\n        self.currentControls = None\n\n    def disableAvatarJump(self):\n        \"\"\"\n        prevent\n        \"\"\"\n        assert self.forceAvJumpToken is None\n        self.forceAvJumpToken=inputState.force(\n            \"jump\", 0, 'ControlManager.disableAvatarJump')\n\n    def enableAvatarJump(self):\n        \"\"\"\n        Stop forcing the ctrl key to return 0's\n        \"\"\"\n        assert self.forceAvJumpToken is not None\n        self.forceAvJumpToken.release()\n        self.forceAvJumpToken = None\n\n    def monitor(self, _):\n        #assert self.debugPrint(\"monitor()\")\n        #if 1:\n        #    airborneHeight=self.avatar.getAirborneHeight()\n        #    onScreenDebug.add(\"airborneHeight\", \"% 10.4f\"%(airborneHeight,))\n        #if 0:\n        #    onScreenDebug.add(\"InputState forward\", \"%d\"%(inputState.isSet(\"forward\")))\n        #    onScreenDebug.add(\"InputState reverse\", \"%d\"%(inputState.isSet(\"reverse\")))\n        #    onScreenDebug.add(\"InputState turnLeft\", \"%d\"%(inputState.isSet(\"turnLeft\")))\n        #    onScreenDebug.add(\"InputState turnRight\", \"%d\"%(inputState.isSet(\"turnRight\")))\n        #    onScreenDebug.add(\"InputState slideLeft\", \"%d\"%(inputState.isSet(\"slideLeft\")))\n        #    onScreenDebug.add(\"InputState slideRight\", \"%d\"%(inputState.isSet(\"slideRight\")))\n        return Task.cont\n\n    def setWASDTurn(self, turn):\n        self.__WASDTurn = turn\n\n        if not self.isEnabled:\n            return\n\n        turnLeftWASDSet = inputState.isSet(\"turnLeft\", inputSource=inputState.WASD)\n        turnRightWASDSet = inputState.isSet(\"turnRight\", inputSource=inputState.WASD)\n        slideLeftWASDSet = inputState.isSet(\"slideLeft\", inputSource=inputState.WASD)\n        slideRightWASDSet = inputState.isSet(\"slideRight\", inputSource=inputState.WASD)\n\n        for token in self.WASDTurnTokens:\n            token.release()\n\n        if turn:\n            self.WASDTurnTokens = (\n                inputState.watchWithModifiers(\"turnLeft\", \"a\", inputSource=inputState.WASD),\n                inputState.watchWithModifiers(\"turnRight\", \"d\", inputSource=inputState.WASD),\n            )\n\n            inputState.set(\"turnLeft\", slideLeftWASDSet, inputSource=inputState.WASD)\n            inputState.set(\"turnRight\", slideRightWASDSet, inputSource=inputState.WASD)\n\n            inputState.set(\"slideLeft\", False, inputSource=inputState.WASD)\n            inputState.set(\"slideRight\", False, inputSource=inputState.WASD)\n\n        else:\n            self.WASDTurnTokens = (\n                inputState.watchWithModifiers(\"slideLeft\", \"a\", inputSource=inputState.WASD),\n                inputState.watchWithModifiers(\"slideRight\", \"d\", inputSource=inputState.WASD),\n            )\n\n            inputState.set(\"slideLeft\", turnLeftWASDSet, inputSource=inputState.WASD)\n            inputState.set(\"slideRight\", turnRightWASDSet, inputSource=inputState.WASD)\n\n            inputState.set(\"turnLeft\", False, inputSource=inputState.WASD)\n            inputState.set(\"turnRight\", False, inputSource=inputState.WASD)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/controls/ControlManager.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/76ec7b1d_ControlManager.json",
    "doc_id": "doc_231"
  }
}