{
  "content": "\"\"\"DIRECT Animation Control Panel\"\"\"\n\n__all__ = ['AnimPanel', 'ActorControl']\n\n### SEE END OF FILE FOR EXAMPLE USEAGE ###\n\n# Import Tkinter, Pmw, and the floater code from this directory tree.\nfrom panda3d.core import Filename, getModelPath, ClockObject\nfrom direct.tkwidgets.AppShell import AppShell\nfrom direct.task import Task\nfrom direct.task.TaskManagerGlobal import taskMgr\nfrom tkinter.simpledialog import askfloat\nfrom tkinter.filedialog import askopenfilename\nimport Pmw\nimport os\nimport tkinter as tk\n\n\nFRAMES = 0\nSECONDS = 1\n\n\nclass AnimPanel(AppShell):\n    # Override class variables\n    appname = 'Anim Panel'\n    frameWidth  = 675\n    frameHeight = 250\n    usecommandarea = 0\n    usestatusarea  = 0\n    index = 0\n\n    def __init__(self, aList =  [], parent = None, session = None, **kw):\n        INITOPT = Pmw.INITOPT\n        if isinstance(aList, (list, tuple)):\n            kw['actorList'] = aList\n        else:\n            kw['actorList'] = [aList]\n        optiondefs = (\n            ('title',               self.appname,       None),\n            ('actorList',           [],                 None),\n            ('Actor_label_width',   12,                 None),\n        )\n        self.defineoptions(kw, optiondefs)\n\n        # direct session that spawned me, if any, used\n        # for certain interactions with the session such\n        # as being able to see selected objects/actors\n        self.session = session\n\n        self.frameHeight = 60 + (50 * len(self['actorList']))\n        self.playList =  []\n        self.id = 'AnimPanel_%d' % AnimPanel.index\n        AnimPanel.index += 1\n        # current index used for creating new actor controls\n        self.actorControlIndex = 0\n        # Initialize the superclass\n        AppShell.__init__(self)\n\n        # Execute option callbacks\n        self.initialiseoptions(AnimPanel)\n        # We need to know when AnimPanel is closed\n        self.destroyCallBack = None\n\n    def createInterface(self):\n        # Handle to the toplevels interior\n        interior = self.interior()\n        menuBar = self.menuBar\n\n        menuBar.addmenu('AnimPanel', 'Anim Panel Operations')\n        # Actor control status\n        menuBar.addcascademenu('AnimPanel', 'Control Status',\n                               'Enable/disable actor control panels')\n        menuBar.addmenuitem('Control Status', 'command',\n                            'Enable all actor controls',\n                            label = 'Enable all',\n                            command = self.enableActorControls)\n        menuBar.addmenuitem('Control Status', 'command',\n                            'Disable all actor controls',\n                            label = 'Disable all',\n                            command = self.disableActorControls)\n        # Frame Slider units\n        menuBar.addcascademenu('AnimPanel', 'Display Units',\n                               'Select display units')\n        menuBar.addmenuitem('Display Units', 'command',\n                            'Display frame counts', label = 'Frame count',\n                            command = self.displayFrameCounts)\n        menuBar.addmenuitem('Display Units', 'command',\n                            'Display seconds', label = 'Seconds',\n                            command = self.displaySeconds)\n        # Reset all actor controls\n        menuBar.addmenuitem('AnimPanel', 'command',\n                            'Set actor controls to t = 0.0',\n                            label = 'Jump all to zero',\n                            command = self.resetAllToZero)\n        menuBar.addmenuitem('AnimPanel', 'command',\n                            'Set Actor controls to end time',\n                            label = 'Jump all to end time',\n                            command = self.resetAllToEnd)\n\n        # Add some buttons to update all Actor Controls\n        self.fToggleAll = 1\n        b = self.createcomponent(\n            'toggleEnableButton', (), None,\n            tk.Button, (self.menuFrame,),\n            text = 'Toggle Enable',\n            command = self.toggleAllControls)\n        b.pack(side = tk.RIGHT, expand = 0)\n\n        b = self.createcomponent(\n            'showSecondsButton', (), None,\n            tk.Button, (self.menuFrame,),\n            text = 'Show Seconds',\n            command = self.displaySeconds)\n        b.pack(side = tk.RIGHT, expand = 0)\n\n        b = self.createcomponent(\n            'showFramesButton', (), None,\n            tk.Button, (self.menuFrame,),\n            text = 'Show Frames',\n            command = self.displayFrameCounts)\n        b.pack(side = tk.RIGHT, expand = 0)\n\n        self.actorFrame = None\n        self.createActorControls()\n\n        # Create a frame to hold the playback controls\n        controlFrame = tk.Frame(interior)\n        self.toStartButton = self.createcomponent(\n            'toStart', (), None,\n            tk.Button, (controlFrame,),\n            text = '<<',\n            width = 4,\n            command = self.resetAllToZero)\n        self.toStartButton.pack(side = tk.LEFT, expand = 1, fill = tk.X)\n\n        self.toPreviousFrameButton = self.createcomponent(\n            'toPreviousFrame', (), None,\n            tk.Button, (controlFrame,),\n            text = '<',\n            width = 4,\n            command = self.previousFrame)\n        self.toPreviousFrameButton.pack(side = tk.LEFT, expand = 1, fill = tk.X)\n\n        self.playButton = self.createcomponent(\n            'playButton', (), None,\n            tk.Button, (controlFrame,),\n            text = 'Play', width = 8,\n            command = self.playActorControls)\n        self.playButton.pack(side = tk.LEFT, expand = 1, fill = tk.X)\n\n        self.stopButton = self.createcomponent(\n            'stopButton', (), None,\n            tk.Button, (controlFrame,),\n            text = 'Stop', width = 8,\n            command = self.stopActorControls)\n        self.stopButton.pack(side = tk.LEFT, expand = 1, fill = tk.X)\n\n        self.toNextFrameButton = self.createcomponent(\n            'toNextFrame', (), None,\n            tk.Button, (controlFrame,),\n            text = '>',\n            width = 4,\n            command = self.nextFrame)\n        self.toNextFrameButton.pack(side = tk.LEFT, expand = 1, fill = tk.X)\n\n        self.toEndButton = self.createcomponent(\n            'toEnd', (), None,\n            tk.Button, (controlFrame,),\n            text = '>>',\n            width = 4,\n            command = self.resetAllToEnd)\n        self.toEndButton.pack(side = tk.LEFT, expand = 1, fill = tk.X)\n\n        self.loopVar = tk.IntVar()\n        self.loopVar.set(0)\n        self.loopButton = self.createcomponent(\n            'loopButton', (), None,\n            tk.Checkbutton, (controlFrame,),\n            text = 'Loop', width = 8,\n            variable = self.loopVar)\n        self.loopButton.pack(side = tk.LEFT, expand = 1, fill = tk.X)\n\n        # add actors and animations, only allowed if a direct\n        # session has been specified since these currently require\n        # interaction with selected objects\n        if self.session:\n            menuBar.addmenuitem('File', 'command',\n                                'Set currently selected group of objects as actors to animate.',\n                                label = 'Set Actors',\n                                command = self.setActors)\n            menuBar.addmenuitem('File', 'command',\n                                'Load animation file',\n                                label = 'Load Anim',\n                                command = self.loadAnim)\n\n        controlFrame.pack(fill = tk.X)\n\n    def createActorControls(self):\n        # Create a frame to hold all the actor controls\n        self.actorFrame = tk.Frame(self.interior())\n        # Create a control for each actor\n        self.actorControlList = []\n        for actor in self['actorList']:\n            anims = actor.getAnimNames()\n            print(\"actor animnames: %s\"%anims)\n            topAnims = []\n            if 'neutral' in anims:\n                i = anims.index('neutral')\n                del anims[i]\n                topAnims.append('neutral')\n            if 'walk' in anims:\n                i = anims.index('walk')\n                del anims[i]\n                topAnims.append('walk')\n            if 'run' in anims:\n                i = anims.index('run')\n                del anims[i]\n                topAnims.append('run')\n            anims.sort()\n            anims = topAnims + anims\n            if len(anims) == 0:\n                # no animations set for this actor, don't\n                # display the control panel\n                continue\n#            currComponents = self.components()\n#            if 'actorControl%d' % index in currComponents:\n#                self.destroycomponent('actorControl%d' % index)\n#            ac = self.component('actorControl%d' % index)\n#            if ac is None:\n            ac = self.createcomponent(\n                'actorControl%d' % self.actorControlIndex, (), 'Actor',\n                ActorControl, (self.actorFrame,),\n                animPanel = self,\n                text = actor.getName(),\n                animList = anims,\n                actor = actor)\n            ac.pack(expand = 1, fill = tk.X)\n            self.actorControlList.append(ac)\n            self.actorControlIndex = self.actorControlIndex + 1\n\n        # Now pack the actor frame\n        self.actorFrame.pack(expand = 1, fill = tk.BOTH)\n\n    def clearActorControls(self):\n        if self.actorFrame:\n            self.actorFrame.forget()\n            self.actorFrame.destroy()\n            self.actorFrame = None\n\n    def setActors(self):\n        self.stopActorControls()\n        actors = self.session.getSelectedActors()\n        # make sure selected objects are actors, if not don't\n        # use?\n        aList = []\n        for currActor in actors:\n            aList.append(currActor)\n        self['actorList'] = aList\n\n        self.clearActorControls()\n        self.createActorControls()\n\n    def loadAnim(self):\n        # bring up file open box to allow selection of an\n        # animation file\n        animFilename = askopenfilename(\n            defaultextension = '.mb',\n            filetypes = (('Maya Models', '*.mb'),\n                         ('All files', '*')),\n            initialdir = '/i/beta',\n            title = 'Load Animation',\n            parent = self.component('hull')\n        )\n        if not animFilename or animFilename == 'None':\n            # no file selected, canceled\n            return\n\n        # add directory where animation was loaded from to the\n        # current model path so any further searches for the file\n        # can find it\n        fileDirName = os.path.dirname(animFilename)\n        fileBaseName = os.path.basename(animFilename)\n        fileBaseNameBase = os.path.splitext(fileBaseName)[0]\n        fileDirNameFN = Filename(fileDirName)\n        fileDirNameFN.makeCanonical()\n        getModelPath().prependDirectory(fileDirNameFN)\n        for currActor in self['actorList']:\n            # replace all currently loaded anims with specified one\n#            currActor.unloadAnims(None, None, None)\n            currActor.loadAnims({fileBaseNameBase:fileBaseNameBase})\n        self.clearActorControls()\n        self.createActorControls()\n\n    def playActorControls(self):\n        self.stopActorControls()\n        self.lastT = ClockObject.getGlobalClock().getFrameTime()\n        self.playList = self.actorControlList[:]\n        taskMgr.add(self.play, self.id + '_UpdateTask')\n\n    def play(self, task):\n        if not self.playList:\n            return Task.done\n        fLoop = self.loopVar.get()\n        currT = ClockObject.getGlobalClock().getFrameTime()\n        deltaT = currT - self.lastT\n        self.lastT = currT\n        for actorControl in self.playList:\n            # scale time by play rate value\n            actorControl.play(deltaT * actorControl.playRate, fLoop)\n        return Task.cont\n\n    def stopActorControls(self):\n        taskMgr.remove(self.id + '_UpdateTask')\n\n    def getActorControlAt(self, index):\n        return self.actorControlList[index]\n\n    def enableActorControlAt(self, index):\n        self.getActorControlAt(index).enableControl()\n\n    def toggleAllControls(self):\n        if self.fToggleAll:\n            self.disableActorControls()\n        else:\n            self.enableActorControls()\n        self.fToggleAll = 1 - self.fToggleAll\n\n    def enableActorControls(self):\n        for actorControl in self.actorControlList:\n            actorControl.enableControl()\n\n    def disableActorControls(self):\n        for actorControl in self.actorControlList:\n            actorControl.disableControl()\n\n    def disableActorControlAt(self, index):\n        self.getActorControlAt(index).disableControl()\n\n    def displayFrameCounts(self):\n        for actorControl in self.actorControlList:\n            actorControl.displayFrameCounts()\n\n    def displaySeconds(self):\n        for actorControl in self.actorControlList:\n            actorControl.displaySeconds()\n\n    def resetAllToZero(self):\n        for actorControl in self.actorControlList:\n            actorControl.resetToZero()\n\n    def resetAllToEnd(self):\n        for actorControl in self.actorControlList:\n            actorControl.resetToEnd()\n\n    def nextFrame(self):\n        for actorControl in self.actorControlList:\n            actorControl.nextFrame()\n\n    def previousFrame(self):\n        for actorControl in self.actorControlList:\n            actorControl.previousFrame()\n\n    def setDestroyCallBack(self, callBack):\n        self.destroyCallBack = callBack\n\n    def destroy(self):\n        # First clean up\n        taskMgr.remove(self.id + '_UpdateTask')\n        if self.destroyCallBack is not None:\n            self.destroyCallBack()\n            self.destroyCallBack = None\n        AppShell.destroy(self)\n\n\nclass ActorControl(Pmw.MegaWidget):\n    def __init__(self, parent = None, **kw):\n\n        INITOPT = Pmw.INITOPT\n        DEFAULT_FONT = (('MS', 'Sans', 'Serif'), 12, 'bold')\n        DEFAULT_ANIMS = ('neutral', 'run', 'walk')\n        animList = kw.get('animList', DEFAULT_ANIMS)\n        if len(animList) > 0:\n            initActive = animList[0]\n        else:\n            initActive = DEFAULT_ANIMS[0]\n        optiondefs = (\n            ('text',            'Actor',            self._updateLabelText),\n            ('animPanel',       None,               None),\n            ('actor',           None,               None),\n            ('animList',        DEFAULT_ANIMS,      None),\n            ('active',          initActive,         None),\n            ('sLabel_width',    5,                  None),\n            ('sLabel_font',     DEFAULT_FONT,       None),\n        )\n        self.defineoptions(kw, optiondefs)\n\n        # Initialize the superclass\n        Pmw.MegaWidget.__init__(self, parent)\n\n        # Handle to the toplevels hull\n        interior = self.interior()\n        interior.configure(relief = tk.RAISED, bd = 2)\n\n        # Instance variables\n        self.fps = 24\n        self.offset = 0.0\n        self.maxSeconds = 1.0\n        self.currT = 0.0\n        self.fScaleCommand = 0\n        self.fOneShot = 0\n\n        # Create component widgets\n        self._label = self.createcomponent(\n            'label', (), None,\n            tk.Menubutton, (interior,),\n            font=('MSSansSerif', 14, 'bold'),\n            relief = tk.RAISED, bd = 1,\n            activebackground = '#909090',\n            text = self['text'])\n        # Top level menu\n        labelMenu = tk.Menu(self._label, tearoff = 0)\n\n        # Menu to select display mode\n        self.unitsVar = tk.IntVar()\n        self.unitsVar.set(FRAMES)\n        displayMenu = tk.Menu(labelMenu, tearoff = 0)\n        displayMenu.add_radiobutton(label = 'Frame count',\n                                    value = FRAMES,\n                                    variable = self.unitsVar,\n                                    command = self.updateDisplay)\n        displayMenu.add_radiobutton(label = 'Seconds',\n                                    value = SECONDS,\n                                    variable = self.unitsVar,\n                                    command = self.updateDisplay)\n        # Items for top level menu\n        labelMenu.add_cascade(label = 'Display Units', menu = displayMenu)\n        # labelMenu.add_command(label = 'Set Offset', command = self.setOffset)\n        labelMenu.add_command(label = 'Jump To Zero',\n                              command = self.resetToZero)\n        labelMenu.add_command(label = 'Jump To End Time',\n                              command = self.resetToEnd)\n\n        # Now associate menu with menubutton\n        self._label['menu'] = labelMenu\n        self._label.pack(side = tk.LEFT, fill = tk.X)\n\n        # Combo box to select current animation\n        self.animMenu = self.createcomponent(\n            'animMenu', (), None,\n            Pmw.ComboBox, (interior,),\n            labelpos = tk.W, label_text = 'Anim:',\n            entry_width = 12, selectioncommand = self.selectAnimNamed,\n            scrolledlist_items = self['animList'])\n        self.animMenu.selectitem(self['active'])\n        self.animMenu.pack(side = 'left', padx = 5, expand = 0)\n\n        # Combo box to select frame rate\n        playRateList = ['1/24.0', '0.1', '0.5', '1.0', '2.0', '5.0', '10.0']\n        playRate = '%0.1f' % self['actor'].getPlayRate(self['active'])\n        if playRate not in playRateList:\n            playRateList.append(playRate)\n            playRateList.sort(key=lambda s:eval(s))\n        playRateMenu = self.createcomponent(\n            'playRateMenu', (), None,\n            Pmw.ComboBox, (interior,),\n            labelpos = tk.W, label_text = 'Play Rate:',\n            entry_width = 4, selectioncommand = self.setPlayRate,\n            scrolledlist_items = playRateList)\n        playRateMenu.selectitem(playRate)\n        playRateMenu.pack(side = tk.LEFT, padx = 5, expand = 0)\n\n        # Scale to control animation\n        frameFrame = tk.Frame(interior, relief = tk.SUNKEN, bd = 1)\n        self.minLabel = self.createcomponent(\n            'minLabel', (), 'sLabel',\n            tk.Label, (frameFrame,),\n            text = 0)\n        self.minLabel.pack(side = tk.LEFT)\n\n        self.frameControl = self.createcomponent(\n            'scale', (), None,\n            tk.Scale, (frameFrame,),\n            from_ = 0, to = 24, resolution = 1.0,\n            command = self.goTo,\n            orient = tk.HORIZONTAL, showvalue = 1)\n        self.frameControl.pack(side = tk.LEFT, expand = 1)\n        self.frameControl.bind('<Button-1>', self.__onPress)\n        self.frameControl.bind('<ButtonRelease-1>', self.__onRelease)\n\n        self.maxLabel = self.createcomponent(\n            'maxLabel', (), 'sLabel',\n            tk.Label, (frameFrame,),\n            text = 24)\n        self.maxLabel.pack(side = tk.LEFT)\n        frameFrame.pack(side = tk.LEFT, expand = 1, fill = tk.X)\n\n        # Checkbutton to enable/disable control\n        self.frameActiveVar = tk.IntVar()\n        self.frameActiveVar.set(1)\n        frameActive = self.createcomponent(\n            'checkbutton', (), None,\n            tk.Checkbutton, (interior,),\n            variable = self.frameActiveVar)\n        frameActive.pack(side = tk.LEFT, expand = 1)\n\n        # Execute option callbacks\n        self.initialiseoptions(ActorControl)\n        self.playRate = 1.0\n        self.updateDisplay()\n\n    def _updateLabelText(self):\n        self._label['text'] = self['text']\n\n    def updateDisplay(self):\n        actor = self['actor']\n        active = self['active']\n        self.fps = actor.getFrameRate(active)\n        if self.fps is None:\n            # there was probably a problem loading the\n            # active animation, set default anim properties\n            print(\"unable to get animation fps, zeroing out animation info\")\n            self.fps = 24\n            self.duration = 0\n            self.maxFrame = 0\n            self.maxSeconds = 0\n        else:\n            self.duration = actor.getDuration(active)\n            self.maxFrame = actor.getNumFrames(active) - 1\n            self.maxSeconds = self.offset + self.duration\n        # switch between showing frame counts and seconds\n        if self.unitsVar.get() == FRAMES:\n            # these are approximate due to discrete frame size\n            fromFrame = 0\n            toFrame = self.maxFrame\n            self.minLabel['text'] = fromFrame\n            self.maxLabel['text'] = toFrame\n            self.frameControl.configure(from_ = fromFrame,\n                                        to = toFrame,\n                                        resolution = 1.0)\n        else:\n            self.minLabel['text'] = '0.0'\n            self.maxLabel['text'] = \"%.2f\" % self.duration\n            self.frameControl.configure(from_ = 0.0,\n                                        to = self.duration,\n                                        resolution = 0.01)\n\n    def __onPress(self, event):\n        # Enable slider command\n        self.fScaleCommand = 1\n\n    def __onRelease(self, event):\n        # Disable slider command\n        self.fScaleCommand = 0\n\n    def selectAnimNamed(self, name):\n        # Update active anim\n        self['active'] = name\n        # Reset play rate\n        self.component('playRateMenu').selectitem('1.0')\n        self.setPlayRate('1.0')\n        # Move slider to zero\n        self.resetToZero()\n\n    def setPlayRate(self, rate):\n        # set play rate on the actor, although for the AnimPanel\n        # purpose we don't use the actor's play rate, but rather\n        # the self.playRate value since we drive the animation\n        # playback ourselves\n        self['actor'].setPlayRate(eval(rate), self['active'])\n        self.playRate = eval(rate)\n        self.updateDisplay()\n\n    def setOffset(self):\n        newOffset = askfloat(parent = self.interior(),\n                             title = self['text'],\n                             prompt = 'Start offset (seconds):')\n        if newOffset is not None:\n            self.offset = newOffset\n            self.updateDisplay()\n\n    def enableControl(self):\n        self.frameActiveVar.set(1)\n\n    def disableControl(self):\n        self.frameActiveVar.set(0)\n\n    def displayFrameCounts(self):\n        self.unitsVar.set(FRAMES)\n        self.updateDisplay()\n\n    def displaySeconds(self):\n        self.unitsVar.set(SECONDS)\n        self.updateDisplay()\n\n    def play(self, deltaT, fLoop):\n        if self.frameActiveVar.get():\n            # Compute new time\n            self.currT = self.currT + deltaT\n            if fLoop and self.duration:\n                # If its looping compute modulo\n                loopT = self.currT % self.duration\n                self.goToT(loopT)\n            else:\n                if self.currT > self.maxSeconds:\n                    # Clear this actor control from play list\n                    self['animPanel'].playList.remove(self)\n                else:\n                    self.goToT(self.currT)\n        else:\n            # Clear this actor control from play list\n            self['animPanel'].playList.remove(self)\n\n    def goToF(self, f):\n        if self.unitsVar.get() == FRAMES:\n            self.frameControl.set(f)\n        else:\n            self.frameControl.set(f / self.fps)\n\n    def goToT(self, t):\n        if self.unitsVar.get() == FRAMES:\n            self.frameControl.set(t * self.fps)\n        else:\n            self.frameControl.set(t)\n\n    def goTo(self, t):\n        # Convert scale value to float\n        t = float(t)\n        # Now convert t to seconds for offset calculations\n        if self.unitsVar.get() == FRAMES:\n            t = t / self.fps\n        # Update currT\n        if self.fScaleCommand or self.fOneShot:\n            self.currT = t\n            self.fOneShot = 0\n        # Now update actor (pose specifed as frame count)\n        self['actor'].pose(self['active'],\n                           min(self.maxFrame, int(t * self.fps)))\n\n    def resetToZero(self):\n        # This flag forces self.currT to be updated to new value\n        self.fOneShot = 1\n        self.goToT(0)\n\n    def resetToEnd(self):\n        # This flag forces self.currT to be updated to new value\n        self.fOneShot = 1\n        self.goToT(self.duration)\n\n    def nextFrame(self):\n        \"\"\"\n        There needed to be a better way to select an exact frame number\n        as the control slider doesn't have the desired resolution\n        \"\"\"\n        self.fOneShot = 1\n        self.goToT((self.currT+(1/self.fps))%self.duration)\n\n    def previousFrame(self):\n        \"\"\"\n        There needed to be a better way to select an exact frame number\n        as the control slider doesn't have the desired resolution\n        \"\"\"\n        self.fOneShot = 1\n        self.goToT((self.currT-(1/self.fps))%self.duration)\n\n\n\"\"\"\n# EXAMPLE CODE\nfrom direct.actor import Actor\nimport AnimPanel\n\na = Actor.Actor({250:{\"head\":\"phase_3/models/char/dogMM_Shorts-head-250\",\n                      \"torso\":\"phase_3/models/char/dogMM_Shorts-torso-250\",\n                      \"legs\":\"phase_3/models/char/dogMM_Shorts-legs-250\"},\n                 500:{\"head\":\"phase_3/models/char/dogMM_Shorts-head-500\",\n                      \"torso\":\"phase_3/models/char/dogMM_Shorts-torso-500\",\n                      \"legs\":\"phase_3/models/char/dogMM_Shorts-legs-500\"},\n                 1000:{\"head\":\"phase_3/models/char/dogMM_Shorts-head-1000\",\n                      \"torso\":\"phase_3/models/char/dogMM_Shorts-torso-1000\",\n                      \"legs\":\"phase_3/models/char/dogMM_Shorts-legs-1000\"}},\n                {\"head\":{\"walk\":\"phase_3/models/char/dogMM_Shorts-head-walk\", \\\n                         \"run\":\"phase_3/models/char/dogMM_Shorts-head-run\"}, \\\n                 \"torso\":{\"walk\":\"phase_3/models/char/dogMM_Shorts-torso-walk\", \\\n                          \"run\":\"phase_3/models/char/dogMM_Shorts-torso-run\"}, \\\n                 \"legs\":{\"walk\":\"phase_3/models/char/dogMM_Shorts-legs-walk\", \\\n                         \"run\":\"phase_3/models/char/dogMM_Shorts-legs-run\"}})\na.attach(\"head\", \"torso\", \"joint-head\", 250)\na.attach(\"torso\", \"legs\", \"joint-hips\", 250)\na.attach(\"head\", \"torso\", \"joint-head\", 500)\na.attach(\"torso\", \"legs\", \"joint-hips\", 500)\na.attach(\"head\", \"torso\", \"joint-head\", 1000)\na.attach(\"torso\", \"legs\", \"joint-hips\", 1000)\na.drawInFront(\"joint-pupil?\", \"eyes*\", -1, lodName=250)\na.drawInFront(\"joint-pupil?\", \"eyes*\", -1, lodName=500)\na.drawInFront(\"joint-pupil?\", \"eyes*\", -1, lodName=1000)\na.setLOD(250, 250, 75)\na.setLOD(500, 75, 15)\na.setLOD(1000, 15, 1)\na.fixBounds()\na.reparentTo(render)\n\n\na2 = Actor.Actor({250:{\"head\":\"phase_3/models/char/dogMM_Shorts-head-250\",\n                      \"torso\":\"phase_3/models/char/dogMM_Shorts-torso-250\",\n                      \"legs\":\"phase_3/models/char/dogMM_Shorts-legs-250\"},\n                 500:{\"head\":\"phase_3/models/char/dogMM_Shorts-head-500\",\n                      \"torso\":\"phase_3/models/char/dogMM_Shorts-torso-500\",\n                      \"legs\":\"phase_3/models/char/dogMM_Shorts-legs-500\"},\n                 1000:{\"head\":\"phase_3/models/char/dogMM_Shorts-head-1000\",\n                      \"torso\":\"phase_3/models/char/dogMM_Shorts-torso-1000\",\n                      \"legs\":\"phase_3/models/char/dogMM_Shorts-legs-1000\"}},\n                {\"head\":{\"walk\":\"phase_3/models/char/dogMM_Shorts-head-walk\", \\\n                         \"run\":\"phase_3/models/char/dogMM_Shorts-head-run\"}, \\\n                 \"torso\":{\"walk\":\"phase_3/models/char/dogMM_Shorts-torso-walk\", \\\n                          \"run\":\"phase_3/models/char/dogMM_Shorts-torso-run\"}, \\\n                 \"legs\":{\"walk\":\"phase_3/models/char/dogMM_Shorts-legs-walk\", \\\n                         \"run\":\"phase_3/models/char/dogMM_Shorts-legs-run\"}})\na2.attach(\"head\", \"torso\", \"joint-head\", 250)\na2.attach(\"torso\", \"legs\", \"joint-hips\", 250)\na2.attach(\"head\", \"torso\", \"joint-head\", 500)\na2.attach(\"torso\", \"legs\", \"joint-hips\", 500)\na2.attach(\"head\", \"torso\", \"joint-head\", 1000)\na2.attach(\"torso\", \"legs\", \"joint-hips\", 1000)\na2.drawInFront(\"joint-pupil?\", \"eyes*\", -1, lodName=250)\na2.drawInFront(\"joint-pupil?\", \"eyes*\", -1, lodName=500)\na2.drawInFront(\"joint-pupil?\", \"eyes*\", -1, lodName=1000)\na2.setLOD(250, 250, 75)\na2.setLOD(500, 75, 15)\na2.setLOD(1000, 15, 1)\na2.fixBounds()\na2.reparentTo(render)\n\nap = AnimPanel.AnimPanel([a, a2])\n\n# Alternately\nap = a.animPanel()\nap2 = a2.animPanel()\n\n\"\"\"\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/tkpanels/AnimPanel.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/c5cd6f61_AnimPanel.json",
    "doc_id": "doc_61"
  }
}