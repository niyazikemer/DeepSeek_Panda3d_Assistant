{
  "content": "# pylint: skip-file\n\n\"\"\"\n>>> from direct.showbase import ObjectReport\n\n>>> o=ObjectReport.ObjectReport('baseline')\n>>> run()\n...\n\n>>> o2=ObjectReport.ObjectReport('')\n>>> o.diff(o2)\n\"\"\"\n\nfrom __future__ import annotations\n\n__all__ = ['ExclusiveObjectPool', 'ObjectReport']\n\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.showbase.ObjectPool import ObjectPool\nfrom direct.showbase.GarbageReport import GarbageReport\nfrom direct.showbase.PythonUtil import makeList, Sync, SerialNumGen\nimport gc\nimport sys\nimport builtins\n\n\nclass ExclusiveObjectPool(DirectObject):\n    # ObjectPool specialization that excludes particular objects\n    # IDs of objects to globally exclude from reporting\n    _ExclObjs: list[object] = []\n    _ExclObjIds: dict[int, int] = {}\n    _SyncMaster = Sync('ExclusiveObjectPool.ExcludedObjectList')\n    _SerialNumGen = SerialNumGen()\n\n    @classmethod\n    def addExclObjs(cls, *objs):\n        for obj in makeList(objs):\n            if id(obj) not in cls._ExclObjIds:\n                cls._ExclObjs.append(obj)\n            cls._ExclObjIds.setdefault(id(obj), 0)\n            cls._ExclObjIds[id(obj)] += 1\n        cls._SyncMaster.change()\n\n    @classmethod\n    def removeExclObjs(cls, *objs):\n        for obj in makeList(objs):\n            assert id(obj) in cls._ExclObjIds\n            cls._ExclObjIds[id(obj)] -= 1\n            if cls._ExclObjIds[id(obj)] == 0:\n                del cls._ExclObjIds[id(obj)]\n                cls._ExclObjs.remove(obj)\n        cls._SyncMaster.change()\n\n    def __init__(self, objects):\n        self._objects = list(objects)\n        self._postFilterObjs = []\n        self._sync = Sync('%s-%s' % (self.__class__.__name__,\n                                     self._SerialNumGen.next()),\n                          self._SyncMaster)\n        self._sync.invalidate()\n        ExclusiveObjectPool.addExclObjs(self._objects, self._postFilterObjs,\n                                        self._sync)\n\n    def destroy(self):\n        self.ignoreAll()\n        ExclusiveObjectPool.removeExclObjs(self._objects, self._postFilterObjs,\n                                           self._sync)\n        del self._objects\n        del self._postFilterObjs\n        del self._sync\n\n    def _resync(self):\n        if self._sync.isSynced(self._SyncMaster):\n            return\n        if hasattr(self, '_filteredPool'):\n            ExclusiveObjectPool.removeExclObjs(*self._filteredPool._getInternalObjs())\n            ExclusiveObjectPool.removeExclObjs(self._filteredPool)\n            del self._filteredPool\n        del self._postFilterObjs[:]\n        for obj in self._objects:\n            if id(obj) not in ExclusiveObjectPool._ExclObjIds:\n                self._postFilterObjs.append(obj)\n        self._filteredPool = ExclusiveObjectPool(self._postFilterObjs)\n        ExclusiveObjectPool.addExclObjs(self._filteredPool)\n        ExclusiveObjectPool.addExclObjs(*self._filteredPool._getInternalObjs())\n        self._sync.sync(self._SyncMaster)\n\n    def getObjsOfType(self, type):\n        self._resync()\n        return self._filteredPool.getObjsOfType(type)\n\n    def printObjsOfType(self, type):\n        self._resync()\n        return self._filteredPool.printObjsOfType(type)\n\n    def diff(self, other):\n        self._resync()\n        return self._filteredPool.diff(other._filteredPool)\n\n    def typeFreqStr(self):\n        self._resync()\n        return self._filteredPool.typeFreqStr()\n\n    def __len__(self):\n        self._resync()\n        return len(self._filteredPool)\n\n\nclass ObjectReport:\n    \"\"\"report on every Python object in the current process\"\"\"\n    notify = directNotify.newCategory('ObjectReport')\n\n    def __init__(self, name, log=True):\n        gr = GarbageReport('ObjectReport\\'s GarbageReport: %s' % name, log=log)\n        gr.destroy()\n        del gr\n        self._name = name\n        self._pool = ObjectPool(self._getObjectList())\n        #ExclusiveObjectPool.addExclObjs(self, self._pool, self._name)\n        if log:\n            self.notify.info('===== ObjectReport: \\'%s\\' =====\\n%s' % (self._name, self.typeFreqStr()))\n\n    def destroy(self):\n        #ExclusiveObjectPool.removeExclObjs(self, self._pool, self._name)\n        self._pool.destroy()\n        del self._pool\n        del self._name\n\n    def typeFreqStr(self):\n        return self._pool.typeFreqStr()\n\n    def diff(self, other):\n        return self._pool.diff(other._pool)\n\n    def getObjectPool(self):\n        return self._pool\n\n    def _getObjectList(self):\n        if hasattr(sys, 'getobjects'):\n            return sys.getobjects(0)\n        else:\n            gc.collect()\n            # grab gc's object list\n            gc_objects = gc.get_objects()\n            # use get_referents to find everything else\n            objects = gc_objects\n            objects.append(builtins.__dict__)\n            nextObjList = gc_objects\n            found = set()\n            found.add(id(objects))\n            found.add(id(found))\n            found.add(id(gc_objects))\n            for obj in objects:\n                found.add(id(obj))\n            # repeatedly call get_referents until we can't find any more objects\n            while len(nextObjList) > 0:\n                curObjList = nextObjList\n                nextObjList = []\n                for obj in curObjList:\n                    refs = gc.get_referents(obj)\n                    for ref in refs:\n                        if id(ref) not in found:\n                            found.add(id(ref))\n                            objects.append(ref)\n                            nextObjList.append(ref)\n            return objects\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/ObjectReport.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/edd88549_ObjectReport.json",
    "doc_id": "doc_258"
  }
}