{
  "content": "Lerp Intervals\n\nThe \"lerp interval\" is the main workhorse of the Interval system. The word \"lerp\" is short for \"linearly interpolate\" and means to smoothly adjust properties, such as position, from one value to another over a period of time. You can use lerp intervals to move and rotate objects around in your world. The lerp interval is also the most complex of all of the intervals, since there are many different parameters that you might want to specify to control the lerp.\n\npython\n\nAn overview of the NodePath-based LerpIntervals\n\nMost LerpIntervals adjust the various transform properties of a NodePath, such as pos, hpr, and scale, and they all have a similar form. Consider the LerpPosInterval, which will smoothly move a model from one point in space to another:\n\nfrom direct.interval.LerpInterval import LerpPosInterval\ni = LerpPosInterval(nodePath,\n                    duration,\n                    pos,\n                    startPos=None,\n                    other=None,\n                    blendType='noBlend',\n                    bakeInStart=1,\n                    fluid=0,\n                    name=None)\n\nThe only required parameters are the model whose position is being changed, the length of time to apply the move, and the model's new position. The remaining parameters are all optional and are often omitted. Here is a breakdown of what each parameter means:\n\nConvenience Short-Hands\n\nVarious convenience methods are defined on the NodePath class which provide a short-hand syntax for creating a LerpInterval for that NodePath. These are called posInterval(), hprInterval(), quatInterval, and so on. As an example:\n\n# This lets the actor move to point 10, 10, 10 in 1.0 second.\nmyInterval1 = myActor.posInterval(1.0, Point3(10, 10, 10))\n\n# This move takes 2.0 seconds to complete.\nmyInterval2 = myActor.posInterval(2.0, Point3(8, -5, 10))\n\n# You can specify a starting position, too.\nmyInterval3 = myActor.posInterval(1.0, Point3(2, -3, 8), startPos=Point3(2, 4, 1))\n\n# This rotates the actor 180 degrees on heading and 90 degrees on pitch.\nmyInterval4 = myActor.hprInterval(1.0, Vec3(180, 90, 0))\n\nThe rest of the NodePath-based LerpIntervals\n\nMany NodePath properties other than position may be controlled via a lerp. Here is the list of the various LerpIntervals that control NodePath properties:\n\nLerpPosInterval(nodePath, duration, pos, startPos)\nLerpHprInterval(nodePath, duration, hpr, startHpr)\nLerpQuatInterval(nodePath, duration, quat, startHpr, startQuat)\nLerpScaleInterval(nodePath, duration, scale, startScale)\nLerpShearInterval(nodePath, duration, shear, startShear)\nLerpColorInterval(nodePath, duration, color, startColor)\nLerpColorScaleInterval(nodePath, duration, colorScale, startColorScale)\n\nEach of the above has a similar set of parameters as those of LerpPosInterval. They also have a similar shortcut (e.g. model.hprInterval(), etc.) Finally, there is a handful of combination LerpIntervals that perform multiple lerps at the same time. (You can also achieve the same effect by combining several LerpIntervals within a Parallel <sequences-and-parallels>, but these combination intervals are often simpler to use, and they execute just a bit faster.)\n\nLerpPosHprInterval(nodePath, duration, pos, hpr, startPos, startHpr)\nLerpPosQuatInterval(nodePath, duration, pos, quat, startPos, startQuat)\nLerpHprScaleInterval(nodePath, duration, hpr, scale, startHpr, startScale)\nLerpQuatScaleInterval(nodePath, duration, quat, scale, startQuat, startScale)\nLerpPosHprScaleInterval(nodePath, duration, pos, hpr, scale, startPos, startHpr, startScale)\nLerpPosQuatScaleInterval(nodePath, duration, pos, quat, scale, startPos, startQuat, startScale)\nLerpPosHprScaleShearInterval(nodePath, duration, pos, hpr, scale, shear, startPos, startHpr, startScale, startShear)\nLerpPosQuatScaleShearInterval(nodePath, duration, pos, quat, scale, shear, startPos, startQuat, startScale, startShear)\n\nOther types of LerpInterval\n\nBeyond animating NodePaths, you can create a LerpInterval that blends any parameter of any object over time. This can be done with a LerpFunctionInterval:\n\ndef myFunction(t):\n    # Do something based on t.\n\ni = LerpFunc(myFunction,\n             fromData=0,\n             toData=1,\n             duration=0.0,\n             blendType='noBlend',\n             extraArgs=[],\n             name=None)\n\nThis advanced interval has many things in common with all of the above LerpIntervals, but instead of directly animating a value, it instead calls the function you specify, passing a single floating-point parameter, t, that ranges from fromData to toData over the duration of the interval. It is then up to your function to set whatever property of whatever object you like according to the current value of t.\n\ncpp\n\nSee the API reference for .CLerpNodePathInterval to understand how to construct such an interval.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/72ea72c8_lerp-intervals.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/68f307f6_72ea72c8_lerp-intervals.json",
    "doc_id": "doc_487"
  }
}