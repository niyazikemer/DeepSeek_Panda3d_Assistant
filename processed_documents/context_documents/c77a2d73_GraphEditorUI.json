{
  "content": "\"\"\"\nDefines Graph Editor\n\"\"\"\nimport wx\nimport math\nfrom . import ObjectGlobals as OG\nfrom . import AnimGlobals as AG\nfrom wx.lib.embeddedimage import PyEmbeddedImage\n\nproperty =  [\n    \"translateX\",\n    \"translateY\",\n    \"translateZ\"\n]\n\n#----------------------------------------------------------------------\nZoomIn = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACgklE\"\n    \"QVRIid3VW0vjQBQA4DlJMziZlCKCSB/9Bf4a3wRtNU6SHyXK6pay2nVbQbasskXFO15SqmwL\"\n    \"LtYnn7Zg20zSyT50wZikXsCHxXk9Z74ZZuacgebtLXrvIb27+PFQjDEADIoqiiLL8htQAMAY\"\n    \"Hx4dPTw8SHEuIaRWqzWbzUQi8SoUAIaGhgqFgn15SSn1Iwmqqh4fH5c2NpLJpO8/xhORzEeR\"\n    \"EJLL5VqtViaT8TxPCBFMoJTu7e1tb28zxpLJpOu6L6D9PS6vrHQ6nWw267puVNzZ2alUKqZh\"\n    \"UE0LivFoX/y0vOxynpmZ4ZxHxZ+Vyu7urmmaqqqGxBhUkiSM8eLiIgDMTE87EVHTtB9bW4cH\"\n    \"B5ZpEkKiYhjt3/XCwoKiKFNTU47jRPf4vVw+PTmxLAtjHCs+QQEAAJaWljRNm5yc7Ha7wQtF\"\n    \"CGGMy+WybduWZSmK4nlerIiCTwoAOOfX19cTExMSgPDDT0iSJNu2x8fHU6nUM+ITVAhBCLFM\"\n    \"83MuV63VKCGhVM65ruv1RqNYLFJKX4UihFzXTafTc7Oz+XzerlZVVQ1GhRCyLJuGcXV1VSqV\"\n    \"QtGBKEKo6zhjY2Pzur66tnZxcRGa2ev1AMA0zXqj8W3wfmPK1HGc0dFRNj//dX397Ows6iKE\"\n    \"DMZ+39wUCgVKabTXxNe+4zgjIyMGY8VS6eT0NOr6vs8Yu7u7+7K6SggJuQMbCud8eHjYYGxz\"\n    \"c3N/f19RlJDb6/V0Xb+/v8/n829ofZzzVCqlz82dn5//abUk6UmyEEIIkc1k2u32r3o9uCq8\"\n    \"+PHJsuz7vud5IfTffABZljnnwejLnb9/grEiQih2vVd9J36kup4fH+w3/S/QvwejQg8ibHgo\"\n    \"AAAAAElFTkSuQmCC\")\n\n#----------------------------------------------------------------------\nZoomOut = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACmUlE\"\n    \"QVRIieXVz0sbQRQH8NmdH8smh3jwEIIlB+tNEW1NVps0WxPBv0BQXKQx4N2/xR2xTYQ9iIHc\"\n    \"/A+shyqevHiQVBGLeqgoxM1kNjHTQ8DayWb14KX0Hfe9+fDd4bGr/Ly4AK9d6quL/y6qKIqm\"\n    \"aQHThBBVfT7HnwlFUTjn3/f3MUKKoviMqurh4WG9XkcIvRQVQoRCodPT0+1yWdO0bhchxD2v\"\n    \"WCxyzjHGL0IBAA8PD9biIgDAcRxN06Q39Tzvk2kahmHbNmMswP3rmBCi0WhYlkUI2dzcxBhL\"\n    \"ruu6mUwmnU6v2bbrur1c+dY77sLCQjgcLpVKGKFuN5VKmaZpU1qr1Qghz6OP7vz8fF9f39di\"\n    \"Efq5H6amcrkcpfTu7q7b9d8PIQRjbG5urr+//8vGBoSw200mErOzs3R9/fb2VnLh6uqqrwsA\"\n    \"aLVao6OjV9fX3/b2RkZGJLfZbMbj8UgkUqlU3g4NhcNhIURQ0k612+12u/1ufPxHtcoY6157\"\n    \"z/OGh4fv7++vLi8hhI/Pg9ZY1/Xz83PHcVZWViKRSLPZfNpFCHmeRynNZrNjY2ONRuOx1TOp\"\n    \"rutnZ2eO41iWNTg4KIkYY875mm2/n5iYnp5+KvZMqut6tVrd2tpaWlqKx+OMMUmsM0YpnZqc\"\n    \"NE3TdV3puA+q6/rJycl2ufw5n38zMCClwBjXXdem9GMmk06lukUfNBQKHR8fVyqVwvJyLBaT\"\n    \"REJIrVbr3KNhGL6ijGKMj46OdnZ2CoVCNBqVRAjhr5ubUqmUm5kxksleIpA+fYyxg4ODfD4f\"\n    \"jUY559IohHB3dzebzSYTiQARAKA8/fEJIVRVhRC2Wi3faSEEIUTahKCknbAAgF4iAEBV1WdF\"\n    \"Ge1kCZgO7vZEX6X+c/Q3Qy8zmmCLWqIAAAAASUVORK5CYII=\")\n\n#----------------------------------------------------------------------\nOneTangent = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACKUlE\"\n    \"QVRIia2Wz2saURDH5/3Yt6aVsE3SomArGO0phxCSU6A2EFgSklP+qPwrXkOQkBCoaG8eQrBQ\"\n    \"KRYVU1tabUij3V1337weAtZI1FX3e9qF2c/OzJv9zpKbRgMGRAhRSsF8oo9uOCeUMk0LDEo1\"\n    \"rVUuF46Pv2SzhDEgJBhoLZer5/OViwu32yWUjnlsvHj/SrluPJ222m3GORMC5ugsGTwoyjkT\"\n    \"4nuxeFetvj06ko4zG/RRjeh5rmVFNjeZrt8UCnxhIQAoAIBSnm0n9vb+1Gq/y2Wm60FAAUAp\"\n    \"UGr18LCRz9vtNuH8iZipoQAopW4Yb3Z2vmazgDjtJIyMlo7zIpUyksnq2RkTIhgoAHiWFdve\"\n    \"RsTmx4IuNP/ZToiUvV7CNNt3natb61b57cKEMIXIOeu+N0uof5IaEl8f7+R3K1SG8sKc0FqF\"\n    \"oPTjCZOhEiDF0Vyk8da3+occC4UCgAKAAhBe73X6Xa/T+VEs8klcv0eKCtD1kgcHP6+v7xsN\"\n    \"OtZzp5hqhUh1PbG/Xz0/l5ZFGAsACgDous+j0cjWVuX0lI428qmdWNr2q/X10NJS/fJyVHNn\"\n    \"sXfPtuO7u39brV+lkgiHmRBDKZOhbepThDHpOJ8zmZ7jLMZiq6YJhPSXxYyLSEkZMgx9ebl8\"\n    \"clLKZO6bTTbgkFN7ZV+e47xcW4tubIQjkWcrKyjl/zpmK/9BlDH0vIfZUogBZAoAKCWhVCk1\"\n    \"tHrnggLAk/9I/wC0eekA1bLbIQAAAABJRU5ErkJggg==\")\n\n#----------------------------------------------------------------------\nTwoTangents = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAABwAAAAcCAIAAAD9b0jDAAAAA3NCSVQICAjb4U/gAAACL0lE\"\n    \"QVRIie3UzU8TQRQA8DczO1vatRgh1YhWD/WD+kG91FgOXLhx4+CpiYnE9L8g/gVwJHhp4lUP\"\n    \"pPHgQRMOGiEaDabV1LRAtdjUAG23m3W/Znc8YEo/trRNOGjCO+7M++3MezODdopFOO7Axy6e\"\n    \"oC0oAqAEY4QGyCcE4faVtaII7dQUy7b7dDEheq3GdB0R4o76KH2+kZ158uzxyzcO56iXS0Rx\"\n    \"N5tdnZ9fW1w0FaXZPUQxRl/Le7+q8mruh2paQsem2kLweCq5XGVrq7K5adTruGk+ahx+AeOS\"\n    \"rLz4ktctdtYvPYje0i3Gu22cUr1a3VheHg6FhoPBC9EoBwDO21EOQDH2igIALL39NOrz3r8z\"\n    \"rppWp3jQmQ8LC5enp4NTU0zTmGG0/PJwKgBzHEU3VcN6eHfie7X++ltBEmknSoaG0snkSDg8\"\n    \"Njmp12ptIrieU4dzAEjEIu8KPz8Wy14qNI9SScqvrHCA67Ozlqq6F8f1K3McL6WPYpFUOre9\"\n    \"L3uEv50VfL7S+vpuJjMxN8cMo1HEvlAAMG37nF+KR28+fZ/e/62JBAuiWC8U8qlUJJFAhHDH\"\n    \"6ZZ71LnRLXY1MDJzI5Rc+6wwR5PlTDIZjsd9gYBjuTSwEajneypR4dV2qXxq1F/dG5fLodg9\"\n    \"U9OOThGOHgYAg7FrF8fKKqjng/4rl+xeYl+ozeEMsNsiwmCftnnXQg6EcgABICxyAGAcut2x\"\n    \"wdADt+uFdYv/9OU/Qf9d9A9dhOgRU8MmewAAAABJRU5ErkJggg==\")\n\n#----------------------------------------------------------------------\n\n\nclass GraphEditorWindow(wx.Window):\n    \"\"\"\n    This is the main graph editor window.\n    \"\"\"\n\n    def __init__(self, parent, windowSize, property, xRange, yRange, curFrame, object):\n        wx.Window.__init__(self, parent, size = windowSize, style = wx.SUNKEN_BORDER)\n\n        self._mainDialog = wx.GetTopLevelParent(self)\n        self.w,self.h = self.GetClientSize()\n\n        self.zoom = 2.0\n        self._mouseIn = False\n        self._selectRec = False\n        self._selectHandler = False\n        self._OneTangent = True\n\n        self.object = object\n        self.curFrame = curFrame\n        self.property = property\n\n        self.zeroPos = (0.0, self.h / 2.0)\n        self.zero = 0\n        self.unitWidth = self.w / float(xRange)\n        self.unitHeight = self.h / float(yRange)\n\n        self.generateInfo()\n        self.InitBuffer()\n\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n        self.Bind(wx.EVT_SIZE, self.OnSize)\n        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)\n        self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)\n        self.Bind(wx.EVT_MIDDLE_DOWN, self.OnMiddleDown)\n        self.Bind(wx.EVT_MIDDLE_UP, self.OnMiddleUp)\n        self.Bind(wx.EVT_MOTION, self.OnMotion)\n\n    def refresh(self):\n        self._mouseIn = False\n        self._selectRec = False\n        self._selectHandler = False\n        self.generateInfo()\n\n    def generateInfo(self):\n        #generate the information for animation curve generation\n        self.X = []\n        self.Y = []\n        self.Z = []\n\n        if self._mainDialog.editor.animMgr.keyFramesInfo != {}:\n            self.keyFramesInfo = self._mainDialog.editor.animMgr.keyFramesInfo\n            for key in self.keyFramesInfo:\n                if key == (self.object[OG.OBJ_UID], 'X'):\n                    for i in range(len(self.keyFramesInfo[key])):\n                        item = self.keyFramesInfo[key][i]\n                        handler = self.generateHandler(item)\n                        self.X.append([key, i, handler[0], handler[1], handler[2], handler[3], handler[4]])\n                if key == (self.object[OG.OBJ_UID], 'Y'):\n                    for i in range(len(self.keyFramesInfo[key])):\n                        item = self.keyFramesInfo[key][i]\n                        handler = self.generateHandler(item)\n                        self.Y.append([key, i, handler[0], handler[1], handler[2], handler[3], handler[4]])\n                if key == (self.object[OG.OBJ_UID], 'Z'):\n                    for i in range(len(self.keyFramesInfo[key])):\n                        item = self.keyFramesInfo[key][i]\n                        handler = self.generateHandler(item)\n                        self.Z.append([key, i, handler[0], handler[1], handler[2], handler[3], handler[4]])\n\n    def generateHandler(self, item):\n        #generate the position for the control handler\n        x1 = self.zeroPos[0] + float(item[AG.FRAME])*self.unitWidth\n        y1 = self.zeroPos[1] - float(item[AG.VALUE])*self.unitHeight\n\n        t1x = item[AG.INSLOPE][0]*self.unitWidth\n        t1y = item[AG.INSLOPE][1]*self.unitHeight\n\n        t2x = item[AG.OUTSLOPE][0]*self.unitWidth\n        t2y = item[AG.OUTSLOPE][1]*self.unitHeight\n\n        tanA = t1y / t1x\n        temp1 = 1.0 / (tanA ** 2 + 1)\n        if t1x < 0:\n            cosA = -math.sqrt(abs(temp1))\n        if t1x >= 0:\n            cosA = math.sqrt(abs(temp1))\n        temp2 = (tanA ** 2) * temp1\n        if t1y < 0:\n            sinA = -math.sqrt(abs(temp2))\n        if t1y >= 0:\n            sinA = math.sqrt(abs(temp2))\n\n        x2 = x1-float(self.unitWidth*self.zoom)*cosA\n        y2 = y1+float(self.unitWidth*self.zoom)*sinA\n\n        tanA = t2y / t2x\n        temp1 = 1.0 / (tanA ** 2 + 1)\n        if t2x < 0:\n            cosA = -math.sqrt(abs(temp1))\n        if t2x >= 0:\n            cosA = math.sqrt(abs(temp1))\n        temp2 = (tanA ** 2) * temp1\n        if t2y < 0:\n            sinA = -math.sqrt(abs(temp2))\n        if t2y >= 0:\n            sinA = math.sqrt(abs(temp2))\n\n        x3 = x1+float(self.unitWidth*self.zoom)*cosA\n        y3 = y1-float(self.unitWidth*self.zoom)*sinA\n\n        return [[(x1,y1),0],[(x2,y2),0],[(x3,y3),0],[t1x,t1y],[t2x,t2y]]\n\n    def InitBuffer(self):\n        self.buffer = wx.EmptyBitmap(self.w, self.h)\n        dc = wx.BufferedDC(wx.ClientDC(self), self.buffer)\n        self.DrawXCoord(dc)\n        self.DrawYCoord(dc)\n        self.DrawFrame(dc)\n        self.DrawCurve(dc)\n        self.DrawSelectRec(dc)\n\n    def SetGraphEditorData(self, property, curFrame = 1):\n        self.curFrame = curFrame\n        self.property = property\n\n        self.InitBuffer()\n\n    def OnPaint(self, evt):\n        dc = wx.BufferedPaintDC(self, self.buffer)\n\n    def DrawXCoord(self,dc):\n        dc.SetBackground(wx.Brush(wx.Colour(200, 200, 200)))\n        dc.Clear()\n\n        dc.SetPen(wx.BLACK_PEN)\n        dc.SetBrush(wx.BLACK_BRUSH)\n        dc.SetFont(wx.Font(8, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))\n\n        dc.DrawLine(self.zeroPos[0], 0.0, self.zeroPos[0], self.h)\n        st = str(self.zero)\n        self.tw,self.th = dc.GetTextExtent(st)\n        dc.DrawText(st, self.zeroPos[0]+1.0, self.h-self.th-0.5)\n\n        dc.SetPen(wx.Pen(wx.Colour(150, 150, 150)))\n        dc.SetBrush(wx.Brush(wx.Colour(150, 150, 150)))\n\n        if self.unitWidth >= 25:\n            posPos = self.zeroPos[0]+self.unitWidth\n            posNum = self.zero + 1\n            while posPos <= self.w:\n                dc.DrawLine(posPos, 0.0, posPos, self.h)\n                st = str(posNum)\n                self.drawXNumber(dc, st, posPos)\n                posPos += self.unitWidth\n                posNum += 1\n\n            negPos = self.zeroPos[0]-self.unitWidth\n            negNum = self.zero - 1\n            while negPos >= 0.0:\n                dc.DrawLine(negPos, 0.0, negPos, self.h)\n                st = str(negNum)\n                self.drawXNumber(dc, st, negPos)\n                negPos -= self.unitWidth\n                posNum -= 1\n\n        elif self.unitWidth >= 10 and self.unitWidth <= 25:\n            posPos = self.zeroPos[0]+self.unitWidth*2.0\n            posNum = self.zero + 2\n            while posPos <= self.w:\n                dc.DrawLine(posPos, 0.0, posPos, self.h)\n                st = str(posNum)\n                self.drawXNumber(dc, st, posPos)\n                posPos += self.unitWidth*2.0\n                posNum += 2\n\n            negPos = self.zeroPos[0]-self.unitWidth*2.0\n            negNum = self.zero - 2\n            while negPos >= 0.0:\n                dc.DrawLine(negPos, 0.0, negPos, self.h)\n                st = str(negNum)\n                self.drawXNumber(dc, st, negPos)\n                negPos -= self.unitWidth*2.0\n                posNum -= 2\n\n        elif self.unitWidth >= 2 and self.unitWidth <= 10:\n            posPos = self.zeroPos[0]+self.unitWidth*float(5)\n            posNum = self.zero + 5\n            while posPos <= self.w:\n                dc.DrawLine(posPos, 0.0, posPos, self.h)\n                st = str(posNum)\n                self.drawXNumber(dc, st, posPos)\n                posPos += self.unitWidth*float(5)\n                posNum += 5\n\n            negPos = self.zeroPos[0]-self.unitWidth*float(5)\n            negNum = self.zero - 5\n            while negPos >= 0.0:\n                dc.DrawLine(negPos, 0.0, negPos, self.h)\n                st = str(negNum)\n                self.drawXNumber(dc, st, negPos)\n                negPos -= self.unitWidth*float(5)\n                posNum -= 5\n\n    def DrawYCoord(self,dc):\n        dc.SetPen(wx.BLACK_PEN)\n        dc.SetBrush(wx.BLACK_BRUSH)\n        dc.SetFont(wx.Font(8, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))\n\n        dc.DrawLine(0.0, self.zeroPos[1], self.w, self.zeroPos[1])\n        st = str(self.zero)\n        dc.DrawText(st, 5.0, self.zeroPos[1]-1.0)\n\n        dc.SetPen(wx.Pen(wx.Colour(150, 150, 150)))\n        dc.SetBrush(wx.Brush(wx.Colour(150, 150, 150)))\n        dc.SetLogicalFunction(wx.AND)\n\n        posPos = self.zeroPos[1]-self.unitHeight*float(5)\n        posNum = self.zero + 5\n        while posPos >= 0.0:\n            dc.DrawLine(0.0, posPos, self.w, posPos)\n            st = str(posNum)\n            self.drawYNumber(dc, st, posPos)\n            posPos -= self.unitHeight*float(5)\n            posNum += 5\n\n        negPos = self.zeroPos[1]+self.unitHeight*float(5)\n        negNum = self.zero - 5\n        while negPos <= self.h:\n            dc.DrawLine(0.0, negPos, self.w, negPos)\n            st = str(negNum)\n            self.drawYNumber(dc, st, negPos)\n            negPos += self.unitHeight*float(5)\n            negNum -= 5\n\n    def drawXNumber(self, dc, st, pos):\n        oldPen, oldBrush, oldMode = dc.GetPen(), dc.GetBrush(), dc.GetLogicalFunction()\n\n        dc.SetPen(wx.BLACK_PEN)\n        dc.SetBrush(wx.BLACK_BRUSH)\n        dc.DrawText(st, pos+1.0, self.h-self.th-0.5)\n\n        dc.SetPen(oldPen)\n        dc.SetBrush(oldBrush)\n        dc.SetLogicalFunction(oldMode)\n\n    def drawYNumber(self, dc, st, pos):\n        oldPen, oldBrush, oldMode = dc.GetPen(), dc.GetBrush(), dc.GetLogicalFunction()\n\n        dc.SetPen(wx.BLACK_PEN)\n        dc.SetBrush(wx.BLACK_BRUSH)\n        dc.DrawText(st, 5.0, pos-1.0)\n\n        dc.SetPen(oldPen)\n        dc.SetBrush(oldBrush)\n        dc.SetLogicalFunction(oldMode)\n\n    def DrawFrame(self, dc):\n        if self._mainDialog.editor.mode == self._mainDialog.editor.ANIM_MODE:\n            curFramePos = self.zeroPos[0]+self.curFrame*self.unitWidth\n            dc.SetPen(wx.Pen(\"red\"))\n            dc.SetBrush(wx.Brush(\"red\"))\n            dc.DrawLine(curFramePos, 0.0, curFramePos, self.h)\n        else:\n            pass\n\n    def drawX(self, dc):\n        dc.SetPen(wx.Pen(\"red\"))\n        dc.SetBrush(wx.Brush(\"red\"))\n        self.drawSingleCurve(self.X, dc)\n        self.drawKeys(self.X, dc)\n        self.drawHandler(self.X, dc)\n\n    def drawY(self, dc):\n        dc.SetPen(wx.Pen(\"green\"))\n        dc.SetBrush(wx.Brush(\"green\"))\n        self.drawSingleCurve(self.Y, dc)\n        self.drawKeys(self.Y, dc)\n        self.drawHandler(self.Y, dc)\n\n    def drawZ(self, dc):\n        dc.SetPen(wx.Pen(\"blue\"))\n        dc.SetBrush(wx.Brush(\"blue\"))\n        self.drawSingleCurve(self.Z, dc)\n        self.drawKeys(self.Z, dc)\n        self.drawHandler(self.Z, dc)\n\n    def DrawCurve(self, dc):\n        if self.property == self._mainDialog.namestr:\n            self.drawX(dc)\n            self.drawY(dc)\n            self.drawZ(dc)\n            return\n        if self.property == property[AG.X]:\n            self.drawX(dc)\n            return\n        if self.property == property[AG.Y]:\n            self.drawY(dc)\n            return\n        if self.property == property[AG.Z]:\n            self.drawZ(dc)\n            return\n\n    def drawSingleCurve(self, list, dc):\n        if len(list) == 1:\n            dc.DrawPoint(list[0][AG.KEYFRAME][AG.LOCAL_VALUE][0], list[0][AG.KEYFRAME][AG.LOCAL_VALUE][1])\n            return\n\n        if len(list) == 2:\n            dc.DrawLine(list[0][AG.KEYFRAME][AG.LOCAL_VALUE][0], list[0][AG.KEYFRAME][AG.LOCAL_VALUE][1], list[1][AG.KEYFRAME][AG.LOCAL_VALUE][0], list[1][AG.KEYFRAME][AG.LOCAL_VALUE][1])\n            return\n\n        if len(list) >= 3:\n            for i in range(len(list)-1):\n                x1 = list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0]\n                y1 = list[i][AG.KEYFRAME][AG.LOCAL_VALUE][1]\n\n                x4 = list[i+1][AG.KEYFRAME][AG.LOCAL_VALUE][0]\n                y4 = list[i+1][AG.KEYFRAME][AG.LOCAL_VALUE][1]\n\n                t1x = list[i][AG.OUT_SLOPE][0]\n                t1y = list[i][AG.OUT_SLOPE][1]\n\n                t2x = list[i+1][AG.IN_SLOPE][0]\n                t2y = list[i+1][AG.IN_SLOPE][1]\n\n                x2 = x1 + (x4 - x1) / 3.0\n                scale1 = (x2 - x1) / t1x\n                y2 = y1 - t1y * scale1\n\n                x3 = x4 - (x4 - x1) / 3.0\n                scale2 = (x4 - x3) / t2x\n                y3 = y4 + t2y * scale2\n\n                ax = - 1.0 * x1 + 3.0 * x2 - 3.0 * x3 + 1.0 * x4\n                bx =   3.0 * x1 - 6.0 * x2 + 3.0 * x3 + 0.0 * x4\n                cx = - 3.0 * x1 + 3.0 * x2 + 0.0 * x3 + 0.0 * x4\n                dx =   1.0 * x1 + 0.0 * x2 - 0.0 * x3 + 0.0 * x4\n\n                ay = - 1.0 * y1 + 3.0 * y2 - 3.0 * y3 + 1.0 * y4\n                by =   3.0 * y1 - 6.0 * y2 + 3.0 * y3 + 0.0 * y4\n                cy = - 3.0 * y1 + 3.0 * y2 + 0.0 * y3 + 0.0 * y4\n                dy =   1.0 * y1 + 0.0 * y2 - 0.0 * y3 + 0.0 * y4\n\n                preX = x1\n                preY = y1\n                t = 0.001\n\n                while t <= 1.0:\n                    x = ax * t*t*t + bx * t*t + cx * t + dx\n                    y = ay * t*t*t + by * t*t + cy * t + dy\n\n                    curX = x\n                    curY = y\n\n                    dc.DrawLine(preX, preY, curX, curY)\n\n                    preX = curX\n                    preY = curY\n\n                    t += 0.001\n\n    def drawKeys(self, list, dc):\n        for i in range(len(list)):\n            pointX = list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0]\n            pointY = list[i][AG.KEYFRAME][AG.LOCAL_VALUE][1]\n\n            if list[i][AG.KEYFRAME][AG.SELECT] == 0:\n                dc.SetPen(wx.Pen(\"black\", 3))\n                dc.SetBrush(wx.Brush(\"black\"))\n                dc.DrawCircle(pointX, pointY, 2)\n\n            if list[i][AG.KEYFRAME][AG.SELECT] == 1:\n                dc.SetPen(wx.Pen(\"cyan\", 3))\n                dc.SetBrush(wx.Brush(\"cyan\"))\n                dc.DrawCircle(pointX, pointY, 2)\n\n    def drawHandler(self, list, dc):\n        for i in range(len(list)):\n            if list[i][AG.KEYFRAME][AG.SELECT] == 1:\n                X1 = list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0]\n                Y1 = list[i][AG.KEYFRAME][AG.LOCAL_VALUE][1]\n                if self._OneTangent is True:\n                    for j in range(3, 5):\n                        X = list[i][j][AG.LOCAL_VALUE][0]\n                        Y = list[i][j][AG.LOCAL_VALUE][1]\n                        if list[i][j][AG.SELECT] == 1:\n                            dc.SetPen(wx.Pen(\"cyan\", 3))\n                            dc.SetBrush(wx.Brush(\"cyan\"))\n                            dc.DrawCircle(X, Y, 2)\n\n                            dc.SetPen(wx.Pen(\"cyan\", 1))\n                            dc.DrawLine(X1, Y1, X, Y)\n\n                        if list[i][j][AG.SELECT] == 0:\n                            dc.SetPen(wx.Pen(\"brown\", 3))\n                            dc.SetBrush(wx.Brush(\"brown\"))\n                            dc.DrawCircle(X, Y, 2)\n\n                            dc.SetPen(wx.Pen(\"brown\", 1))\n                            dc.DrawLine(X1, Y1, X, Y)\n\n                if self._OneTangent is False:\n                    if list[i][AG.IN_TANGENT][AG.SELECT] == 1:\n                        X = list[i][AG.IN_TANGENT][AG.LOCAL_VALUE][0]\n                        Y = list[i][AG.IN_TANGENT][AG.LOCAL_VALUE][1]\n                        dc.SetPen(wx.Pen(\"cyan\", 3))\n                        dc.SetBrush(wx.Brush(\"cyan\"))\n                        dc.DrawCircle(X, Y, 2)\n\n                        dc.SetPen(wx.Pen(\"cyan\", 1))\n                        dc.DrawLine(X1, Y1, X, Y)\n\n                    if list[i][AG.IN_TANGENT][AG.SELECT] == 0:\n                        X = list[i][AG.IN_TANGENT][AG.LOCAL_VALUE][0]\n                        Y = list[i][AG.IN_TANGENT][AG.LOCAL_VALUE][1]\n                        dc.SetPen(wx.Pen(\"navy\", 3))\n                        dc.SetBrush(wx.Brush(\"navy\"))\n                        dc.DrawCircle(X, Y, 2)\n\n                        dc.SetPen(wx.Pen(\"navy\", 1))\n                        dc.DrawLine(X1, Y1, X, Y)\n\n                    if list[i][AG.OUT_TANGENT][AG.SELECT] == 1:\n                        X = list[i][AG.OUT_TANGENT][AG.LOCAL_VALUE][0]\n                        Y = list[i][AG.OUT_TANGENT][AG.LOCAL_VALUE][1]\n                        dc.SetPen(wx.Pen(\"cyan\", 3))\n                        dc.SetBrush(wx.Brush(\"cyan\"))\n                        dc.DrawCircle(X, Y, 2)\n\n                        dc.SetPen(wx.Pen(\"cyan\", 1))\n                        dc.DrawLine(X1, Y1, X, Y)\n\n                    if list[i][AG.OUT_TANGENT][AG.SELECT] == 0:\n                        X = list[i][AG.OUT_TANGENT][AG.LOCAL_VALUE][0]\n                        Y = list[i][AG.OUT_TANGENT][AG.LOCAL_VALUE][1]\n                        dc.SetPen(wx.Pen(\"brown\", 3))\n                        dc.SetBrush(wx.Brush(\"brown\"))\n                        dc.DrawCircle(X, Y, 2)\n\n                        dc.SetPen(wx.Pen(\"brown\", 1))\n                        dc.DrawLine(X1, Y1, X, Y)\n\n    def DrawSelectRec(self, dc):\n        if self._selectRec is True:\n            dc.SetPen(wx.Pen(\"navy\", 1))\n            dc.SetBrush(wx.Brush(\"navy\"))\n            ## dc.SetLogicalFunction(wx.AND)\n            dc.DrawLine(self.pos[0], self.pos[1], self.pos[0], self.newPos[1])\n            dc.DrawLine(self.pos[0], self.pos[1], self.newPos[0], self.pos[1])\n            dc.DrawLine(self.newPos[0], self.newPos[1], self.pos[0], self.newPos[1])\n            dc.DrawLine(self.newPos[0], self.newPos[1], self.newPos[0], self.pos[1])\n\n    def OnSize(self, evt):\n        self.InitBuffer()\n\n    def OnLeftDown(self, evt):\n        point = (evt.GetX(), evt.GetY())\n\n        if point[1] >= 0.0 and point[1] <= float(self.h):\n            if point[0] >= 0.0 and point[0] <= float(self.w):\n                self._mouseIn = True\n\n        if self._mouseIn:\n            self.CaptureMouse()\n            self.pos = point\n\n    def OnLeftUp(self, evt):\n        if self.GetCapture():\n            self.ReleaseMouse()\n            self._mouseIn = False\n            self._selectRec = False\n            self.setSelection()\n            self.SetGraphEditorData(self.property, self.curFrame)\n\n    def OnMiddleDown(self, evt):\n        point = (evt.GetX(), evt.GetY())\n\n        if point[1] >= 0.0 and point[1] <= float(self.h):\n            if point[0] >= 0.0 and point[0] <= float(self.w):\n                self._mouseIn = True\n\n        if self._mouseIn:\n            self.CaptureMouse()\n            self.midPos = point\n\n    def OnMiddleUp(self, evt):\n        if self.GetCapture():\n            self.ReleaseMouse()\n\n    def OnMotion(self, evt):\n        self._mouseIn = False\n        if evt.Dragging() and evt.LeftIsDown():\n            self.newPos = (evt.GetX(), evt.GetY())\n            if self.newPos[1] >= 0.0 and self.newPos[1] <= float(self.h):\n                if self.newPos[0] >= 0.0 and self.newPos[0] <= float(self.w):\n                    self._mouseIn = True\n\n            if self._mouseIn:\n                if self.newPos == self.pos:\n                    evt.Skip()\n                    self._mouseIn = False\n                else:\n                    self._selectRec = True\n                    self.SetGraphEditorData(self.property,  self.curFrame)\n\n        if evt.Dragging() and evt.MiddleIsDown():\n            self.newMidPos = (evt.GetX(), evt.GetY())\n            if self.newMidPos[1] >= 0.0 and self.newMidPos[1] <= float(self.h):\n                if self.newMidPos[0] >= 0.0 and self.newMidPos[0] <= float(self.w):\n                    self._mouseIn = True\n\n            if self._mouseIn:\n                if self.newMidPos == self.midPos:\n                    evt.Skip()\n                    self._mouseIn = False\n                else:\n                    self.recalculateSlope()\n                    self.onAnimation()\n                    self.midPos = self.newMidPos\n\n        evt.Skip()\n        self._mouseIn = False\n        self._selectRec = False\n\n    def setExistKey(self, list):\n        flag = False\n        for i in range(len(list)):\n            if list[i][AG.KEYFRAME][AG.SELECT] == 1:\n                inside = self.inside(self.pos, self.newPos, (list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0], list[i][AG.KEYFRAME][AG.LOCAL_VALUE][1]))\n                if inside is True:\n                    list[i][AG.KEYFRAME][AG.SELECT] = 0\n                if inside is False:\n                    find = False\n                    for j in range(3,5):\n                        inside = self.inside(self.pos, self.newPos, (list[i][j][AG.LOCAL_VALUE][0], list[i][j][AG.LOCAL_VALUE][1]))\n                        if inside is False:\n                            list[i][j][AG.SELECT] = 0\n                        if inside is True:\n                            list[i][j][AG.SELECT] = 1\n                            find = True\n                            flag = True\n                    if find is False:\n                        list[i][AG.KEYFRAME][AG.SELECT] == 0\n\n        return flag\n\n    def setNewKey(self, list):\n        for i in range(len(list)):\n            inside = self.inside(self.pos, self.newPos, (list[i][2][0][0], list[i][2][0][1]))\n            if inside is True:\n                list[i][AG.KEYFRAME][AG.SELECT] = 1\n            if inside is False:\n                list[i][AG.KEYFRAME][AG.SELECT] = 0\n\n    def setSelection(self):\n        if self.property == self._mainDialog.namestr:\n            self.setSelectionBase(self.X)\n            self.setSelectionBase(self.Y)\n            self.setSelectionBase(self.Z)\n            return\n        if self.property == property[AG.X]:\n            self.setSelectionBase(self.X)\n            return\n        if self.property == property[AG.Y]:\n            self.setSelectionBase(self.Y)\n            return\n        if self.property == property[AG.Z]:\n            self.setSelectionBase(self.Z)\n            return\n\n    def setSelectionBase(self, list):\n        self.setExistKey(list)\n        if self.setExistKey(list) is True:\n            return\n        else:\n            self.setNewKey(list)\n\n    def inside(self, point0, point1, point):\n        if point0[0] <= point1[0] and point0[1] <= point1[1]:\n            if point0[0] < point[0] and point[0] < point1[0] and point0[1] < point[1] and point[1] < point1[1]:\n                return True\n            else:\n                return False\n        elif point1[0] <= point0[0] and point0[1] <= point1[1]:\n            if point1[0] < point[0] and point[0] < point0[0] and point0[1] < point[1] and point[1] < point1[1]:\n                return True\n            else:\n                return False\n        elif point0[0] <= point1[0] and point1[1] <= point0[1]:\n            if point0[0] < point[0] and point[0] < point1[0] and point1[1] < point[1] and point[1] < point0[1]:\n                return True\n            else:\n                return False\n        elif point1[0] <= point0[0] and point1[1] <= point0[1]:\n            if point1[0] < point[0] and point[0] < point0[0] and point1[1] < point[1] and point[1] < point0[1]:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n    def recalculateSlope(self):\n        if self.property == self._mainDialog.namestr:\n            self.recalculateSlopeBase(self.X)\n            self.recalculateSlopeBase(self.Y)\n            self.recalculateSlopeBase(self.Z)\n            return\n        if self.property == property[AG.X]:\n            self.recalculateSlopeBase(self.X)\n            return\n        if self.property == property[AG.Y]:\n            self.recalculateSlopeBase(self.Y)\n            return\n        if self.property == property[AG.Z]:\n            self.recalculateSlopeBase(self.Z)\n            return\n\n    def recalculateSlopeBase(self, list):\n        #recalculate the tangent slope\n        moveX = self.newMidPos[0]-self.midPos[0]\n        moveY = self.newMidPos[1]-self.midPos[1]\n\n        for i in range(len(list)):\n            if list[i][AG.KEYFRAME][AG.SELECT] == 1:\n                if list[i][AG.IN_TANGENT][AG.SELECT] == 1:\n                    newPointX = list[i][AG.IN_TANGENT][AG.LOCAL_VALUE][0] + moveX\n                    newPointY = list[i][AG.IN_TANGENT][AG.LOCAL_VALUE][1] + moveY\n\n                    newSlope = [list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0] - newPointX, newPointY - list[i][AG.KEYFRAME][AG.LOCAL_VALUE][1]]\n\n                    temp0 = self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.INSLOPE][0]\n                    temp1 = self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.INSLOPE][1]\n                    self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.INSLOPE][0] = newSlope[0]/self.unitWidth\n                    self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.INSLOPE][1] = newSlope[1]/self.unitHeight\n                    handler = self.generateHandler(self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]])\n                    if handler[1][0][0] >= list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0]:\n                        self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.INSLOPE][0] = temp0\n                        self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.INSLOPE][1] = temp1\n                        return\n                    if handler[1][0][0] < list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0]:\n                        if self._OneTangent is False:\n                            list[i][AG.IN_TANGENT][0] = handler[1][0]\n                            list[i][AG.IN_SLOPE][0] = handler[3][0]\n                            list[i][AG.IN_SLOPE][1] = handler[3][1]\n\n                        if self._OneTangent is True:\n                            self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.OUTSLOPE][0] = newSlope[0]/self.unitWidth\n                            self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.OUTSLOPE][1] = newSlope[1]/self.unitHeight\n                            handler = self.generateHandler(self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]])\n                            list[i][AG.IN_TANGENT][0] = handler[1][0]\n                            list[i][AG.OUT_TANGENT][0] = handler[2][0]\n                            list[i][AG.IN_SLOPE][0] = handler[3][0]\n                            list[i][AG.IN_SLOPE][1] = handler[3][1]\n                            list[i][AG.OUT_SLOPE][0] = handler[4][0]\n                            list[i][AG.OUT_SLOPE][1] = handler[4][1]\n\n                        self.SetGraphEditorData(self.property, self.curFrame)\n\n                if list[i][AG.OUT_TANGENT][AG.SELECT] == 1:\n                    newPointX = list[i][AG.OUT_TANGENT][AG.LOCAL_VALUE][0] + moveX\n                    newPointY = list[i][AG.OUT_TANGENT][AG.LOCAL_VALUE][1] + moveY\n\n                    newSlope = [newPointX  - list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0], list[i][AG.KEYFRAME][AG.LOCAL_VALUE][1] - newPointY]\n\n                    temp0 = self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.OUTSLOPE][0]\n                    temp1 = self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.OUTSLOPE][1]\n                    self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.OUTSLOPE][0] = newSlope[0]/self.unitWidth\n                    self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.OUTSLOPE][1] = newSlope[1]/self.unitHeight\n\n                    handler = self.generateHandler(self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]])\n                    if handler[2][0][0] <= list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0]:\n                        self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.OUTSLOPE][0] = temp0\n                        self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.OUTSLOPE][1] = temp1\n                        return\n                    if handler[2][0][0] > list[i][AG.KEYFRAME][AG.LOCAL_VALUE][0]:\n                        if self._OneTangent is False:\n                            list[i][AG.OUT_TANGENT][0] = handler[2][0]\n                            list[i][AG.OUT_SLOPE][0] = handler[4][0]\n                            list[i][AG.OUT_SLOPE][1] = handler[4][1]\n\n                        if self._OneTangent is True:\n                            self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.INSLOPE][0] = newSlope[0]/self.unitWidth\n                            self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]][AG.INSLOPE][1] = newSlope[1]/self.unitHeight\n                            handler = self.generateHandler(self._mainDialog.editor.animMgr.keyFramesInfo[list[i][AG.KEY]][list[i][AG.I]])\n                            list[i][AG.IN_TANGENT][0] = handler[1][0]\n                            list[i][AG.OUT_TANGENT][0] = handler[2][0]\n                            list[i][AG.IN_SLOPE][0] = handler[3][0]\n                            list[i][AG.IN_SLOPE][1] = handler[3][1]\n                            list[i][AG.OUT_SLOPE][0] = handler[4][0]\n                            list[i][AG.OUT_SLOPE][1] = handler[4][1]\n\n                        self.SetGraphEditorData(self.property,  self.curFrame)\n\n    def selectHandler(self):\n        self._selectHandler = False\n\n    def onAnimation(self):\n        if self._mainDialog.editor.mode == self._mainDialog.editor.ANIM_MODE:\n            self._mainDialog.editor.ui.animUI.OnAnimation(self._mainDialog.editor.ui.animUI.curFrame)\n        else:\n            pass\n\n\nclass GraphEditorUI(wx.Dialog):\n    \"\"\"\n    This is the graph editor main class implementation.\n    \"\"\"\n\n    def __init__(self, parent, editor, object):\n        wx.Dialog.__init__(self, parent, id=wx.ID_ANY, title=\"Graph Editor\",\n                           pos=wx.DefaultPosition, size=(735, 535))\n\n        self.editor = editor\n        self.editor.GRAPH_EDITOR = True\n        self.object = object\n        self.xRange = 24+1\n        self.yRange = 50\n        if self.editor.mode == self.editor.ANIM_MODE:\n            self.curFrame = self.editor.ui.animUI.curFrame\n        self.curFrame = 1\n\n        self.mainPanel1 = wx.Panel(self, -1)\n\n        bmpZoomIn = ZoomIn.GetBitmap()\n        bmpZoomOut = ZoomOut.GetBitmap()\n        bmpOneTangent = OneTangent.GetBitmap()\n        bmpTwoTangents = TwoTangents.GetBitmap()\n\n        self.buttonZoomIn = wx.BitmapButton(self.mainPanel1, -1, bmpZoomIn, size = (30, 30),style = wx.BU_AUTODRAW)\n        self.buttonZoomOut = wx.BitmapButton(self.mainPanel1, -1, bmpZoomOut, size = (30, 30),style = wx.BU_AUTODRAW)\n        self.buttonOneTangent = wx.BitmapButton(self.mainPanel1, -1, bmpOneTangent, size = (30, 30),style = wx.BU_AUTODRAW)\n        self.buttonTwoTangents = wx.BitmapButton(self.mainPanel1, -1, bmpTwoTangents, size = (30, 30),style = wx.BU_AUTODRAW)\n\n        self.mainPanel2 = wx.Panel(self, -1)\n\n        self.tree =  self.tree = wx.TreeCtrl(self.mainPanel2, id=-1, pos=wx.DefaultPosition,size=wx.Size(200, 450), style=wx.TR_MULTIPLE|wx.TR_DEFAULT_STYLE,validator=wx.DefaultValidator, name=\"treeCtrl\")\n        self.namestr = \"%s\"%(object[OG.OBJ_DEF].name)\n        self.root = self.tree.AddRoot(self.namestr)\n        self.AddTreeNodes(self.root, property)\n        self.tree.Expand(self.root)\n        self.tree.SelectItem(self.root,select=True)\n        self.str = self.tree.GetItemText(self.root)\n\n        self.graphEditorWindow =GraphEditorWindow(self.mainPanel2, wx.Size(500, 450), str(object[OG.OBJ_DEF].name), self.xRange, self.yRange, self.curFrame, self.object)\n\n        self.SetProperties()\n        self.DoLayout()\n\n        self.Bind(wx.EVT_BUTTON, self.OnZoomIn, self.buttonZoomIn)\n        self.Bind(wx.EVT_BUTTON, self.OnZoomOut, self.buttonZoomOut)\n        self.Bind(wx.EVT_BUTTON, self.OnOneTangent, self.buttonOneTangent)\n        self.Bind(wx.EVT_BUTTON, self.OnTwoTangents, self.buttonTwoTangents)\n\n        self.Bind(wx.EVT_CLOSE, self.OnExit)\n        self.tree.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnSelChanged)\n\n    def SetProperties(self):\n        pass\n\n    def DoLayout(self):\n        dialogSizer = wx.BoxSizer(wx.VERTICAL)\n        mainSizer1 = wx.FlexGridSizer(1, 4, 0, 0)\n        mainSizer2 = wx.FlexGridSizer(1, 2, 0, 0)\n\n        mainSizer1.Add(self.buttonOneTangent, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT, 570)\n        mainSizer1.Add(self.buttonTwoTangents, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT, 10)\n        mainSizer1.Add(self.buttonZoomIn, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT, 10)\n        mainSizer1.Add(self.buttonZoomOut, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 10)\n\n        mainSizer2.Add(self.tree, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 10)\n        mainSizer2.Add(self.graphEditorWindow, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 10)\n\n        self.mainPanel1.SetSizerAndFit(mainSizer1)\n        self.mainPanel2.SetSizer(mainSizer2)\n\n        dialogSizer.Add(self.mainPanel2, 0, wx.ALIGN_CENTER_VERTICAL|wx.TOP, 10)\n        dialogSizer.Add(self.mainPanel1, 0, wx.ALIGN_CENTER_VERTICAL|wx.TOP, 5)\n\n        self.SetSizer(dialogSizer)\n        self.Layout()\n\n        self.dialogSizer = dialogSizer\n\n    def AddTreeNodes(self, parentItem, items):\n        for item in items:\n            if isinstance(item, str):\n                self.tree.AppendItem(parentItem, item)\n\n    def OnSelChanged(self, evt):\n        item = evt.GetItem()\n        if item:\n            self.str = self.tree.GetItemText(item)\n            self.graphEditorWindow.refresh()\n            self.graphEditorWindow.SetGraphEditorData(self.str, self.curFrame)\n\n    def OnZoomIn(self, evt):\n        self.graphEditorWindow.zoom = self.graphEditorWindow.zoom/float(1.2)\n        self.graphEditorWindow.unitWidth = self.graphEditorWindow.unitWidth*float(1.2)\n        self.graphEditorWindow.unitHeight = self.graphEditorWindow.unitHeight*float(1.2)\n        self.graphEditorWindow.generateInfo()\n        self.graphEditorWindow.SetGraphEditorData(self.str, self.curFrame)\n\n    def OnZoomOut(self, evt):\n        self.graphEditorWindow.zoom = self.graphEditorWindow.zoom*float(1.2)\n        self.graphEditorWindow.unitWidth = self.graphEditorWindow.unitWidth/float(1.2)\n        self.graphEditorWindow.unitHeight = self.graphEditorWindow.unitHeight/float(1.2)\n        self.graphEditorWindow.generateInfo()\n        self.graphEditorWindow.SetGraphEditorData(self.str, self.curFrame)\n\n    def OnOneTangent(self, evt):\n        self.graphEditorWindow._OneTangent = True\n        self.graphEditorWindow.SetGraphEditorData(self.str, self.curFrame)\n\n    def OnTwoTangents(self, evt):\n        self.graphEditorWindow._OneTangent = False\n        self.graphEditorWindow.SetGraphEditorData(self.str, self.curFrame)\n\n    def curFrameChange(self):\n        if self.editor.mode == self.editor.ANIM_MODE:\n            self.curFrame = self.editor.ui.animUI.curFrame\n            self.graphEditorWindow.SetGraphEditorData(self.str, self.curFrame)\n        else:\n            pass\n\n    def OnExit(self, evt):\n        self.Destroy()\n        self.editor.ui.graphEditorMenuItem.Check(False)\n        self.object = None\n        self.editor.GRAPH_EDITOR = False\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/GraphEditorUI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/c77a2d73_GraphEditorUI.json",
    "doc_id": "doc_19"
  }
}