{
  "content": "from panda3d.core import ConfigVariableInt, ConfigVariableDouble\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nfrom direct.fsm.StatePush import FunctionCall\nfrom direct.showbase.PythonUtil import Averager\nfrom .TaskManagerGlobal import taskMgr\n\n\nclass TaskTracker:\n    # call it TaskProfiler to avoid confusion for the user\n    notify = directNotify.newCategory(\"TaskProfiler\")\n    MinSamples = None\n    SpikeThreshold = None\n\n    def __init__(self, namePrefix):\n        self._namePrefix = namePrefix\n        self._durationAverager = Averager('%s-durationAverager' % namePrefix)\n        self._avgSession = None\n        if TaskTracker.MinSamples is None:\n            # number of samples required before spikes start getting identified\n            TaskTracker.MinSamples = ConfigVariableInt('profile-task-spike-min-samples', 30).value\n            # defines spike as longer than this multiple of avg task duration\n            TaskTracker.SpikeThreshold = TaskProfiler.GetDefaultSpikeThreshold()\n\n    def destroy(self):\n        self.flush()\n        del self._namePrefix\n        del self._durationAverager\n\n    def flush(self):\n        self._durationAverager.reset()\n        if self._avgSession:\n            self._avgSession.release()\n        self._avgSession = None\n\n    def getNamePrefix(self, namePrefix):\n        return self._namePrefix\n\n    def _checkSpike(self, session):\n        duration = session.getDuration()\n        isSpike = False\n        # do we have enough samples?\n        if self.getNumDurationSamples() > self.MinSamples:\n            # was this a spike?\n            if duration > (self.getAvgDuration() * self.SpikeThreshold):\n                isSpike = True\n                avgSession = self.getAvgSession()\n                s = '\\n%s task CPU spike profile (%s) %s\\n' % ('=' * 30, self._namePrefix, '=' * 30)\n                s += ('|' * 80) + '\\n'\n                for sorts in (['cumulative'], ['time'], ['calls']):\n                    s += ('-- AVERAGE --\\n%s'\n                          '-- SPIKE --\\n%s' % (\n                        avgSession.getResults(sorts=sorts, totalTime=duration),\n                        session.getResults(sorts=sorts)))\n                self.notify.info(s)\n        return isSpike\n\n    def addProfileSession(self, session):\n        duration = session.getDuration()\n        if duration == 0.:\n            # profiled code was too fast for the clock, throw this result out\n            # if we keep it we may get many false positive spike detects\n            return\n\n        isSpike = self._checkSpike(session)\n        self._durationAverager.addValue(duration)\n\n        storeAvg = True\n        if self._avgSession is not None:\n            avgDur = self.getAvgDuration()\n            if abs(self._avgSession.getDuration() - avgDur) < abs(duration - avgDur):\n                # current avg data is more average than this new sample, keep the data we've\n                # already got stored\n                storeAvg = False\n        if storeAvg:\n            if self._avgSession:\n                self._avgSession.release()\n            self._avgSession = session.getReference()\n\n    def getAvgDuration(self):\n        return self._durationAverager.getAverage()\n\n    def getNumDurationSamples(self):\n        return self._durationAverager.getCount()\n\n    def getAvgSession(self):\n        # returns profile session for closest-to-average sample\n        return self._avgSession\n\n    def log(self):\n        if self._avgSession:\n            s = 'task CPU profile (%s):\\n' % self._namePrefix\n            s += ('|' * 80) + '\\n'\n            for sorts in (['cumulative'], ['time'], ['calls']):\n                s += self._avgSession.getResults(sorts=sorts)\n            self.notify.info(s)\n        else:\n            self.notify.info('task CPU profile (%s): no data collected' % self._namePrefix)\n\n\nclass TaskProfiler:\n    # this does intermittent profiling of tasks running on the system\n    # if a task has a spike in execution time, the profile of the spike is logged\n    notify = directNotify.newCategory(\"TaskProfiler\")\n\n    def __init__(self):\n        self._enableFC = FunctionCall(self._setEnabled, taskMgr.getProfileTasksSV())\n        self._enableFC.pushCurrentState()\n        # table of task name pattern to TaskTracker\n        self._namePrefix2tracker = {}\n        self._task = None\n\n    def destroy(self):\n        if taskMgr.getProfileTasks():\n            self._setEnabled(False)\n        self._enableFC.destroy()\n        for tracker in self._namePrefix2tracker.values():\n            tracker.destroy()\n        del self._namePrefix2tracker\n        del self._task\n\n    @staticmethod\n    def GetDefaultSpikeThreshold():\n        return ConfigVariableDouble('profile-task-spike-threshold', 5.).value\n\n    @staticmethod\n    def SetSpikeThreshold(spikeThreshold):\n        TaskTracker.SpikeThreshold = spikeThreshold\n    @staticmethod\n    def GetSpikeThreshold():\n        return TaskTracker.SpikeThreshold\n\n    def logProfiles(self, name=None):\n        if name:\n            name = name.lower()\n        for namePrefix, tracker in self._namePrefix2tracker.items():\n            if name and name not in namePrefix.lower():\n                continue\n            tracker.log()\n\n    def flush(self, name):\n        if name:\n            name = name.lower()\n        # flush stored task profiles\n        for namePrefix, tracker in self._namePrefix2tracker.items():\n            if name and name not in namePrefix.lower():\n                continue\n            tracker.flush()\n\n    def _setEnabled(self, enabled):\n        if enabled:\n            self.notify.info('task profiler started')\n            self._taskName = 'profile-tasks-%s' % id(self)\n            taskMgr.add(self._doProfileTasks, self._taskName, priority=-200)\n        else:\n            taskMgr.remove(self._taskName)\n            del self._taskName\n            self.notify.info('task profiler stopped')\n\n    def _doProfileTasks(self, task=None):\n        # gather data from the previous frame\n        # set up for the next frame\n        if self._task is not None and taskMgr._hasProfiledDesignatedTask():\n            session = taskMgr._getLastTaskProfileSession()\n            # if we couldn't profile, throw this result out\n            if session.profileSucceeded():\n                namePrefix = self._task.getNamePrefix()\n                if namePrefix not in self._namePrefix2tracker:\n                    self._namePrefix2tracker[namePrefix] = TaskTracker(namePrefix)\n                tracker = self._namePrefix2tracker[namePrefix]\n                tracker.addProfileSession(session)\n\n        # set up the next task\n        self._task = taskMgr._getRandomTask()\n        taskMgr._setProfileTask(self._task)\n\n        return task.cont\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/task/TaskProfiler.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/a0ddb5b3_TaskProfiler.json",
    "doc_id": "doc_214"
  }
}