{
  "content": "\"\"\"\nContains the TestInterval class\n\"\"\"\n\n__all__ = ['TestInterval']\n\nfrom panda3d.direct import CInterval\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nfrom .Interval import Interval\n\n\nclass TestInterval(Interval):\n    # Name counter\n    particleNum = 1\n    # create ParticleInterval DirectNotify category\n    notify = directNotify.newCategory('TestInterval')\n    # Class methods\n    def __init__(self,\n                 particleEffect,\n                 duration=0.0,\n                 parent = None,\n                 renderParent = None,\n                 name=None):\n        \"\"\"\n        particleEffect is ??\n        parent is ??\n        worldRelative is a boolean\n        loop is a boolean\n        duration is a float for the time\n        name is ??\n        \"\"\"\n        # Generate unique name\n        id = 'Particle-%d' % TestInterval.particleNum\n        TestInterval.particleNum += 1\n        if name is None:\n            name = id\n        # Record instance variables\n        self.particleEffect = particleEffect\n        self.parent = parent\n        self.renderParent = renderParent\n\n        Interval.__init__(self, name, duration)\n\n    def __del__(self):\n        pass\n\n    def __step(self, dt):\n        self.particleEffect.accelerate(dt,1,0.05)\n\n    def start(self, *args, **kwargs):\n        self.particleEffect.clearToInitial()\n        self.currT = 0\n        Interval.start(self,*args,**kwargs)\n\n    def privInitialize(self, t):\n        if self.parent is not None:\n            self.particleEffect.reparentTo(self.parent)\n        if self.renderParent is not None:\n            self.setRenderParent(self.renderParent.node())\n\n        self.state = CInterval.SStarted\n        #self.particleEffect.enable()\n        #if self.particleEffect.renderParent is not None:\n        #    for p in self.particleEffect.particlesDict.values():\n        #        p.setRenderParent(self.particleEffect.renderParent.node())\n        for f in self.particleEffect.forceGroupDict.values():\n            f.enable()\n        #for p in self.particleEffect.particlesDict.values():\n        #    p.enable()\n        #self.particleEffect.fEnabled = 1\n        self.__step(t-self.currT)\n        self.currT = t\n\n    def privStep(self, t):\n        if self.state == CInterval.SPaused:\n            # Restarting from a pause.\n            self.privInitialize(t)\n        else:\n            self.state = CInterval.SStarted\n            self.__step(t-self.currT)\n            self.currT = t\n\n    def privFinalize(self):\n        self.__step(self.getDuration()-self.currT)\n        self.currT = self.getDuration()\n\n        self.state = CInterval.SFinal\n\n    def privInstant(self):\n        \"\"\"\n        Full jump from Initial state to Final State\n        \"\"\"\n        self.__step(self.getDuration()-self.currT)\n        self.currT = self.getDuration()\n\n        self.state = CInterval.SFinal\n\n    def privInterrupt(self):\n        if not self.isStopped():\n            self.state = CInterval.SPaused\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/interval/TestInterval.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/010bb77d_TestInterval.json",
    "doc_id": "doc_153"
  }
}