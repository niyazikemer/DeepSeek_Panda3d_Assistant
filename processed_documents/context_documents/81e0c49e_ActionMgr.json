{
  "content": "from panda3d.core import Mat4\nfrom direct.showbase.PythonUtil import Functor\nfrom . import ObjectGlobals as OG\n\n\nclass ActionMgr:\n    def __init__(self):\n        self.undoList = []\n        self.redoList = []\n\n    def reset(self):\n        while len(self.undoList) > 0:\n            action = self.undoList.pop()\n            action.destroy()\n\n        while len(self.redoList) > 0:\n            action = self.redoList.pop()\n            action.destroy()\n\n    def push(self, action):\n        self.undoList.append(action)\n        if len(self.redoList) > 0:\n            self.redoList.pop()\n\n    def undo(self):\n        if len(self.undoList) < 1:\n            print('No more undo')\n        else:\n            action = self.undoList.pop()\n            self.redoList.append(action)\n            action.undo()\n\n    def redo(self):\n        if len(self.redoList) < 1:\n            print('No more redo')\n        else:\n            action = self.redoList.pop()\n            self.undoList.append(action)\n            action.redo()\n\n\nclass ActionBase(Functor):\n    \"\"\" Base class for user actions \"\"\"\n\n    def __init__(self, function, *args, **kargs):\n        self.function = function\n        if function is None:\n            def nullFunc():\n                pass\n            function = nullFunc\n        Functor.__init__(self, function, *args, **kargs)\n        self.result = None\n\n    def _do__call__(self, *args, **kargs):\n        self.saveStatus()\n        self.result = Functor._do__call__(self, *args, **kargs)\n        self.postCall()\n        return self.result\n\n    # needed this line to override _do__call__\n    __call__ = _do__call__\n\n    def redo(self):\n        self.result = self._do__call__()\n        return self.result\n\n    def saveStatus(self):\n        # save object status for undo here\n        pass\n\n    def postCall(self):\n        # implement post process here\n        pass\n\n    def undo(self):\n        print(\"undo method is not defined for this action\")\n\n\nclass ActionAddNewObj(ActionBase):\n    \"\"\" Action class for adding new object \"\"\"\n\n    def __init__(self, editor, *args, **kargs):\n        self.editor = editor\n        function = self.editor.objectMgr.addNewObject\n        ActionBase.__init__(self, function, *args, **kargs)\n        self.uid = None\n\n    def postCall(self):\n        obj = self.editor.objectMgr.findObjectByNodePath(self.result)\n        if obj:\n            self.uid = obj[OG.OBJ_UID]\n\n    def redo(self):\n        if self.uid is None:\n            print(\"Can't redo this add\")\n        else:\n            self.result = self._do__call__(uid=self.uid)\n            return self.result\n\n    def undo(self):\n        if self.result is None:\n            print(\"Can't undo this add\")\n        else:\n            print(\"Undo: addNewObject\")\n            if self.uid:\n                obj = self.editor.objectMgr.findObjectById(self.uid)\n            else:\n                obj = self.editor.objectMgr.findObjectByNodePath(self.result)\n            if obj:\n                self.uid = obj[OG.OBJ_UID]\n                self.editor.ui.sceneGraphUI.delete(self.uid)\n                base.direct.deselect(obj[OG.OBJ_NP])\n                base.direct.removeNodePath(obj[OG.OBJ_NP])\n                self.result = None\n            else:\n                print(\"Can't undo this add\")\n\n\nclass ActionDeleteObj(ActionBase):\n    \"\"\" Action class for deleting object \"\"\"\n\n    def __init__(self, editor, *args, **kargs):\n        self.editor = editor\n        function = base.direct.removeAllSelected\n        ActionBase.__init__(self, function, *args, **kargs)\n        self.selectedUIDs = []\n        self.hierarchy = {}\n        self.objInfos = {}\n        self.objTransforms = {}\n\n    def saveStatus(self):\n        selectedNPs = base.direct.selected.getSelectedAsList()\n        def saveObjStatus(np, isRecursive=True):\n            obj = self.editor.objectMgr.findObjectByNodePath(np)\n            if obj:\n                uid = obj[OG.OBJ_UID]\n                if not isRecursive:\n                    self.selectedUIDs.append(uid)\n                objNP = obj[OG.OBJ_NP]\n                self.objInfos[uid] = obj\n                self.objTransforms[uid] = objNP.getMat()\n                parentNP = objNP.getParent()\n                if parentNP == render:\n                    self.hierarchy[uid] = None\n                else:\n                    parentObj = self.editor.objectMgr.findObjectByNodePath(parentNP)\n                    if parentObj:\n                        self.hierarchy[uid] = parentObj[OG.OBJ_UID]\n\n                for child in np.getChildren():\n                    if child.hasTag('OBJRoot'):\n                        saveObjStatus(child)\n\n        for np in selectedNPs:\n            saveObjStatus(np, False)\n\n    def undo(self):\n        if len(self.hierarchy) == 0 or\\\n           len(self.objInfos) == 0:\n            print(\"Can't undo this deletion\")\n        else:\n            print(\"Undo: deleteObject\")\n            def restoreObject(uid, parentNP):\n                obj = self.objInfos[uid]\n                objDef = obj[OG.OBJ_DEF]\n                objModel = obj[OG.OBJ_MODEL]\n                objProp = obj[OG.OBJ_PROP]\n                objRGBA = obj[OG.OBJ_RGBA]\n                objNP = self.editor.objectMgr.addNewObject(objDef.name,\n                                                   uid,\n                                                   obj[OG.OBJ_MODEL],\n                                                   parentNP)\n                self.editor.objectMgr.updateObjectColor(objRGBA[0], objRGBA[1], objRGBA[2], objRGBA[3], objNP)\n                self.editor.objectMgr.updateObjectProperties(objNP, objProp)\n                objNP.setMat(self.objTransforms[uid])\n\n            while len(self.hierarchy) > 0:\n                for uid in self.hierarchy:\n                    if self.hierarchy[uid] is None:\n                        parentNP = None\n                        restoreObject(uid, parentNP)\n                        del self.hierarchy[uid]\n                    else:\n                        parentObj = self.editor.objectMgr.findObjectById(self.hierarchy[uid])\n                        if parentObj:\n                            parentNP = parentObj[OG.OBJ_NP]\n                            restoreObject(uid, parentNP)\n                            del self.hierarchy[uid]\n\n            base.direct.deselectAllCB()\n            for uid in self.selectedUIDs:\n                obj = self.editor.objectMgr.findObjectById(uid)\n                if obj:\n                    self.editor.select(obj[OG.OBJ_NP], fMultiSelect=1, fUndo=0)\n\n            self.selecteUIDs = []\n            self.hierarchy = {}\n            self.objInfos = {}\n\nclass ActionDeleteObjById(ActionBase):\n    \"\"\" Action class for deleting object \"\"\"\n\n    def __init__(self, editor, uid):\n        self.editor = editor\n        function = self.editor.objectMgr.removeObjectById\n        self.uid = uid\n        ActionBase.__init__(self, function, self.uid)\n        self.hierarchy = {}\n        self.objInfos = {}\n        self.objTransforms = {}\n\n    def saveStatus(self):\n        def saveObjStatus(uid_np, isUID=False):\n            if isUID:\n                obj = self.editor.objectMgr.findObjectById(uid_np)\n            else:\n                obj = self.editor.objectMgr.findObjectByNodePath(uid_np)\n            if obj:\n                uid = obj[OG.OBJ_UID]\n                objNP = obj[OG.OBJ_NP]\n                self.objInfos[uid] = obj\n                self.objTransforms[uid] = objNP.getMat()\n                parentNP = objNP.getParent()\n                if parentNP == render:\n                    self.hierarchy[uid] = None\n                else:\n                    parentObj = self.editor.objectMgr.findObjectByNodePath(parentNP)\n                    if parentObj:\n                        self.hierarchy[uid] = parentObj[OG.OBJ_UID]\n\n                for child in objNP.getChildren():\n                    if child.hasTag('OBJRoot'):\n                        saveObjStatus(child)\n\n        saveObjStatus(self.uid, True)\n\n    def undo(self):\n        if len(self.hierarchy) == 0 or\\\n           len(self.objInfos) == 0:\n            print(\"Can't undo this deletion\")\n        else:\n            print(\"Undo: deleteObjectById\")\n            def restoreObject(uid, parentNP):\n                obj = self.objInfos[uid]\n                objDef = obj[OG.OBJ_DEF]\n                objModel = obj[OG.OBJ_MODEL]\n                objProp = obj[OG.OBJ_PROP]\n                objRGBA = obj[OG.OBJ_RGBA]\n                objNP = self.editor.objectMgr.addNewObject(objDef.name,\n                                                   uid,\n                                                   obj[OG.OBJ_MODEL],\n                                                   parentNP)\n                self.editor.objectMgr.updateObjectColor(objRGBA[0], objRGBA[1], objRGBA[2], objRGBA[3], objNP)\n                self.editor.objectMgr.updateObjectProperties(objNP, objProp)\n                objNP.setMat(self.objTransforms[uid])\n\n            while len(self.hierarchy) > 0:\n                for uid in self.hierarchy:\n                    if self.hierarchy[uid] is None:\n                        parentNP = None\n                        restoreObject(uid, parentNP)\n                        del self.hierarchy[uid]\n                    else:\n                        parentObj = self.editor.objectMgr.findObjectById(self.hierarchy[uid])\n                        if parentObj:\n                            parentNP = parentObj[OG.OBJ_NP]\n                            restoreObject(uid, parentNP)\n                            del self.hierarchy[uid]\n\n            self.hierarchy = {}\n            self.objInfos = {}\n\n\nclass ActionChangeHierarchy(ActionBase):\n    \"\"\" Action class for changing Scene Graph Hierarchy \"\"\"\n\n    def __init__(self, editor, oldGrandParentId, oldParentId, newParentId, childName, *args, **kargs):\n        self.editor = editor\n        self.oldGrandParentId = oldGrandParentId\n        self.oldParentId = oldParentId\n        self.newParentId = newParentId\n        self.childName = childName\n        function = self.editor.ui.sceneGraphUI.parent\n        ActionBase.__init__(self, function, self.oldParentId, self.newParentId, self.childName, **kargs)\n\n    def undo(self):\n        self.editor.ui.sceneGraphUI.parent(self.oldParentId, self.oldGrandParentId, self.childName)\n\n\nclass ActionSelectObj(ActionBase):\n    \"\"\" Action class for adding new object \"\"\"\n\n    def __init__(self, editor, *args, **kargs):\n        self.editor = editor\n        function = base.direct.selectCB\n        ActionBase.__init__(self, function, *args, **kargs)\n        self.selectedUIDs = []\n\n    def saveStatus(self):\n        selectedNPs = base.direct.selected.getSelectedAsList()\n        for np in selectedNPs:\n            obj = self.editor.objectMgr.findObjectByNodePath(np)\n            if obj:\n                uid = obj[OG.OBJ_UID]\n                self.selectedUIDs.append(uid)\n\n    def undo(self):\n        print(\"Undo : selectObject\")\n        base.direct.deselectAllCB()\n        for uid in self.selectedUIDs:\n            obj = self.editor.objectMgr.findObjectById(uid)\n            if obj:\n                self.editor.select(obj[OG.OBJ_NP], fMultiSelect=1, fUndo=0)\n        self.selectedUIDs = []\n\n\nclass ActionTransformObj(ActionBase):\n    \"\"\" Action class for object transformation \"\"\"\n\n    def __init__(self, editor, *args, **kargs):\n        self.editor = editor\n        function = self.editor.objectMgr.setObjectTransform\n        ActionBase.__init__(self, function, *args, **kargs)\n        self.uid = args[0]\n        #self.xformMat = Mat4(args[1])\n        self.origMat = None\n\n    def saveStatus(self):\n        obj = self.editor.objectMgr.findObjectById(self.uid)\n        if obj:\n            self.origMat = Mat4(self.editor.objectMgr.objectsLastXform[obj[OG.OBJ_UID]])\n            #self.origMat = Mat4(obj[OG.OBJ_NP].getMat())\n\n    def _do__call__(self, *args, **kargs):\n        self.result = ActionBase._do__call__(self, *args, **kargs)\n        obj = self.editor.objectMgr.findObjectById(self.uid)\n        if obj:\n            self.editor.objectMgr.objectsLastXform[self.uid] = Mat4(obj[OG.OBJ_NP].getMat())\n        return self.result\n\n    def undo(self):\n        if self.origMat is None:\n            print(\"Can't undo this transform\")\n        else:\n            print(\"Undo: transformObject\")\n            obj = self.editor.objectMgr.findObjectById(self.uid)\n            if obj:\n                obj[OG.OBJ_NP].setMat(self.origMat)\n                self.editor.objectMgr.objectsLastXform[self.uid] = Mat4(self.origMat)\n            del self.origMat\n            self.origMat = None\n\n\nclass ActionDeselectAll(ActionBase):\n    \"\"\" Action class for adding new object \"\"\"\n\n    def __init__(self, editor, *args, **kargs):\n        self.editor = editor\n        function = base.direct.deselectAllCB\n        ActionBase.__init__(self, function, *args, **kargs)\n        self.selectedUIDs = []\n\n    def saveStatus(self):\n        selectedNPs = base.direct.selected.getSelectedAsList()\n        for np in selectedNPs:\n            obj = self.editor.objectMgr.findObjectByNodePath(np)\n            if obj:\n                uid = obj[OG.OBJ_UID]\n                self.selectedUIDs.append(uid)\n\n    def undo(self):\n        print(\"Undo : deselectAll\")\n        base.direct.deselectAllCB()\n        for uid in self.selectedUIDs:\n            obj = self.editor.objectMgr.findObjectById(uid)\n            if obj:\n                self.editor.select(obj[OG.OBJ_NP], fMultiSelect=1, fUndo=0)\n        self.selectedUIDs = []\n\n\nclass ActionUpdateObjectProp(ActionBase):\n    \"\"\" Action class for updating object property \"\"\"\n\n    def __init__(self, editor, fSelectObject, obj, propName, val, oldVal, function, undoFunc, *args, **kargs):\n        self.editor = editor\n        self.fSelectObject = fSelectObject\n        self.obj = obj\n        self.propName = propName\n        self.newVal = val\n        self.oldVal = oldVal\n        self.undoFunc = undoFunc\n        ActionBase.__init__(self, function, *args, **kargs)\n\n    def saveStatus(self):\n        self.obj[OG.OBJ_PROP][self.propName] = self.newVal\n\n    def redo(self):\n        self.result = self._do__call__()#uid=self.uid, xformMat=self.xformMat)\n        if self.editor and self.fSelectObject:\n            base.direct.select(self.obj[OG.OBJ_NP], fUndo=0)\n        return self.result\n\n    def undo(self):\n        print(\"Undo : updateObjectProp\")\n        if self.oldVal:\n            self.obj[OG.OBJ_PROP][self.propName] = self.oldVal\n            if self.undoFunc:\n                self.undoFunc()\n                if self.editor and self.fSelectObject:\n                    base.direct.select(self.obj[OG.OBJ_NP], fUndo=0)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/ActionMgr.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/81e0c49e_ActionMgr.json",
    "doc_id": "doc_43"
  }
}