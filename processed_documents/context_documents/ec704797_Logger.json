{
  "content": "\"\"\"Logger module: contains the logger class which creates and writes\n   data to log files on disk\"\"\"\n\nfrom __future__ import annotations\n\nimport io\nimport time\nimport math\n\n\nclass Logger:\n    def __init__(self, fileName: str = \"log\") -> None:\n        \"\"\"\n        Logger constructor\n        \"\"\"\n        self.__timeStamp = True\n        self.__startTime = 0.0\n        self.__logFile: io.TextIOWrapper | None = None\n        self.__logFileName = fileName\n\n    def setTimeStamp(self, enable: bool) -> None:\n        \"\"\"\n        Toggle time stamp printing with log entries on and off\n        \"\"\"\n        self.__timeStamp = enable\n\n    def getTimeStamp(self) -> bool:\n        \"\"\"\n        Return whether or not we are printing time stamps with log entries\n        \"\"\"\n        return self.__timeStamp\n\n    # logging control\n\n    def resetStartTime(self) -> None:\n        \"\"\"\n        Reset the start time of the log file for time stamps\n        \"\"\"\n        self.__startTime = time.time()\n\n    def log(self, entryString: str) -> None:\n        \"\"\"log(self, string)\n        Print the given string to the log file\"\"\"\n        if self.__logFile is None:\n            self.__openLogFile()\n        assert self.__logFile is not None\n        if self.__timeStamp:\n            self.__logFile.write(self.__getTimeStamp())\n        self.__logFile.write(entryString + '\\n')\n\n    # logging functions\n\n    def __openLogFile(self) -> None:\n        \"\"\"\n        Open a file for logging error/warning messages\n        \"\"\"\n        self.resetStartTime()\n        t = time.localtime(self.__startTime)\n        st = time.strftime(\"%m-%d-%Y-%H-%M-%S\", t)\n        logFileName = self.__logFileName + \".\" + st\n        self.__logFile = open(logFileName, \"w\")\n\n    def __closeLogFile(self) -> None:\n        \"\"\"\n        Close the error/warning output file\n        \"\"\"\n        if self.__logFile is not None:\n            self.__logFile.close()\n\n    def __getTimeStamp(self) -> str:\n        \"\"\"\n        Return the offset between current time and log file startTime\n        \"\"\"\n        t = time.time()\n        dt = t - self.__startTime\n        days, dt = divmod(dt, 86400)\n        hours, dt = divmod(dt, 3600)\n        minutes, dt = divmod(dt, 60)\n        seconds = int(math.ceil(dt))\n        return \"%02d:%02d:%02d:%02d: \" % (days, hours, minutes, seconds)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directnotify/Logger.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/ec704797_Logger.json",
    "doc_id": "doc_103"
  }
}