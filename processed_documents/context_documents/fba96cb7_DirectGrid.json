{
  "content": "import math\nfrom panda3d.core import NodePath, Point3, VBase4\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.showbase import ShowBaseGlobal\nfrom .DirectUtil import ROUND_TO, useDirectRenderStyle\nfrom .DirectGeometry import LineNodePath\n\n\nclass DirectGrid(NodePath, DirectObject):\n    def __init__(self,gridSize=100.0,gridSpacing=5.0,planeColor=(0.5,0.5,0.5,0.5),parent = None):\n        # Initialize superclass\n        NodePath.__init__(self, 'DirectGrid')\n        # Don't wireframe or light\n        useDirectRenderStyle(self)\n\n        # Load up grid parts to initialize grid object\n        # Polygon used to mark grid plane\n        self.gridBack = ShowBaseGlobal.loader.loadModel('models/misc/gridBack')\n        self.gridBack.reparentTo(self)\n        self.gridBack.setColor(*planeColor)\n\n        # Grid Lines\n        self.lines = self.attachNewNode('gridLines')\n        self.minorLines = LineNodePath(self.lines)\n        self.minorLines.lineNode.setName('minorLines')\n        self.minorLines.setColor(VBase4(0.3, 0.55, 1, 1))\n        self.minorLines.setThickness(1)\n\n        self.majorLines = LineNodePath(self.lines)\n        self.majorLines.lineNode.setName('majorLines')\n        self.majorLines.setColor(VBase4(0.3, 0.55, 1, 1))\n        self.majorLines.setThickness(5)\n\n        self.centerLines = LineNodePath(self.lines)\n        self.centerLines.lineNode.setName('centerLines')\n        self.centerLines.setColor(VBase4(1, 0, 0, 0))\n        self.centerLines.setThickness(3)\n\n        # Small marker to hilight snap-to-grid point\n        self.snapMarker = ShowBaseGlobal.loader.loadModel('models/misc/sphere')\n        self.snapMarker.node().setName('gridSnapMarker')\n        self.snapMarker.reparentTo(self)\n        self.snapMarker.setColor(1, 0, 0, 1)\n        self.snapMarker.setScale(0.3)\n        self.snapPos = Point3(0)\n\n        # Initialize Grid characteristics\n        self.fXyzSnap = 1\n        self.fHprSnap = 1\n        self.gridSize = gridSize\n        self.gridSpacing = gridSpacing\n        self.snapAngle = 15.0\n        self.enable(parent = parent)\n\n    def enable(self, parent = None):\n        if parent:\n            self.reparentTo(parent)\n        else:\n            self.reparentTo(ShowBaseGlobal.direct.group)\n\n        self.updateGrid()\n        self.fEnabled = 1\n\n    def disable(self):\n        self.detachNode()\n        self.fEnabled = 0\n\n    def toggleGrid(self, parent = None):\n        if self.fEnabled:\n            self.disable()\n        else:\n            self.enable(parent = parent)\n\n    def isEnabled(self):\n        return self.fEnabled\n\n    def updateGrid(self):\n        # Update grid lines based upon current grid spacing and grid size\n        # First reset existing grid lines\n        self.minorLines.reset()\n        self.majorLines.reset()\n        self.centerLines.reset()\n\n        # Now redraw lines\n        numLines = int(math.ceil(self.gridSize/self.gridSpacing))\n        scaledSize = numLines * self.gridSpacing\n\n        center = self.centerLines\n        minor = self.minorLines\n        major = self.majorLines\n        for i in range(-numLines, numLines + 1):\n            if i == 0:\n                center.moveTo(i * self.gridSpacing, -scaledSize, 0)\n                center.drawTo(i * self.gridSpacing, scaledSize, 0)\n                center.moveTo(-scaledSize, i * self.gridSpacing, 0)\n                center.drawTo(scaledSize, i * self.gridSpacing, 0)\n            else:\n                if (i % 5) == 0:\n                    major.moveTo(i * self.gridSpacing, -scaledSize, 0)\n                    major.drawTo(i * self.gridSpacing, scaledSize, 0)\n                    major.moveTo(-scaledSize, i * self.gridSpacing, 0)\n                    major.drawTo(scaledSize, i * self.gridSpacing, 0)\n                else:\n                    minor.moveTo(i * self.gridSpacing, -scaledSize, 0)\n                    minor.drawTo(i * self.gridSpacing, scaledSize, 0)\n                    minor.moveTo(-scaledSize, i * self.gridSpacing, 0)\n                    minor.drawTo(scaledSize, i * self.gridSpacing, 0)\n\n        center.create()\n        minor.create()\n        major.create()\n        if self.gridBack:\n            self.gridBack.setScale(scaledSize)\n\n    def setXyzSnap(self, fSnap):\n        self.fXyzSnap = fSnap\n\n    def getXyzSnap(self):\n        return self.fXyzSnap\n\n    def setHprSnap(self, fSnap):\n        self.fHprSnap = fSnap\n\n    def getHprSnap(self):\n        return self.fHprSnap\n\n    def computeSnapPoint(self, point):\n        # Start of with current point\n        self.snapPos.assign(point)\n        # Snap if necessary\n        if self.fXyzSnap:\n            self.snapPos.set(\n                ROUND_TO(self.snapPos[0], self.gridSpacing),\n                ROUND_TO(self.snapPos[1], self.gridSpacing),\n                ROUND_TO(self.snapPos[2], self.gridSpacing))\n\n        # Move snap marker to this point\n        self.snapMarker.setPos(self.snapPos)\n\n        # Return the hit point\n        return self.snapPos\n\n    def computeSnapAngle(self, angle):\n        return ROUND_TO(angle, self.snapAngle)\n\n    def setSnapAngle(self, angle):\n        self.snapAngle = angle\n\n    def getSnapAngle(self):\n        return self.snapAngle\n\n    def setGridSpacing(self, spacing):\n        self.gridSpacing = spacing\n        self.updateGrid()\n\n    def getGridSpacing(self):\n        return self.gridSpacing\n\n    def setGridSize(self, size):\n        # Set size of grid back and redraw lines\n        self.gridSize = size\n        self.updateGrid()\n\n    def getGridSize(self):\n        return self.gridSize\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directtools/DirectGrid.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/fba96cb7_DirectGrid.json",
    "doc_id": "doc_183"
  }
}