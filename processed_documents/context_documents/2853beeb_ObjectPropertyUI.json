{
  "content": "\"\"\"\nUI for object property control\n\"\"\"\nimport wx\nimport os\nimport math\n\nfrom wx.lib.embeddedimage import PyEmbeddedImage\nfrom wx.lib.scrolledpanel import ScrolledPanel\nfrom wx.lib.agw.cubecolourdialog import CCD_SHOW_ALPHA, CubeColourDialog\nfrom direct.wxwidgets.WxSlider import WxSlider\nfrom panda3d.core import BitMask32, Filename\nfrom . import ObjectGlobals as OG\nfrom . import AnimGlobals as AG\n\n#----------------------------------------------------------------------\nKey = PyEmbeddedImage(\n    \"iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAIAAACQKrqGAAAAA3NCSVQICAjb4U/gAAABIElE\"\n    \"QVQokZWSMW7CQBBFZ2Z3sQ02Ni4sOS6QiLgO5yBXIMcJ1KENje8QLESH7F3FVFQIIS3eTWGJ\"\n    \"VE7Iq6Z4+tL8GVRSwmPQg94fKiIOBoNer2et/U1FRER8X6+LonBdFwB4l+p53mq1qqRUUsZx\"\n    \"nKYpBwDOuRACEQGgaRoAYETn8/l4PL4uFkqp/X6fZRlnjO12u7KqENEa43keADDGvuo6Go0A\"\n    \"wPd9YkxrzY0x4/FYKlXX9eVymc1mjIiIgiD43G4BwFprmgYRubU2DMPnySTw/ev1+pSmRISI\"\n    \"SZJ8bDan06ksSyLiQmDXCfr9fp7nb8vldDp9mc9d1/1R27XaClscxzkcDlEUhcOhvt06U1uE\"\n    \"EMaYtpbOXlu01vf5Hz/wDRuDdIDl5WtQAAAAAElFTkSuQmCC\")\n#----------------------------------------------------------------------\n\n\nclass AnimFileDrop(wx.FileDropTarget):\n    def __init__(self, editor):\n        wx.FileDropTarget.__init__(self)\n        self.editor = editor\n\n    def OnDropFiles(self, x, y, filenames):\n        obj = self.editor.objectMgr.findObjectByNodePath(base.direct.selected.last)\n        if obj is None:\n            return\n\n        objDef = obj[OG.OBJ_DEF]\n        if not objDef.actor:\n            return\n\n        objNP = obj[OG.OBJ_NP]\n\n        for filename in filenames:\n            name = os.path.basename(filename)\n            animName = Filename.fromOsSpecific(filename).getFullpath()\n            if name.endswith('.mb') or\\\n               name.endswith('.ma'):\n                self.editor.convertMaya(animName, self.editor.ui.protoPaletteUI.addNewItem, obj, isAnim=True)\n                return\n\n            if animName not in objDef.anims:\n                objDef.anims.append(animName)\n\n            objNP.loadAnims({name:animName})\n            objNP.loop(name)\n            obj[OG.OBJ_ANIM] = animName\n            self.editor.ui.objectPropertyUI.updateProps(obj)\n\n\nclass ObjectPropUI(wx.Panel):\n    \"\"\"\n    Base class for ObjectPropUIs,\n    It consists of label area and ui area.\n    \"\"\"\n\n    def __init__(self, parent, label):\n        wx.Panel.__init__(self, parent)\n        self.parent = parent\n        self.labelPane = wx.Panel(self)\n        self.label = wx.StaticText(self.labelPane, label=label)\n        self.labelSizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.labelSizer.Add(self.label)\n        bmpKey = Key.GetBitmap()\n        self.setKeyButton = wx.BitmapButton(self.labelPane, -1, bmpKey, size = (15,15),style = wx.BU_AUTODRAW)\n        self.labelSizer.Add(self.setKeyButton)\n        self.labelPane.SetSizer(self.labelSizer)\n        self.uiPane = wx.Panel(self)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.labelPane)\n        sizer.Add(self.uiPane, 1, wx.EXPAND, 0)\n        self.SetSizer(sizer)\n\n        self.setKeyButton.Bind(wx.EVT_BUTTON, self.onKey)\n\n    def onKey(self, evt):\n        self.parent = wx.GetTopLevelParent(self)\n        if self.parent.editor.mode == self.parent.editor.ANIM_MODE:\n            obj = self.parent.editor.objectMgr.findObjectByNodePath(base.direct.selected.last)\n\n            value = self.getValue()\n            frame = self.parent.editor.ui.animUI.curFrame\n\n            if property in self.parent.editor.animMgr.keyFramesInfo:\n                for i in range(len(self.parent.editor.animMgr.keyFramesInfo[property])):\n                    if self.parent.editor.animMgr.keyFramesInfo[property][i][AG.FRAME] == frame:\n                        del self.parent.editor.animMgr.keyFramesInfo[property][i]\n\n                self.parent.editor.animMgr.keyFramesInfo[property].append([frame, value, [], []])\n                #sort keyFrameInfo list by the order of frame number\n                sortKeyList = self.parent.editor.animMgr.keyFramesInfo[property]\n                for i in range(0, len(sortKeyList)-1):\n                    for j in range(i+1, len(sortKeyList)):\n                        if sortKeyList[i][AG.FRAME]>sortKeyList[j][AG.FRAME]:\n                            temp = sortKeyList[i]\n                            sortKeyList[i] = sortKeyList[j]\n                            sortKeyList[j] = temp\n\n                self.parent.editor.animMgr.generateSlope(self.parent.editor.animMgr.keyFramesInfo[property])\n            else:\n                self.parent.editor.animMgr.keyFramesInfo[property] = [[frame, value, [], []]]\n\n            exist = False\n            for keyFrame in self.parent.editor.animMgr.keyFrames:\n                if frame == keyFrame:\n                    exist = True\n                    break\n\n            if not exist:\n                self.parent.editor.animMgr.keyFrames.append(frame)\n            self.parent.editor.ui.animUI.OnPropKey()\n        else:\n            evt.Skip()\n\n    def setValue(self, value):\n        self.ui.SetValue(value)\n\n    def getValue(self):\n        return self.ui.GetValue()\n\n    def bindFunc(self, inFunc, outFunc, valFunc = None):\n        self.ui.Bind(wx.EVT_ENTER_WINDOW, inFunc)\n        self.ui.Bind(wx.EVT_LEAVE_WINDOW, outFunc)\n        if valFunc:\n            self.ui.Bind(self.eventType, valFunc)\n\n\nclass ObjectPropUIEntry(ObjectPropUI):\n    \"\"\" UI for string value properties \"\"\"\n\n    def __init__(self, parent, label):\n        ObjectPropUI.__init__(self, parent, label)\n        self.ui = wx.TextCtrl(self.uiPane, -1)\n        self.eventType = wx.EVT_TEXT_ENTER\n        self.Layout()\n\n    def setValue(self, value):\n        self.ui.SetValue(str(value))\n\n\nclass ObjectPropUISlider(ObjectPropUI):\n    \"\"\" UI for float value properties \"\"\"\n\n    def __init__(self, parent, label, value, minValue, maxValue):\n        ObjectPropUI.__init__(self, parent, label)\n        self.ui = WxSlider(self.uiPane, -1, value, minValue, maxValue,\n                           pos = (0,0), size=(140, -1),\n                           style=wx.SL_HORIZONTAL | wx.SL_LABELS)\n        self.ui.Enable()\n        self.Layout()\n\n    def bindFunc(self, inFunc, outFunc, valFunc = None):\n        self.ui.Bind(wx.EVT_ENTER_WINDOW, inFunc)\n        self.ui.Bind(wx.EVT_LEAVE_WINDOW, outFunc)\n        self.ui.textValue.Bind(wx.EVT_ENTER_WINDOW, inFunc)\n        self.ui.textValue.Bind(wx.EVT_LEAVE_WINDOW, outFunc)\n\n        if valFunc:\n            self.ui.bindFunc(valFunc)\n\n\nclass ObjectPropUISpinner(ObjectPropUI):\n    \"\"\" UI for int value properties \"\"\"\n\n    def __init__(self, parent, label, value, minValue, maxValue):\n        ObjectPropUI.__init__(self, parent, label)\n        self.ui = wx.SpinCtrl(self.uiPane, -1, \"\", min=minValue, max=maxValue, initial=value)\n        self.eventType = wx.EVT_SPIN\n        self.Layout()\n\n\nclass ObjectPropUICheck(ObjectPropUI):\n    def __init__(self, parent, label, value):\n        ObjectPropUI.__init__(self, parent, label)\n        self.ui = wx.CheckBox(self.uiPane, -1, \"\", size=(50, 30))\n        self.setValue(value)\n        self.eventType = wx.EVT_CHECKBOX\n        self.Layout()\n\n\nclass ObjectPropUIRadio(ObjectPropUI):\n    def __init__(self, parent, label, value, valueList):\n        ObjectPropUI.__init__(self, parent, label)\n        self.ui = wx.RadioBox(self.uiPane, -1, \"\", choices=valueList, majorDimension=1, style=wx.RA_SPECIFY_COLS)\n        self.setValue(value)\n        self.eventType = wx.EVT_RADIOBOX\n        self.Layout()\n\n    def setValue(self, value):\n        self.ui.SetStringSelection(value)\n\n    def getValue(self):\n        return self.ui.GetStringSelection()\n\n\nclass ObjectPropUICombo(ObjectPropUI):\n    def __init__(self, parent, label, value, valueList, obj=None, callBack=None):\n        ObjectPropUI.__init__(self, parent, label)\n        self.ui = wx.Choice(self.uiPane, -1, choices=valueList)\n        if callBack is not None:\n            button = wx.Button(self.labelPane, -1, 'Update', size = (100, 18))\n            button.Bind(wx.EVT_BUTTON, lambda p0=None, p1=obj, p2=self: callBack(p0, p1, p2))\n            self.labelSizer.Add(button)\n        self.setValue(value)\n        self.eventType = wx.EVT_CHOICE\n        self.Layout()\n\n    def setValue(self, value):\n        self.ui.SetStringSelection(value)\n\n    def getValue(self):\n        return self.ui.GetStringSelection()\n\n    def setItems(self, valueList):\n        self.ui.SetItems(valueList)\n\n\nclass ObjectPropUITime(wx.Panel):\n    def __init__(self, parent, label, value):\n        wx.Panel.__init__(self, parent)\n        self.parent = parent\n        self.labelPane = wx.Panel(self)\n        self.label = wx.StaticText(self.labelPane, label=label)\n        self.labelSizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.labelSizer.Add(self.label)\n        self.labelPane.SetSizer(self.labelSizer)\n        self.uiPane = wx.Panel(self)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.labelPane)\n        sizer.Add(self.uiPane, 1, wx.EXPAND, 0)\n        self.SetSizer(sizer)\n\n        hSizer = wx.BoxSizer(wx.HORIZONTAL)\n        self.uiAmPm = wx.Choice(self.uiPane, -1, choices=['AM', 'PM'])\n        self.uiHour = wx.Choice(self.uiPane, -1, choices=[str(x) for x in range(1, 13)])\n        self.uiMin = wx.Choice(self.uiPane, -1, choices=[str(x) for x in range(0, 60, 15)])\n\n        hSizer.Add(self.uiAmPm)\n        hSizer.Add(self.uiHour)\n        hSizer.Add(self.uiMin)\n        self.uiPane.SetSizer(hSizer)\n\n        self.setValue(value)\n        self.eventType = wx.EVT_CHOICE\n        self.Layout()\n\n    def setValue(self, value):\n        hourVal = int(math.floor(value))\n        minVal = [0, 15, 30, 45][int((value - hourVal) * 4)]\n\n        if hourVal > 11:\n            ampmStr = 'PM'\n            hourVal = hourVal - 12\n        else:\n            ampmStr = 'AM'\n\n        if hourVal == 0:\n            hourVal = 12\n\n        self.uiAmPm.SetStringSelection(ampmStr)\n        self.uiHour.SetStringSelection(str(hourVal))\n        self.uiMin.SetStringSelection(str(minVal))\n\n    def getValue(self):\n        ampmStr = self.uiAmPm.GetStringSelection()\n        hourVal = int(self.uiHour.GetStringSelection())\n        if hourVal == 12:\n            hourVal = 0\n        if ampmStr == 'PM':\n            hourVal += 12\n\n        minVal = float(self.uiMin.GetStringSelection())\n        value = float(hourVal) + minVal / 60.0\n        return value\n\n    def bindFunc(self, inFunc, outFunc, valFunc = None):\n        self.uiAmPm.Bind(wx.EVT_ENTER_WINDOW, inFunc)\n        self.uiAmPm.Bind(wx.EVT_LEAVE_WINDOW, outFunc)\n        self.uiHour.Bind(wx.EVT_ENTER_WINDOW, inFunc)\n        self.uiHour.Bind(wx.EVT_LEAVE_WINDOW, outFunc)\n        self.uiMin.Bind(wx.EVT_ENTER_WINDOW, inFunc)\n        self.uiMin.Bind(wx.EVT_LEAVE_WINDOW, outFunc)\n        if valFunc:\n            self.uiAmPm.Bind(self.eventType, valFunc)\n            self.uiHour.Bind(self.eventType, valFunc)\n            self.uiMin.Bind(self.eventType, valFunc)\n\n\nclass ColorPicker(CubeColourDialog):\n    def __init__(self, parent, colourData=None, style=CCD_SHOW_ALPHA,\n                 alpha=255, updateCB=None, exitCB=None):\n        self.updateCB = updateCB\n        CubeColourDialog.__init__(self, parent, colourData, style)\n        self.okButton.Hide()\n        self.cancelButton.Hide()\n        self._colour.alpha = alpha\n        self.alphaSpin.SetValue(self._colour.alpha)\n        self.DrawAlpha()\n        if exitCB:\n            self.Bind(wx.EVT_CLOSE, exitCB)\n\n    def SetPanelColours(self):\n        self.oldColourPanel.RefreshColour(self._oldColour)\n        self.newColourPanel.RefreshColour(self._colour)\n        if self.updateCB:\n            self.updateCB(self._colour.r, self._colour.g, self._colour.b, self._colour.alpha)\n\n\nclass ObjectPropertyUI(ScrolledPanel):\n    def __init__(self, parent, editor):\n        self.editor = editor\n        self.colorPicker = None\n        self.lastColorPickerPos = None\n        self.lastPropTab = None\n        ScrolledPanel.__init__(self, parent)\n\n        parentSizer = wx.BoxSizer(wx.VERTICAL)\n        parentSizer.Add(self, 1, wx.EXPAND, 0)\n        parent.SetSizer(parentSizer)\n        parent.Layout()\n\n        self.SetDropTarget(AnimFileDrop(self.editor))\n\n    def clearPropUI(self):\n        sizer = self.GetSizer()\n        if sizer is not None:\n            self.lastPropTab = self.nb.GetCurrentPage().GetName()\n            sizer.Remove(self.propPane)\n            self.propPane.Destroy()\n            self.SetSizer(None)\n        self.Layout()\n        self.SetupScrolling(self, scroll_y=True, rate_y=20)\n\n    def colorPickerExitCB(self, evt=None):\n        self.lastColorPickerPos = self.colorPicker.GetPosition()\n        self.colorPicker.Destroy()\n        self.colorPicker = None\n\n    def colorPickerUpdateCB(self, rr, gg, bb, aa):\n        r = rr / 255.0\n        g = gg / 255.0\n        b = bb / 255.0\n        a = aa / 255.0\n        self.propCR.setValue(r)\n        self.propCG.setValue(g)\n        self.propCB.setValue(b)\n        self.propCA.setValue(a)\n\n        self.editor.objectMgr.updateObjectColor(r, g, b, a)\n\n    def onColorSlider(self, evt):\n        r = float(self.editor.ui.objectPropertyUI.propCR.getValue())\n        g = float(self.editor.ui.objectPropertyUI.propCG.getValue())\n        b = float(self.editor.ui.objectPropertyUI.propCB.getValue())\n        a = float(self.editor.ui.objectPropertyUI.propCA.getValue())\n\n        if self.colorPicker:\n            evtObj = evt.GetEventObject()\n            if evtObj == self.propCR.ui or\\\n               evtObj == self.propCR.ui.textValue:\n                self.colorPicker.redSpin.SetValue(r * 255)\n                self.colorPicker.AssignColourValue('r', r * 255, 255, 0)\n            elif evtObj == self.propCG.ui or\\\n                 evtObj == self.propCG.ui.textValue:\n                self.colorPicker.greenSpin.SetValue(g * 255)\n                self.colorPicker.AssignColourValue('g', g * 255, 255, 0)\n            elif evtObj == self.propCB.ui or\\\n                 evtObj == self.propCB.ui.textValue:\n                self.colorPicker.blueSpin.SetValue(b * 255)\n                self.colorPicker.AssignColourValue('b', b * 255, 255, 0)\n            else:\n                self.colorPicker._colour.alpha = a * 255\n                self.colorPicker.alphaSpin.SetValue(self.colorPicker._colour.alpha)\n                self.colorPicker.DrawAlpha()\n\n        self.editor.objectMgr.updateObjectColor(r, g, b, a)\n\n    def openColorPicker(self, evt, colourData, alpha):\n        if self.colorPicker:\n            self.lastColorPickerPos = self.colorPicker.GetPosition()\n            self.colorPicker.Destroy()\n\n        self.colorPicker = ColorPicker(self, colourData, alpha=alpha, updateCB=self.colorPickerUpdateCB, exitCB=self.colorPickerExitCB)\n        self.colorPicker.GetColourData().SetChooseFull(True)\n        self.colorPicker.Show()\n        if self.lastColorPickerPos:\n            self.colorPicker.SetPosition(self.lastColorPickerPos)\n\n    def updateProps(self, obj, movable=True):\n        self.clearPropUI()\n\n        self.propPane = wx.Panel(self)\n        mainSizer = wx.BoxSizer(wx.VERTICAL)\n        mainSizer.Add(self.propPane, 1, wx.EXPAND, 0)\n        self.SetSizer(mainSizer)\n\n        self.nb = wx.Notebook(self.propPane, style=wx.NB_BOTTOM)\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.nb, 1, wx.EXPAND)\n        self.propPane.SetSizer(sizer)\n\n        self.transformPane = wx.Panel(self.nb, -1, name='Transform')\n        self.nb.AddPage(self.transformPane, 'Transform')\n\n        self.propX = ObjectPropUIEntry(self.transformPane, 'X')\n        self.propY = ObjectPropUIEntry(self.transformPane, 'Y')\n        self.propZ = ObjectPropUIEntry(self.transformPane, 'Z')\n\n        self.propH = ObjectPropUISlider(self.transformPane, 'H', 0, 0, 360)\n        self.propP = ObjectPropUISlider(self.transformPane, 'P', 0, 0, 360)\n        self.propR = ObjectPropUISlider(self.transformPane, 'R', 0, 0, 360)\n\n        self.propSX = ObjectPropUIEntry(self.transformPane, 'SX')\n        self.propSY = ObjectPropUIEntry(self.transformPane, 'SY')\n        self.propSZ = ObjectPropUIEntry(self.transformPane, 'SZ')\n\n        transformProps = [\n            self.propX, self.propY, self.propZ,\n            self.propH, self.propP, self.propR,\n            self.propSX, self.propSY, self.propSZ,\n        ]\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.AddMany(transformProps)\n        self.transformPane.SetSizer(sizer)\n        for transformProp in transformProps:\n            transformProp.bindFunc(self.editor.objectMgr.onEnterObjectPropUI,\n                                   self.editor.objectMgr.onLeaveObjectPropUI,\n                                   self.editor.objectMgr.updateObjectTransform)\n\n        if not movable:\n            for transformProp in transformProps:\n                transformProp.ui.Disable()\n\n        self.lookPane = wx.Panel(self.nb, -1, name='Look')\n        self.nb.AddPage(self.lookPane, 'Look')\n\n        objNP = obj[OG.OBJ_NP]\n        objRGBA = obj[OG.OBJ_RGBA]\n        self.propCR = ObjectPropUISlider(self.lookPane, 'CR', objRGBA[0], 0, 1)\n        self.propCG = ObjectPropUISlider(self.lookPane, 'CG', objRGBA[1], 0, 1)\n        self.propCB = ObjectPropUISlider(self.lookPane, 'CB', objRGBA[2], 0, 1)\n        self.propCA = ObjectPropUISlider(self.lookPane, 'CA', objRGBA[3], 0, 1)\n        colorProps = [self.propCR, self.propCG, self.propCB, self.propCA]\n\n        for colorProp in colorProps:\n            colorProp.ui.bindFunc(self.onColorSlider)\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.AddMany(colorProps)\n        button = wx.Button(self.lookPane, -1, 'Color Picker', (0,0), (140, 20))\n        _colourData = wx.ColourData()\n        _colourData.SetColour(wx.Colour(objRGBA[0] * 255, objRGBA[1] * 255, objRGBA[2] * 255))\n        button.Bind(wx.EVT_BUTTON, lambda p0=None, p1=_colourData, p2=objRGBA[3] * 255: self.openColorPicker(p0, p1, p2))\n\n        sizer.Add(button)\n\n        if self.colorPicker:\n            self.openColorPicker(None, _colourData, objRGBA[3] * 255)\n\n        objDef = obj[OG.OBJ_DEF]\n\n        if objDef.updateModelFunction is not None or (objDef.model is not None and len(objDef.models) > 0):\n            defaultModel = obj[OG.OBJ_MODEL]\n            if defaultModel is None:\n                defaultModel = ''\n\n            if len(objDef.models) == 0:\n                modelList = ''\n            else:\n                modelList = objDef.models\n            propUI = ObjectPropUICombo(self.lookPane, 'model', defaultModel, modelList, obj, callBack=objDef.updateModelFunction)\n            sizer.Add(propUI)\n\n            propUI.bindFunc(self.editor.objectMgr.onEnterObjectPropUI,\n                            self.editor.objectMgr.onLeaveObjectPropUI,\n                            lambda p0=None, p1=obj: self.editor.objectMgr.updateObjectModelFromUI(p0, p1))\n\n        animList = objDef.animDict.get(obj[OG.OBJ_MODEL])\n        if len(objDef.anims) > 0 or animList:\n            if animList is None:\n                animList = objDef.anims\n\n            propUI = ObjectPropUICombo(self.lookPane, 'anim', obj[OG.OBJ_ANIM], animList)\n            sizer.Add(propUI)\n\n            propUI.bindFunc(self.editor.objectMgr.onEnterObjectPropUI,\n                            self.editor.objectMgr.onLeaveObjectPropUI,\n                            lambda p0=None, p1=obj: self.editor.objectMgr.updateObjectAnimFromUI(p0, p1))\n\n        self.lookPane.SetSizer(sizer)\n\n        self.propsPane = wx.Panel(self.nb, -1, name='Properties')\n        self.nb.AddPage(self.propsPane, 'Properties')\n        sizer = wx.BoxSizer(wx.VERTICAL)\n\n        propNames = objDef.orderedProperties[:]\n        for key in list(objDef.properties.keys()):\n            if key not in propNames:\n                propNames.append(key)\n\n        for key in propNames:\n            # handling properties mask\n            propMask = BitMask32()\n            for modeKey in list(objDef.propertiesMask.keys()):\n                if key in objDef.propertiesMask[modeKey]:\n                    propMask |= modeKey\n\n            if not propMask.isZero():\n                if (self.editor.mode & propMask).isZero():\n                    continue\n\n            propDef = objDef.properties[key]\n            propType = propDef[OG.PROP_TYPE]\n            propDataType = propDef[OG.PROP_DATATYPE]\n            value = obj[OG.OBJ_PROP].get(key)\n\n            if propType == OG.PROP_UI_ENTRY:\n                propUI = ObjectPropUIEntry(self.propsPane, key)\n                propUI.setValue(value)\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_SLIDE:\n                if len(propDef) <= OG.PROP_RANGE:\n                    continue\n                propRange = propDef[OG.PROP_RANGE]\n\n                if value is None:\n                    continue\n\n                if propDataType != OG.PROP_FLOAT:\n                    value = float(value)\n\n                propUI = ObjectPropUISlider(self.propsPane, key, value, propRange[OG.RANGE_MIN], propRange[OG.RANGE_MAX])\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_SPIN:\n                if len(propDef) <= OG.PROP_RANGE:\n                    continue\n                propRange = propDef[OG.PROP_RANGE]\n\n                if value is None:\n                    continue\n\n                propUI = ObjectPropUISpinner(self.propsPane, key, value, propRange[OG.RANGE_MIN], propRange[OG.RANGE_MAX])\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_CHECK:\n                if value is None:\n                    continue\n\n                propUI = ObjectPropUICheck(self.propsPane, key, value)\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_RADIO:\n                if len(propDef) <= OG.PROP_RANGE:\n                    continue\n                propRange = propDef[OG.PROP_RANGE]\n\n                if value is None:\n                    continue\n\n                if propDataType != OG.PROP_STR:\n                    for i in range(len(propRange)):\n                        propRange[i] = str(propRange[i])\n\n                    value = str(value)\n\n                propUI = ObjectPropUIRadio(self.propsPane, key, value, propRange)\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_COMBO:\n                if len(propDef) <= OG.PROP_RANGE:\n                    continue\n                propRange = propDef[OG.PROP_RANGE]\n\n                if value is None:\n                    continue\n\n                if propDataType != OG.PROP_STR:\n                    for i in range(len(propRange)):\n                        propRange[i] = str(propRange[i])\n\n                    value = str(value)\n\n                propUI = ObjectPropUICombo(self.propsPane, key, value, propRange)\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_COMBO_DYNAMIC:\n                if len(propDef) <= OG.PROP_DYNAMIC_KEY:\n                    continue\n\n                propDynamicKey = propDef[OG.PROP_DYNAMIC_KEY]\n                if propDynamicKey == OG.PROP_MODEL:\n                    dynamicRangeKey = obj[OG.OBJ_MODEL]\n                else:\n                    dynamicRangeKey = obj[OG.OBJ_PROP].get(propDynamicKey)\n\n                if dynamicRangeKey is None:\n                    self.editor.objectMgr.updateObjectPropValue(obj, key, propDef[OG.PROP_DEFAULT], fUndo=False)\n                    continue\n\n                propRange = propDef[OG.PROP_RANGE].get(dynamicRangeKey)\n\n                if propRange is None:\n                    self.editor.objectMgr.updateObjectPropValue(obj, key, propDef[OG.PROP_DEFAULT], fUndo=False)\n                    continue\n\n                if value is None:\n                    continue\n\n                if propDataType != OG.PROP_STR:\n                    for i in range(len(propRange)):\n                        propRange[i] = str(propRange[i])\n\n                    value = str(value)\n\n                if value not in propRange:\n                    value = propRange[0]\n                    self.editor.objectMgr.updateObjectPropValue(obj, key, value, fUndo=False)\n\n                propUI = ObjectPropUICombo(self.propsPane, key, value, propRange)\n                sizer.Add(propUI)\n\n            elif propType == OG.PROP_UI_TIME:\n\n                if value is None:\n                    continue\n\n                propUI = ObjectPropUITime(self.propsPane, key, value)\n                sizer.Add(propUI)\n\n            else:\n                # unspported property type\n                continue\n\n            propUI.bindFunc(self.editor.objectMgr.onEnterObjectPropUI,\n                            self.editor.objectMgr.onLeaveObjectPropUI,\n                            lambda p0=None, p1=obj, p2=key: self.editor.objectMgr.updateObjectProperty(p0, p1, p2))\n\n        self.propsPane.SetSizer(sizer)\n        self.Layout()\n        self.SetupScrolling(self, scroll_y = True, rate_y = 20)\n        if self.lastPropTab == 'Transform':\n            self.nb.SetSelection(0)\n        elif self.lastPropTab == 'Look':\n            self.nb.SetSelection(1)\n        elif self.lastPropTab == 'Properties':\n            self.nb.SetSelection(2)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/ObjectPropertyUI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/2853beeb_ObjectPropertyUI.json",
    "doc_id": "doc_22"
  }
}