{
  "content": "from direct.showbase.ShowBase import ShowBase\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.interval.IntervalGlobal import Sequence, Func, Wait\nfrom panda3d.core import CollisionTraverser, CollisionHandlerEvent\nfrom panda3d.core import CollisionNode, CollisionSphere\n\n\nclass World(DirectObject):\n\n    def __init__(self):\n        # Initialize the traverser.\n        base.cTrav = CollisionTraverser()\n\n        # Initialize the handler.\n        self.collHandEvent = CollisionHandlerEvent()\n        self.collHandEvent.addInPattern('into-%in')\n        self.collHandEvent.addOutPattern('outof-%in')\n\n        # Make a variable to store the unique collision string count.\n        self.collCount = 0\n\n        # Load a model. Reparent it to the camera so we can move it.\n        s = base.loader.loadModel('smiley')\n        s.reparentTo(base.camera)\n        s.setPos(0, 25, 0)\n\n        # Setup a collision solid for this model.\n        sColl = self.initCollisionSphere(s, True)\n\n        # Add this object to the traverser.\n        base.cTrav.addCollider(sColl[0], self.collHandEvent)\n\n        # Accept the events sent by the collisions.\n        self.accept('into-' + sColl[1], self.collide3)\n        self.accept('outof-' + sColl[1], self.collide4)\n        print(sColl[1])\n\n        # Load another model.\n        t = base.loader.loadModel('smiley')\n        t.reparentTo(base.render)\n        t.setPos(5, 25, 0)\n\n        # Setup a collision solid for this model.\n        tColl = self.initCollisionSphere(t, True)\n\n        # Add this object to the traverser.\n        base.cTrav.addCollider(tColl[0], self.collHandEvent)\n\n        # Accept the events sent by the collisions.\n        self.accept('into-' + tColl[1], self.collide)\n        self.accept('outof-' + tColl[1], self.collide2)\n        print(tColl[1])\n\n        print(\"WERT\")\n\n    def collide(self, collEntry):\n        print(\"WERT: object has collided into another object\")\n        collParent = collEntry.getFromNodePath().getParent()\n        Sequence(\n            Func(collParent.setColor, (1, 0, 0, 1)),\n            Wait(0.2),\n            Func(collParent.setColor, (0, 1, 0, 1)),\n            Wait(0.2),\n            Func(collParent.setColor, (1, 1, 1, 1)),\n        ).start()\n\n    def collide2(self, collEntry):\n        print(\"WERT.: object is no longer colliding with another object\")\n\n    def collide3(self, collEntry):\n        print(\"WERT2: object has collided into another object\")\n\n    def collide4(self, collEntry):\n        print(\"WERT2: object is no longer colliding with another object\")\n\n    def initCollisionSphere(self, obj, show=False):\n        # Get the size of the object for the collision sphere.\n        bounds = obj.getChild(0).getBounds()\n        center = bounds.getCenter()\n        radius = bounds.getRadius() * 1.1\n\n        # Create a collision sphere and name it something understandable.\n        collSphereStr = 'CollisionHull{0}_{1}'.format(self.collCount, obj.name)\n        self.collCount += 1\n        cNode = CollisionNode(collSphereStr)\n        cNode.addSolid(CollisionSphere(center, radius))\n\n        cNodepath = obj.attachNewNode(cNode)\n        if show:\n            cNodepath.show()\n\n        # Return a tuple with the collision node and its corresponding string so\n        # that the bitmask can be set.\n        return (cNodepath, collSphereStr)\n\n\nbase = ShowBase()\n# Run the world. Move around with the mouse to create collisions.\nw = World()\nbase.run()\n",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/dd7a764d_event-example.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/91ec09dc_dd7a764d_event-example.json",
    "doc_id": "doc_7"
  }
}