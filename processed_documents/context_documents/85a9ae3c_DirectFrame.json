{
  "content": "\"\"\"A DirectFrame is a basic DirectGUI component that acts as the base\nclass for various other components, and can also serve as a basic\ncontainer to hold other DirectGUI components.\n\nA DirectFrame can have:\n\n* A background texture (pass in path to image, or Texture Card)\n* A midground geometry item (pass in geometry)\n* A foreground text Node (pass in text string or OnscreenText)\n\nEach of these has 1 or more states.  The same object can be used for\nall states or each state can have a different text/geom/image (for\nradio button and check button indicators, for example).\n\nSee the :ref:`directframe` page in the programming manual for a more in-depth\nexplanation and an example of how to use this class.\n\"\"\"\n\n__all__ = ['DirectFrame']\n\nfrom panda3d.core import Filename, NodePath, PGItem, Texture\nfrom . import DirectGuiGlobals as DGG\nfrom .DirectGuiBase import DirectGuiWidget\nfrom .OnscreenImage import OnscreenImage\nfrom .OnscreenGeom import OnscreenGeom\nfrom .OnscreenText import OnscreenText\n\n\nclass DirectFrame(DirectGuiWidget):\n    DefDynGroups = ('text', 'geom', 'image')\n\n    def __init__(self, parent=None, **kw):\n        # Inherits from DirectGuiWidget\n        optiondefs = (\n            # Define type of DirectGuiWidget\n            ('pgFunc',          PGItem,     None),\n            ('numStates',       1,          None),\n            ('state',           self.inactiveInitState, None),\n            # Frame can have:\n            # A background texture\n            ('image',           None,       self.setImage),\n            # A midground geometry item\n            ('geom',            None,       self.setGeom),\n            # A foreground text node\n            ('text',            None,       self.setText),\n            # Change default value of text mayChange flag from 0\n            # (OnscreenText.py) to 1\n            ('textMayChange',  1,          None),\n        )\n        # Merge keyword options with default options\n        self.defineoptions(kw, optiondefs,\n                           dynamicGroups=DirectFrame.DefDynGroups)\n\n        # Initialize superclasses\n        DirectGuiWidget.__init__(self, parent)\n\n        # Call option initialization functions\n        self.initialiseoptions(DirectFrame)\n\n    def __reinitComponent(self, name, component_class, states, **kwargs):\n        \"\"\"Recreates the given component using the given keyword args.\"\"\"\n        assert name in (\"geom\", \"image\", \"text\")\n\n        # constants should be local to or default arguments of constructors\n        for c in range(self['numStates']):\n            component_name = name + str(c)\n\n            try:\n                state = states[c]\n            except IndexError:\n                state = states[-1]\n\n            if self.hascomponent(component_name):\n                if state is None:\n                    self.destroycomponent(component_name)\n                else:\n                    self[component_name + \"_\" + name] = state\n            else:\n                if state is None:\n                    return\n\n                kwargs[name] = state\n                self.createcomponent(\n                    component_name,\n                    (),\n                    name,\n                    component_class,\n                    (),\n                    parent=self.stateNodePath[c],\n                    **kwargs\n                )\n\n    def clearText(self):\n        self['text'] = None\n        self.setText()\n\n    def setText(self, text=None):\n        if text is not None:\n            self[\"text\"] = text\n\n        text = self[\"text\"]\n        if text is None or isinstance(text, str):\n            text_list = (text,) * self['numStates']\n        else:\n            text_list = text\n\n        self.__reinitComponent(\"text\", OnscreenText, text_list,\n            scale=1,\n            mayChange=self['textMayChange'],\n            sort=DGG.TEXT_SORT_INDEX)\n\n    def clearGeom(self):\n        self['geom'] = None\n        self.setGeom()\n\n    def setGeom(self, geom=None):\n        if geom is not None:\n            self[\"geom\"] = geom\n\n        geom = self[\"geom\"]\n        if geom is None or \\\n           isinstance(geom, NodePath) or \\\n           isinstance(geom, str):\n            geom_list = (geom,) * self['numStates']\n        else:\n            geom_list = geom\n\n        self.__reinitComponent(\"geom\", OnscreenGeom, geom_list,\n            scale=1,\n            sort=DGG.GEOM_SORT_INDEX)\n\n    def clearImage(self):\n        self['image'] = None\n        self.setImage()\n\n    def setImage(self, image=None):\n        if image is not None:\n            self[\"image\"] = image\n\n        image = self[\"image\"]\n        if image is None or \\\n           isinstance(image, NodePath) or \\\n           isinstance(image, Texture) or \\\n           isinstance(image, str) or \\\n           isinstance(image, Filename) or \\\n           (len(image) == 2 and \\\n            isinstance(image[0], str) and \\\n            isinstance(image[1], str)):\n            image_list = (image,) * self['numStates']\n        else:\n            image_list = image\n\n        self.__reinitComponent(\"image\", OnscreenImage, image_list,\n            scale=1,\n            sort=DGG.IMAGE_SORT_INDEX)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/gui/DirectFrame.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/85a9ae3c_DirectFrame.json",
    "doc_id": "doc_76"
  }
}