{
  "content": "Projected Textures\n\nIn a previous section <texture-transforms>, we introduced ways to apply an explicit transformation to a model's texture coordinates, with methods like ~.NodePath.set_tex_offset() and ~.NodePath.set_tex_scale(). In addition to this explicit control, Panda3D offers a simple mechanism to apply an automatic texture transform each frame, as computed from the relative transform between any two nodes.\n\nnodePath.setTexProjector(textureStage, fromNodePath, toNodePath)\n\nWhen you have enabled this mode, the relative scene-graph transform from fromNodePath to toNodePath--that is, the result of fromNodePath.getTransform(toNodePath)--is automatically applied as a texture-coordinate transform to the indicated textureStage. The result is more-or-less as if you executed the following command every frame:\n\nnodePath.setTexTransform(textureStage, fromNodePath.getTransform(toNodePath))\n\nThere is no need for either fromNodePath or toNodePath to have any relation to the nodePath that is receiving the ~.NodePath.set_tex_projector() call; they can be any two arbitrary NodePaths. If either of them is just NodePath(), it stands for the top of the graph.\n\nThis has several useful applications. We have already introduced one application <automatic-texture-coordinates>, in conjunction with MWorldPosition, to move the generated texture coordinates from the root of the graph to the model itself.\n\nInterval-animated texture transforms\n\nAnother handy application for a TexProjector is to enable the use of the various LerpIntervals <lerp-intervals> to animate a texture transform. Although there are no LerpIntervals that directly animate texture transforms, you can make a LerpInterval animate a NodePath--and then set up a TexProjector effect to follow that NodePath. For example:\n\nsmiley = loader.loadModel('smiley.egg')\nlerper = NodePath('lerper')\nsmiley.setTexProjector(TextureStage.getDefault(), NodePath(), lerper)\ni = lerper.posInterval(5, VBase3(0, 1, 0))\ni.loop()\n\nNote that you don't even have to parent the animated NodePath into the scene graph. In the above example, we have set up the interval i to repeatedly move the standalone NodePath lerper from position (0, 0, 0) to (0, 1, 0) over 5 seconds. Since smiley is assigned a TexProjector that copies the relative transform from NodePath() to lerper--that is, the net transform of lerper--it means we are really animating the texture coordinates on smiley from (0, 0) to (0, 1) (the Z coordinate is ignored for an ordinary 2-D texture).\n\nProjected Textures\n\nAnother useful application of the TexProjector is to implement projected textures--that is, a texture applied to geometry as if it has been projected from a lens somewhere in the world, something like a slide projector. You can use this to implement a flashlight effect, for instance, or simple projected shadows.\n\nThis works because the TexProjector effect does one additional trick: if the second NodePath in the ~.NodePath.set_tex_projector() call happens to be a .LensNode, then the TexProjector automatically applies the lens's projection matrix to the texture coordinates (in addition to applying the relative transform between the nodes).\n\nTo implement projected textures, you need to do three steps:\n\nApply the texture you want to the model you want to project it onto, usually on its own TextureStage, so that it is multitextured <multitexture-introduction>.\n\nPut the MWorldPosition TexGen mode on the model. This copies the model's vertex positions into its texture coordinates, for your texture's TextureStage.\n\nCall model.set_tex_projector(textureStage, NodePath(), projector) <.NodePath.set_tex_projector>, where projector is the NodePath to the LensNode you want to project from.\n\nFor your convenience, the NodePath class defines the following method that performs these three steps at once:\n\npython\n\nnodePath.projectTexture(textureStage, texture, lensNodePath)\n\ncpp\n\nnodePath.project_texture(textureStage, texture, lensNodePath);\n\nFor instance, we could use it to project the bamboo texture (\"envir-reeds.png\") onto the ripple.egg model, like this:\n\nYou could move around the projector in the world, or even change the lens field of view, and the bamboo image would follow it. (In the above image, the camera model and the projection lines are made visible only for illustration purposes; normally you wouldn't see them.)\n\nThis image was generated with the following code:\n\nfrom direct.directbase.DirectStart import *\nfrom direct.actor import Actor\nfrom panda3d.core import *\n\nbase.setBackgroundColor(1, 1, 1, 1)\n\nripple = Actor.Actor('ripple.egg')\nripple.reparentTo(render)\nripple.setScale(10)\nripple.pose('animation', 17)\n\ndl = DirectionalLight('dl')\ndlnp = camera.attachNewNode(dl)\nripple.setLight(dlnp)\n\nproj = render.attachNewNode(LensNode('proj'))\nlens = PerspectiveLens()\nproj.node().setLens(lens)\nproj.node().showFrustum()\nproj.find('frustum').setColor(1, 0, 0, 1)\ncamModel = loader.loadModel('camera.egg')\ncamModel.reparentTo(proj)\nproj.reparentTo(render)\nproj.setPos(1.5, -7.3, 2.9)\nproj.setHpr(22, -15, 0)\n\ntex = loader.loadTexture('maps/envir-reeds.png')\ntex.setWrapU(SamplerState.WMBorderColor)\ntex.setWrapV(SamplerState.WMBorderColor)\ntex.setBorderColor((1, 1, 1, 0))\nts = TextureStage('ts')\nts.setSort(1)\nts.setMode(TextureStage.MDecal)\nripple.projectTexture(ts, tex, proj)\n\nbase.disableMouse()\ncamera.setPos(-7.8, -22.4, 0)\ncamera.setHpr(-21, 0, 0)\n\nbase.graphicsEngine.renderFrame()\nbase.screenshot('projected_bamboo.jpg', defaultFilename=0)",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/ce5c5443_projected-textures.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/bfad65d1_ce5c5443_projected-textures.json",
    "doc_id": "doc_433"
  }
}