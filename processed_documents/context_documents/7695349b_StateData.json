{
  "content": "\"\"\"StateData module: contains StateData class\"\"\"\n\n__all__ = ['StateData']\n\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nfrom direct.showbase.DirectObject import DirectObject\n\n\nclass StateData(DirectObject):\n    \"\"\"\n    A StateData is a base class for a single state within a Finite\n    State Machine (ClassicFSM).\n    \"\"\"\n\n    notify = directNotify.newCategory('StateData')\n\n    def __init__(self, doneEvent):\n        self.doneEvent = doneEvent\n        self.doneStatus = None\n        self.isLoaded = 0\n        self.isEntered = 0\n\n    def enter(self):\n        \"\"\"\n        Enters the StateData.  This makes it active in whatever sense\n        this applies.  Returns true if this is a change (i.e. it was\n        not previously entered), or false if this is the same (i.e. it\n        was already entered).\n        \"\"\"\n        if self.isEntered:\n            return 0\n        if not self.isLoaded:\n            self.notify.warning(\"entered StateData before it was loaded\")\n            self.load()\n        self.isEntered = 1\n        StateData.notify.debug('enter()')\n        return 1\n\n    def exit(self):\n        \"\"\"\n        Exits the StateData.  Returns true if this is a change\n        (i.e. it was previously entered), or false if this is the same\n        (i.e. it was already exited).\n        \"\"\"\n        if not self.isEntered:\n            return 0\n        self.isEntered = 0\n        StateData.notify.debug('exit()')\n        return 1\n\n    def load(self):\n        \"\"\"\n        Loads the StateData.  This loads whatever assets are needed\n        from disk, and otherwise prepares the StateData for being\n        entered, without actually entering it.  Returns true if this\n        is a change (i.e. it was not already loaded), or false if this\n        is the same (i.e. it was previously loaded).\n        \"\"\"\n        if self.isLoaded:\n            return 0\n        self.isLoaded = 1\n        StateData.notify.debug('load()')\n        return 1\n\n    def unload(self):\n        \"\"\"\n        Unloads the StateData.  This frees whatever assets were loaded\n        by load(), and generally makes the memory usage for this thing\n        be as small as possible.  Some StateData-derived classes can\n        load and unload repeatedly; others are useless once they have\n        been unloaded.\n        \"\"\"\n        if not self.isLoaded:\n            return 0\n        if self.isEntered:\n            self.notify.warning(\"unloaded StateData before it was exited\")\n            self.exit()\n        self.isLoaded = 0\n        StateData.notify.debug('unload()')\n        return 1\n\n    def getDoneStatus(self):\n        \"\"\"\n        The done status of a state data may be anything.  It is common\n        practice to return a Python dictionary or a string; the default\n        value is None.\n        \"\"\"\n        return self.doneStatus\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/fsm/StateData.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/7695349b_StateData.json",
    "doc_id": "doc_150"
  }
}