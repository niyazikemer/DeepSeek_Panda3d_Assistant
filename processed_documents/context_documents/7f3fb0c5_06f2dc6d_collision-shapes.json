{
  "content": "Bullet Collision Shapes\n\nOn the previous page we have been introduced to Bullet basics. Two simple collision shapes - a box and a plane - have been used in this simple script. This page will now introduce more collision shapes provided by Bullet, starting with primitive shapes and then moving on to more complex ones.\n\nPrimitive shapes:\n\nSphere Shape\n\nPlane Shape\n\nBox Shape\n\nCylinder Shape\n\nCapsule Shape\n\nCone Shape\n\nComplex shapes:\n\nCompound Shape\n\nConvex Hull Shape\n\nTriangle Mesh Shape\n\nHeightfield Shape\n\nSoft Body Shape\n\nMulti Sphere Shape\n\nConvex Point Cloud Shape\n\nSphere Shape\n\nThe most basic collision shape, a sphere with radius radius. The sphere is centered around its origin.\n\npython\n\nfrom panda3d.bullet import BulletSphereShape\nradius = 0.5\nshape = BulletSphereShape(radius)\n\ncpp\n\n#include \"bulletSphereShape.h\"\n...\ndouble radius = 0.5;\nPT(BulletSphereShape) sphere_shape = new BulletSphereShape(radius);\n\nPlane Shape\n\nAnother primitive collision shape, an infinite plane. To create a plane you have to pass both the plane's normal vector (Vec3(nx, ny, nz)) and the plane constant (d, which is the distance of the plane's origin. Planes can only be used for static objects.\n\npython\n\nfrom panda3d.bullet import BulletPlaneShape\nnormal = Vec3(0, 0, 1)\nd = 0\nshape = BulletPlaneShape(normal, d)\n\ncpp\n\n#include \"bulletPlaneShape.h\"\n...\nLVecBase3 normal(0, 0, 1);\ndouble d = 1;\nPT(BulletPlaneShape) floor_shape = new BulletPlaneShape(normal, d);\n...\n\nBox Shape\n\nA box-shaped primitive collision shape. To create a box you have to pass a vector with the half-extents (Vec3(dx, dx, dx)). The full extents of the box will be twice the half extents, e. g. from -dx to +dx on the local x-axis.\n\npython\n\nfrom panda3d.bullet import BulletBoxShape\ndx = 0.5\ndy = 0.5\ndz = 1.0\nshape = BulletBoxShape(Vec3(dx, dy, dz))\n\ncpp\n\n#include \"bulletBoxShape.h\"\n...\ndouble dx = 0.5;\ndouble dy = 0.5;\ndouble dz = 0.5;\nPT(BulletBoxShape) box_shape = new BulletBoxShape(LVecBase3(dx, dy, dz));\n\nCylinder Shape\n\nA primitive collision shape which is represents a cylinder. We can create a cylinder shape by either passing it's radius, height and cylinder axis, or by passing a vector with half extents and the cylinder axis. The following example creates two cylinder shapes, both with radius 0.5 and height 1.4.\n\npython\n\nfrom panda3d.bullet import BulletCylinderShape\nradius = 0.5\nheight = 1.4\nshape1 = BulletCylinderShape(radius, height, ZUp)\nshape2 = BulletCylinderShape(Vec3(radius, 0, 0.5 * height), ZUp)\n\ncpp\n\n#include \"bulletCylinderShape.h\"\n...\ndouble radius = 0.5;\ndouble height = 1.4;\nPT(BulletCylinderShape) cylinder_shape_one = new BulletCylinderShape(radius, height);\n\nCapsule Shape\n\nA primitive collision shape which is a \"capped\" cylinder. \"Capped\" means that there are half-spheres at both ends, unlike the real cylinder which has flat ends. Capsule shapes are a good choice for character controllers, since they are fast, symmetrical, and allow smooth movement over steps.\n\nTo create a capsule shape we have to pass the capsule's radius, the height of the cylindrical part, and the up-axis. The total height of the capsule will be the height of the cylindrical part, plus twice the radius.\n\npython\n\nfrom panda3d.bullet import BulletCapsuleShape\nradius = 0.5\nheight = 1.0\nshape = BulletCapsuleShape(radius, height, ZUp)\n\ncpp\n\n#include \"bulletCapsuleShape.h\"\n...\ndouble radius = 0.5;\ndouble height = 1.0;\nPT(BulletCapsuleShape) capsule_shape = new BulletCapsuleShape(radius, height);\n\nCone Shape\n\nAgain a primitive collision shape, which represents a cone. We have to pass the radius of the circular base of the cone, and it's height.\n\npython\n\nfrom panda3d.bullet import BulletConeShape\nradius = 0.6\nheight = 1.0\nshape = BulletConeShape(radius, height, ZUp)\n\ncpp\n\n#include \"bulletConeShape.h\"\n...\ndouble radius = 0.6;\ndouble height = 1.0;\nPT(BulletConeShape) cone_shape = new BulletConeShape(radius, height);\n\nCompound Shape\n\nCompound shapes are assemblies made up from two or more individual shapes. For example you could create a collision shape for a table from five box shapes. One \"flat\" box for the table plate, and four \"thin\" ones for the table legs.\n\nThe Panda3D Bullet module has no specialized class for compound shapes. It automatically creates a compound shape if more than one shape is added to a body node.\n\nThe following code snippet will create such a compound shape, resembling the before mentioned table.\n\npython\n\nshape1 = BulletBoxShape((1.3, 1.3, 0.2))\nshape2 = BulletBoxShape((0.1, 0.1, 0.5))\nshape3 = BulletBoxShape((0.1, 0.1, 0.5))\nshape4 = BulletBoxShape((0.1, 0.1, 0.5))\nshape5 = BulletBoxShape((0.1, 0.1, 0.5))\n\nbodyNP.node().addShape(shape1, TransformState.makePos(Point3(0, 0, 0.1)))\nbodyNP.node().addShape(shape2, TransformState.makePos(Point3(-1, -1, -0.5)))\nbodyNP.node().addShape(shape3, TransformState.makePos(Point3(-1, 1, -0.5)))\nbodyNP.node().addShape(shape4, TransformState.makePos(Point3(1, -1, -0.5)))\nbodyNP.node().addShape(shape5, TransformState.makePos(Point3(1, 1, -0.5)))\n\ncpp\n\nPT(BulletBoxShape) shape1 = new BulletBoxShape(LVecBase3(0.1, 0.1, 0.5));\nPT(BulletBoxShape) shape2 = new BulletBoxShape(LVecBase3(0.1, 0.1, 0.5));\nPT(BulletBoxShape) shape3 = new BulletBoxShape(LVecBase3(0.1, 0.1, 0.5));\nPT(BulletBoxShape) shape4 = new BulletBoxShape(LVecBase3(0.1, 0.1, 0.5));\nPT(BulletBoxShape) shape5 = new BulletBoxShape(LVecBase3(0.1, 0.1, 0.5));\n\nnp_body.node().add_shape(shape1, TransformState::make_pos(LPoint3(0, 0, 0.1)));\nnp_body.node().add_shape(shape2, TransformState::make_pos(LPoint3(-1, -1 ,-0.5)));\nnp_body.node().add_shape(shape3, TransformState::make_pos(LPoint3(-1, 1, -0.5)));\nnp_body.node().add_shape(shape4, TransformState::make_pos(LPoint3(1, -1 ,-0.5)));\nnp_body.node().add_shape(shape5, TransformState::make_pos(LPoint3(1, 1, -0.5)));\n\nConvex Hull Shape\n\nThe first of the non-primitive collision shapes. A good analogy for a convex hull is an elastic membrane or balloon under pressure which is placed around a given set of vertices. When released the membrane will assume the shape of the convex hull. Convex hull shapes should be used for dynamic objects, if it is not possible to find a good approximation of the objects shape using collision primitives.\n\nConvex hull shapes can be created is several ways:\n\npython\n\nfrom panda3d.bullet import BulletConvexHullShape\n\n# Add each vertex separately\nshape1 = BulletConvexHullShape()\nshape1.addPoint(Point3(1, 1, 2))\nshape1.addPoint(Point3(0, 0, 0))\nshape1.addPoint(Point3(2, 0, 0))\nshape1.addPoint(Point3(0, 2, 0))\nshape1.addPoint(Point3(2, 2, 0))\n\n# Add several vertices with a single call\nshape2 = BulletConvexHullShape()\nshape2.addArray([\n   Point3(1, 1, 2),\n   Point3(0, 0, 0),\n   Point3(2, 0, 0),\n   Point3(0, 2, 0),\n   Point3(2, 2, 0),\n])\n\n# Add all vertices which can be found in a Geom object\ngeomNodes = loader.loadModel(path).findAllMatches('**/+GeomNode')\ngeomNode = geomNodes.getPath(0).node()\ngeom = geomNode.getGeom(0)\nshape3 = BulletConvexHullShape()\nshape3.addGeom(geom)\n\ncpp\n\n#include \"bulletConvexHullShape.h\"\n...\n\n// Add each vertex separately\nPT(BulletConvexHullShape) convex_hull_shape = new BulletConvexHullShape();\nconvex_hull_shape->add_point(LPoint3(1, 1, 2));\nconvex_hull_shape->add_point(LPoint3(0, 0, 0));\nconvex_hull_shape->add_point(LPoint3(2, 0, 0));\nconvex_hull_shape->add_point(LPoint3(0, 2, 0));\nconvex_hull_shape->add_point(LPoint3(2, 2, 0));\n\nTriangle Mesh Shape\n\nAnother non-primitive collision shape. A triangle mesh shape is similar to the convex hull shape, except that it is not restricted to convex geometry; it can contain concave parts. A typical use case for triangle mesh shapes is the static geometry of a game level. However, it is possible to use triangle mesh shapes for dynamic objects too. We have to explicitly tell Bullet if we want a static or dynamic triangle mesh shape at the time the shape is created.\n\nTo create a triangle mesh shape, we first have to create a triangle mesh object. The following example will create a simple quad composed of two triangles.\n\npython\n\nfrom panda3d.bullet import BulletTriangleMeshShape\np0 = Point3(-10, -10, 0)\np1 = Point3(-10, 10, 0)\np2 = Point3(10, -10, 0)\np3 = Point3(10, 10, 0)\nmesh = BulletTriangleMesh()\nmesh.addTriangle(p0, p1, p2)\nmesh.addTriangle(p1, p2, p3)\nshape = BulletTriangleMeshShape(mesh, dynamic=False)\n\ncpp\n\n#include \"bulletTriangleMesh.h\"\n...\nLPoint3 points_array[4] = {\n    LPoint3(-10, -10, 0),\n    LPoint3(-10, 10, 0),\n    LPoint3(10, -10, 0),\n    LPoint3(10, 10, 0),\n};\n\nPT(BulletTriangleMesh) triangle_mesh = new BulletTriangleMesh;\ntriangle_mesh->add_triangle(points_array[0], points_array[1], points_array[2]);\ntriangle_mesh->add_triangle(points_array[1], points_array[2], points_array[3]);\n\nPT(BulletTriangleMeshShape) triangle_mesh_shape = new BulletTriangleMeshShape(triangle_mesh, false);\n\nWe can use a convenience method to add all triangles from a Geom object with one method call. The geom will be decomposed first, so it does not have to contain only triangles; for example, it can contain triangle strips too.\n\npython\n\nfrom panda3d.bullet import BulletTriangleMesh\nmesh = BulletTriangleMesh()\nmesh.addGeom(geom)\n\ncpp\n\n#include \"bulletTriangleMesh.h\"\n...\nPT(BulletTriangleMesh) triangle_mesh = new BulletTriangleMesh();\ntriangle_mesh->add_geom(geom);\n\nHeightfield Shape\n\nA special non-primitive collision shape. Give a heightfield image we can construct a terrain mesh with only a few lines of code.\n\npython\n\nfrom panda3d.core import Filename\nfrom panda3d.core import PNMImage\nfrom panda3d.bullet import BulletHeightfieldShape\nfrom panda3d.bullet import ZUp\nheight = 10.0\nimg = PNMImage(Filename('elevation.png'))\nshape = BulletHeightfieldShape(img, height, ZUp)\n\ncpp\n\n#include \"pnmImage.h\"\n#include \"bulletHeightfieldShape.h\"\n\nPNMImage pnm_image;\npnm_image.read(Filename(\"models/elevation.png\"));\n\nPT(BulletHeightfieldShape) heightfield_shape = new BulletHeightfieldShape(*pnm_image, height);\n\nThe heightfield shape will be oriented the same way as a GeoMipTerrain created from the same image, but GeoMipTerrain and BulletHeightfieldShape have different origins. The BulletHeightfieldShape is centered around the origin, while the GeoMipTerrain uses the lower left corner as its origin. However, this can be easily corrected by positioning the GeoMipTerrain with an offset relative to the static rigid body node.\n\nIf you are using ShaderTerrainMesh, then you need to use a Texture object as a height map. This will ensure that the shape of the physical body corresponds to the visible geometry.\n\npython\n\nfrom panda3d.core import Filename\noffset = img.getXSize() / 2.0 - 0.5\nterrain = GeoMipTerrain('terrain')\nterrain.setHeightfield(img)\nterrainNP = terrain.getRoot()\nterrainNP.setSz(height)\nterrainNP.setPos(-offset, -offset, -height / 2.0)\n\ncpp\n\nGeoMipTerrain *terrain = get_geomip_terrain();\nterrain->set_heightfield(*pnm_image);\nterrain->set_block_size(32);\nterrain->set_near(50);\nterrain->set_far(100);\nterrain->set_focal_point(window->get_camera_group());\n\nNodePath terrain_root = terrain->get_root();\n\nfloat offset = pnm_image->get_x_size() / 2.0 - 0.5;\nterrain_root.set_pos(-offset, -offset, -height / 2.0);\n\nterrain_root.set_scale(terrain_root.get_scale().get_x(), terrain_root.get_scale().get_y(), height);\nterrain_root.reparent_to(window->get_render());\n\nSoft Body Shape\n\nThis special collision shape is used in connection with soft bodies. It can not be created directly. Soft bodies will be discussed later within this manual.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/06f2dc6d_collision-shapes.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/7f3fb0c5_06f2dc6d_collision-shapes.json",
    "doc_id": "doc_620"
  }
}