{
  "content": "##############################################################################\n#\n# eggcacher\n#\n# EggCacher searches a directory for egg files, and loads\n# them all into the model-cache.  This is used as part of the\n# panda installation process.\n#\n##############################################################################\n\nimport os\nimport sys\nimport gc\nfrom panda3d.core import (\n    BamCache,\n    ExecutionEnvironment,\n    Filename,\n    Loader,\n    LoaderOptions,\n    ModelPool,\n    TexturePool,\n)\n\nclass EggCacher:\n    def __init__(self, args):\n        maindir = Filename.fromOsSpecific(os.getcwd()).getFullpath()\n        ExecutionEnvironment.setEnvironmentVariable(\"MAIN_DIR\", maindir)\n        self.bamcache = BamCache.getGlobalPtr()\n        self.pandaloader = Loader()\n        self.loaderopts = LoaderOptions(LoaderOptions.LF_no_ram_cache)\n        if not self.bamcache.getActive():\n            print(\"The model cache is not currently active.\")\n            print(\"You must set a model-cache-dir in your config file.\")\n            sys.exit(1)\n        self.parseArgs(args)\n        files = self.scanPaths(self.paths)\n        self.processFiles(files)\n\n    def parseArgs(self, args):\n        self.concise = 0\n        self.pzkeep = 0\n        while len(args) > 0:\n            if args[0] == \"--concise\":\n                self.concise = 1\n                args = args[1:]\n            elif args[0] == \"--pzkeep\":\n                self.pzkeep = 1\n                args = args[1:]\n            else:\n                break\n        if len(args) < 1:\n            print(\"Usage: eggcacher options file-or-directory\")\n            sys.exit(1)\n        self.paths = args\n\n    def scanPath(self, eggs, path):\n        if not os.path.exists(path):\n            print(\"No such file or directory: \" + path)\n            return\n        if os.path.isdir(path):\n            for f in os.listdir(path):\n                self.scanPath(eggs, os.path.join(path,f))\n            return\n        if path.endswith(\".egg\"):\n            size = os.path.getsize(path)\n            eggs.append((path,size))\n            return\n        if path.endswith(\".egg.pz\") or path.endswith(\".egg.gz\"):\n            size = os.path.getsize(path)\n            if self.pzkeep:\n                eggs.append((path, size))\n            else:\n                eggs.append((path[:-3], size))\n\n    def scanPaths(self, paths):\n        eggs = []\n        for path in paths:\n            #abs = os.path.abspath(path)\n            self.scanPath(eggs, path)\n        return eggs\n\n    def processFiles(self, files):\n        total = 0\n        for (path, size) in files:\n            total += size\n        progress = 0\n        for (path, size) in files:\n            fn = Filename.fromOsSpecific(path)\n            cached = self.bamcache.lookup(fn, \"bam\")\n            percent = (progress * 100) / total\n            report = path\n            if self.concise:\n                report = os.path.basename(report)\n            print(\"Preprocessing Models %2d%% %s\" % (percent, report))\n            sys.stdout.flush()\n            if cached and not cached.hasData():\n                self.pandaloader.loadSync(fn, self.loaderopts)\n            gc.collect()\n            ModelPool.releaseAllModels()\n            TexturePool.releaseAllTextures()\n            progress += size\n\n\ndef main(args=None):\n    if args is None:\n        args = sys.argv[1:]\n\n    cacher = EggCacher(args)\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directscripts/eggcacher.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/87756ff4_eggcacher.json",
    "doc_id": "doc_97"
  }
}