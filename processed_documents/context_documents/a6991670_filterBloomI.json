{
  "content": "BLOOM_I = \"\"\"\n//Cg\n//\n// blend.rgb\n//\n//   This shader converts to black-and-white before calculating\n//   scene brightness.  To do this, it uses a weighted average of\n//   R,G,B.  The blend parameter controls the weighting.\n//\n// desat.x\n//\n//   Desaturation level.  If zero, the bloom's color is equal to\n//   the color of the input pixel.  If one, the bloom's color is\n//   white.\n//\n// trigger.x\n//\n//   Must be equal to mintrigger.\n//\n//   mintrigger is the minimum brightness to trigger a bloom,\n//   and maxtrigger is the brightness at which the bloom\n//   reaches maximum intensity.\n//\n// trigger.y\n//\n//   Must be equal to (1.0/(maxtrigger-mintrigger)) where\n//\n//   mintrigger is the minimum brightness to trigger a bloom,\n//   and maxtrigger is the brightness at which the bloom\n//   reaches maximum intensity.\n//\n\n\nvoid vshader(float4 vtx_position : POSITION,\n             float2 vtx_texcoord : TEXCOORD0,\n             out float4 l_position : POSITION,\n             out float2 l_texcoordNW : TEXCOORD0,\n             out float2 l_texcoordNE : TEXCOORD1,\n             out float2 l_texcoordSW : TEXCOORD2,\n             out float2 l_texcoordSE : TEXCOORD3,\n             uniform float4 texpad_src,\n             uniform float4 texpix_src,\n             uniform float4x4 mat_modelproj)\n{\n  l_position=mul(mat_modelproj, vtx_position);\n  float2 c = vtx_texcoord * texpad_src.xy * 2;\n  float4 offs = texpix_src * 0.5;\n  l_texcoordNW = c + float2( offs.x, -offs.y);\n  l_texcoordNE = c + float2( offs.x,  offs.y);\n  l_texcoordSW = c + float2(-offs.x, -offs.y);\n  l_texcoordSE = c + float2(-offs.x,  offs.y);\n}\n\nvoid fshader(float2 l_texcoordNW : TEXCOORD0,\n             float2 l_texcoordNE : TEXCOORD1,\n             float2 l_texcoordSW : TEXCOORD2,\n             float2 l_texcoordSE : TEXCOORD3,\n             uniform sampler2D k_src : TEXUNIT0,\n             out float4 o_color : COLOR,\n             uniform float4 k_blend,\n             uniform float4 k_trigger,\n             uniform float4 k_desat\n             )\n{\n  float4 inputNW = tex2D(k_src, l_texcoordNW) - float4(0,0,0,0.5);\n  float briteNW = dot(inputNW, k_blend);\n  float scaleNW = saturate((briteNW - k_trigger.x) * k_trigger.y);\n  float4 colorNW = scaleNW * lerp(inputNW, float4(1,1,1,1), k_desat.x);\n\n  float4 inputNE = tex2D(k_src, l_texcoordNE) - float4(0,0,0,0.5);\n  float briteNE = dot(inputNE, k_blend);\n  float scaleNE = saturate((briteNE - k_trigger.x) * k_trigger.y);\n  float4 colorNE = scaleNE * lerp(inputNE, float4(1,1,1,1), k_desat.x);\n\n  float4 inputSW = tex2D(k_src, l_texcoordSW) - float4(0,0,0,0.5);\n  float briteSW = dot(inputSW, k_blend);\n  float scaleSW = saturate((briteSW - k_trigger.x) * k_trigger.y);\n  float4 colorSW = scaleSW * lerp(inputSW, float4(1,1,1,1), k_desat.x);\n\n  float4 inputSE = tex2D(k_src, l_texcoordSE) - float4(0,0,0,0.5);\n  float briteSE = dot(inputSE, k_blend);\n  float scaleSE = saturate((briteSE - k_trigger.x) * k_trigger.y);\n  float4 colorSE = scaleSE * lerp(inputSE, float4(1,1,1,1), k_desat.x);\n\n  o_color = (colorNW + colorNE + colorSW + colorSE) * 0.25;\n}\n\n\"\"\"\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/filter/filterBloomI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/a6991670_filterBloomI.json",
    "doc_id": "doc_215"
  }
}