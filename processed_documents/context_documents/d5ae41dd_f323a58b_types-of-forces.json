{
  "content": "Types of forces\n\nPanda3D provides two types of forces that you can apply to an object.\n\nLinearVectorForce\n\nA ~panda3d.physics.LinearVectorForce treats the object as a point mass. It applies an acceleration in Newtons to the center of mass of the object it was added to. The direction of this force is relative to the orientation of the ~panda3d.physics.ForceNode that the ~panda3d.physics.LinearVectorForce was applied to.\n\nNote\n\nSince ~panda3d.physics.LinearVectorForce treats the object as a point mass, it is not possible to apply a rotation of any kind to your object. For rotational forces, see ~panda3d.physics.AngularVectorForce below.\n\nExample:\n\npython\n\nlvf = LinearVectorForce(1, 0, 0)  # Push 1 newton in the positive-x direction\nforceNode.addForce(lvf)  # Determine coordinate space of this force node\nactorNode.getPhysical(0).addLinearForce(lvf) # Add the force to the object\n\ncpp\n\nPT(LinearForce) lvf = new LinearVectorForce(1, 0, 0);  // Push 1 newton in the positive-x direction\nforce_node->add_force(lvf);  // Determine coordinate space of this force node\nactor_node->get_physical(0)->add_linear_force(lvf); // Add the force to the object\n\nAngularVectorForce\n\nThe ~panda3d.physics.AngularVectorForce applies a torque to the object it is attached to. The acceleration is in Newtons, and ~panda3d.physics.AngularVectorForce may be treated in much the same way as ~panda3d.physics.LinearVectorForce. There are, however, some minor differences that that should be taken into account.\n\n~panda3d.physics.AngularVectorForce does not have a .setDependantMass(). The reason for this is simple: mass must be used in the torque calculations. As such, you will want to make sure your forces are sufficiently small or your masses are sufficiently large to keep your rotational velocity sane.\n\nExample:\n\npython\n\navf = AngularVectorForce(1, 0, 0) # Spin around the positive-x axis\nforceNode.addForce(avf) # Determine which positive-x axis we use for calculation\nactorNode.getPhysical(0).addAngularForce(avf) # Add the force to the object\n\ncpp\n\nPT(AngularForce) avf = new AngularVectorForce(1, 0, 0);  // Spin around the positive-x axis\nforce_node->add_force(avf);  // Determine which positive-x axis we use for calculation\nactor_node->get_physical(0)->add_angular_force(avf); // Add the force to the object\n\nOne additional caveat with ~panda3d.physics.AngularVectorForce: Angular forces will not be processed on your object until an ~panda3d.physics.AngularIntegrator is added to the ~panda3d.physics.PhysicsManager.\n\nExample:\n\npython\n\nfrom panda3d.physics import AngularEulerIntegrator\n\n# Instantiate an AngleIntegrator()\nangleInt = AngularEulerIntegrator()\n\n# Attach the AngleIntegrator to the PhysicsManager\nbase.physicsMgr.attachAngularIntegrator(angleInt)",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/f323a58b_types-of-forces.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/d5ae41dd_f323a58b_types-of-forces.json",
    "doc_id": "doc_536"
  }
}