{
  "content": "Bullet Softbody Tetrahedron\n\nThe last kind of soft bodies are those made up from tetrahedral meshes. A tetrahedral mesh is a mesh where the single elements are not triangles, but tetrahedrons, that is \"pyramids\" with four corners. Tetrahedral meshes are sometimes called \"volume\" meshes, since they fill out a volume and not just the surface of the mesh.\n\nSetup\n\nSetup for tetrahedral soft bodies is more complicated than the previously shown soft body types, since we first have to get the data which describes a tetrahedral mesh. Common 3D modelling packages usually don't support for modelling tetrahedral meshes.\n\nIf we somehow have assumed the tetrahedral data we can set up the soft body directly from the vertices and indices. Let's assume we have the vertices as a list of triples (three times a floating point coordinate), and we have the tetrahedron indices as a list of four-tuples (four indices make up one tetrahedron).\n\npython\n\npoints = [(x1, y1, z1), (x2, y2, z2), ...]\nelements = [(i0, i1, i2, i3), (i4, i5, i6, i7), ...]\n\npoints = [Point3(x,y,z) * 3 for x,y,z in nodes]\nindices = sum([list(x) for x in elements], [])\n\nbodyNode = BulletSoftBodyNode.makeTetMesh(info, points, indices, True)\n\ncpp\n\nTODO\n\nThe third line just transform the list of coordinates into a list of Panda3D points, and the fourth line transforms the list of four-tuples into a flat list of indices.\n\nAssuming we don't have the tetrahedral data prepared for us; in this case we need to create it ourselves. A good tool for this purpose is \"tetgen\", which is a tetrahedral mesh generator and Delaunay triangulator. The tetgen homepage is https://www.berlios.de/software/tetgen/ . Panda3D Bullet module has support for setting up soft bodies directly from tetgen mesh files:\n\npython\n\nele = file('models/tetra.1.ele', 'r').read()\nface = file('models/tetra.1.face', 'r').read()\nnode = file('models/tetra.1.node', 'r').read()\n\nbodyNode = BulletSoftBodyNode.makeTetMesh(info, ele, face, node)\n\ncpp\n\nTODO\n\nOnce the soft body is created we still have to set it up properly. The following code snippet shows how to do so:\n\npython\n\nbodyNode.setName('Tetra')\nbodyNode.setVolumeMass(300)\nbodyNode.getShape(0).setMargin(0.01)\nbodyNode.getMaterial(0).setLinearStiffness(0.1)\nbodyNode.getCfg().setPositionsSolverIterations(1)\nbodyNode.getCfg().clearAllCollisionFlags()\nbodyNode.getCfg().setCollisionFlag(BulletSoftBodyConfig.CFClusterSoftSoft, True)\nbodyNode.getCfg().setCollisionFlag(BulletSoftBodyConfig.CFClusterRigidSoft, True)\nbodyNode.generateClusters(6)\n\nbodyNP = self.worldNP.attachNewNode(bodyNode)\nbodyNP.setPos(0, 0, 8)\nbodyNP.setHpr(45, 0, 0)\nworld.attachSoftBody(bodyNode)\n\ncpp\n\nTODO\n\nThe method generateClusters is new. We didn't use this method so far when setting up non-volume soft bodies. It splits the soft body volume up into the given number of small, convex clusters, which consecutively will be used for collision detection with other soft bodies or rigid bodies.\n\nVisualisation\n\nThere are two different ways to visualise a tetrahedral soft body. First you can let Panda3D generate a Geom for you, like in the previous two soft body manual pages. The following code shows how to do this:\n\npython\n\ngeom = BulletHelper.makeGeomFromFaces(node)\nvisNode = GeomNode('TetraVisual')\nvisNode.addGeom(geom)\nvisNP = softNP.attachNewNode(visNode)\nbodyNode.linkGeom(geom)\n\ncpp\n\nTODO\n\nThe second way is to use an already existing model - maybe the model which has been used to calculate the tetrahedron mesh - and link it to the soft body, like the following code snippet shows. Panda3D will compare the vertices of the model with the nodes of the soft body, and link each vertex to the closest soft body node.\n\npython\n\nvisNP = loader.loadModel('models/cube.egg')\nvisNP.reparentTo(softNP)\n\ngeom = visNP \\\n    .findAllMatches('**/+GeomNode').getPath(0).node() \\\n    .modifyGeom(0)\nbodyNode.linkGeom(geom)\n\ncpp\n\nTODO",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/af197370_softbody-tetrahedron.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/44951a7f_af197370_softbody-tetrahedron.json",
    "doc_id": "doc_596"
  }
}