{
  "content": "\"\"\"\nDevWalker.py is for avatars.\n\nA walker control such as this one provides:\n\n- creation of the collision nodes\n- handling the keyboard and mouse input for avatar movement\n- moving the avatar\n\nit does not:\n\n- play sounds\n- play animations\n\nalthough it does send messages that allow a listener to play sounds or\nanimations based on walker events.\n\"\"\"\n\nfrom direct.showbase.InputStateGlobal import inputState\nfrom direct.directnotify import DirectNotifyGlobal\nfrom direct.showbase import DirectObject\nfrom direct.showbase.MessengerGlobal import messenger\nfrom direct.task.Task import Task\nfrom direct.task.TaskManagerGlobal import taskMgr\nfrom panda3d.core import ClockObject, ConfigVariableBool, ConfigVariableDouble, Mat3, Point3, Vec3\n\n\nclass DevWalker(DirectObject.DirectObject):\n\n    notify = DirectNotifyGlobal.directNotify.newCategory(\"DevWalker\")\n    wantDebugIndicator = ConfigVariableBool('want-avatar-physics-indicator', False)\n    runMultiplier = ConfigVariableDouble('dev-run-multiplier', 4.0)\n\n    # Ghost mode overrides this:\n    slideName = \"slide-is-disabled\"\n\n    # special methods\n    def __init__(self):\n        DirectObject.DirectObject.__init__(self)\n        self.speed=0.0\n        self.rotationSpeed=0.0\n        self.slideSpeed=0.0\n        self.vel=Vec3(0.0, 0.0, 0.0)\n\n        self.task = None\n\n    def setWalkSpeed(self, forward, jump, reverse, rotate):\n        assert self.debugPrint(\"setWalkSpeed()\")\n        self.avatarControlForwardSpeed=forward\n        #self.avatarControlJumpForce=jump\n        self.avatarControlReverseSpeed=reverse\n        self.avatarControlRotateSpeed=rotate\n\n    def getSpeeds(self):\n        #assert self.debugPrint(\"getSpeeds()\")\n        return (self.speed, self.rotationSpeed, self.slideSpeed)\n\n    def setAvatar(self, avatar):\n        self.avatar = avatar\n        if avatar is not None:\n            pass # setup the avatar\n\n    def setWallBitMask(self, bitMask):\n        pass\n\n    def setFloorBitMask(self, bitMask):\n        pass\n\n    def initializeCollisions(self, collisionTraverser, avatarNodePath,\n            wallCollideMask, floorCollideMask,\n            avatarRadius = 1.4, floorOffset = 1.0, reach = 1.0):\n        assert not avatarNodePath.isEmpty()\n\n        self.cTrav = collisionTraverser\n        self.avatarNodePath = avatarNodePath\n\n    def setAirborneHeightFunc(self, getAirborneHeight):\n        pass\n\n    def deleteCollisions(self):\n        pass\n\n    def setTag(self, key, value):\n        pass\n\n    def setCollisionsActive(self, active = 1):\n        pass\n\n    def placeOnFloor(self):\n        pass\n\n    def oneTimeCollide(self):\n        pass\n\n    def addBlastForce(self, vector):\n        pass\n\n    def displayDebugInfo(self):\n        \"\"\"\n        For debug use.\n        \"\"\"\n        onScreenDebug.add(\"w controls\", \"DevWalker\")\n\n    def handleAvatarControls(self, task):\n        \"\"\"\n        Check on the arrow keys and update the avatar.\n        \"\"\"\n        # get the button states:\n        forward = inputState.isSet(\"forward\")\n        reverse = inputState.isSet(\"reverse\")\n        turnLeft = inputState.isSet(\"turnLeft\")\n        turnRight = inputState.isSet(\"turnRight\")\n        slideLeft = inputState.isSet(\"slideLeft\")\n        slideRight = inputState.isSet(\"slideRight\")\n        levitateUp = inputState.isSet(\"levitateUp\")\n        levitateDown = inputState.isSet(\"levitateDown\")\n        run = inputState.isSet(\"run\") and self.runMultiplier.getValue() or 1.0\n\n        # Check for Auto-Run\n        if base.localAvatar.getAutoRun():\n            forward = 1\n            reverse = 0\n\n        # Determine what the speeds are based on the buttons:\n        self.speed=(\n                (forward and self.avatarControlForwardSpeed or\n                reverse and -self.avatarControlReverseSpeed))\n        self.liftSpeed=(\n                (levitateUp and self.avatarControlForwardSpeed or\n                levitateDown and -self.avatarControlReverseSpeed))\n        self.slideSpeed=(\n                (slideLeft and -self.avatarControlForwardSpeed) or\n                (slideRight and self.avatarControlForwardSpeed))\n        self.rotationSpeed=(\n                (turnLeft and self.avatarControlRotateSpeed) or\n                (turnRight and -self.avatarControlRotateSpeed))\n\n        if self.wantDebugIndicator:\n            self.displayDebugInfo()\n\n        # Check to see if we're moving at all:\n        if self.speed or self.liftSpeed or self.slideSpeed or self.rotationSpeed:\n            # How far did we move based on the amount of time elapsed?\n            dt=ClockObject.getGlobalClock().getDt()\n            distance = dt * self.speed * run\n            lift = dt * self.liftSpeed * run\n            slideDistance = dt * self.slideSpeed * run\n            rotation = dt * self.rotationSpeed\n\n            # Take a step in the direction of our previous heading.\n            self.vel=Vec3(Vec3.forward() * distance +\n                          Vec3.up() * lift +\n                          Vec3.right() * slideDistance)\n            if self.vel != Vec3.zero():\n                # rotMat is the rotation matrix corresponding to\n                # our previous heading.\n                rotMat=Mat3.rotateMatNormaxis(self.avatarNodePath.getH(), Vec3.up())\n                step=rotMat.xform(self.vel)\n                self.avatarNodePath.setFluidPos(Point3(self.avatarNodePath.getPos()+step))\n            self.avatarNodePath.setH(self.avatarNodePath.getH()+rotation)\n            messenger.send(\"avatarMoving\")\n        else:\n            self.vel.set(0.0, 0.0, 0.0)\n        return Task.cont\n\n    def enableAvatarControls(self):\n        \"\"\"\n        Activate the arrow keys, etc.\n        \"\"\"\n        assert self.debugPrint(\"enableAvatarControls\")\n\n        if self.task:\n            # remove any old\n            self.task.remove(self.task)\n        # spawn the new task\n        self.task = taskMgr.add(\n            self.handleAvatarControls, \"AvatarControls-dev-%s\"%(id(self),))\n\n    def disableAvatarControls(self):\n        \"\"\"\n        Ignore the arrow keys, etc.\n        \"\"\"\n        assert self.debugPrint(\"disableAvatarControls\")\n        if self.task:\n            self.task.remove()\n            self.task = None\n\n    def flushEventHandlers(self):\n        pass\n\n    if __debug__:\n        def debugPrint(self, message):\n            \"\"\"for debugging\"\"\"\n            return self.notify.debug(\n                    str(id(self))+' '+message)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/controls/DevWalker.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/dffaf03d_DevWalker.json",
    "doc_id": "doc_227"
  }
}