{
  "content": "\"\"\" Class used to create and control radamec device \"\"\"\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.task.Task import Task\nfrom direct.task.TaskManagerGlobal import taskMgr\nfrom .DirectDeviceManager import DirectDeviceManager\n\nfrom direct.directnotify import DirectNotifyGlobal\n\n#TODO: Handle interaction between widget, followSelectedTask and updateTask\n\n# ANALOGS\nRAD_PAN = 0\nRAD_TILT = 1\nRAD_ZOOM = 2\nRAD_FOCUS = 3\n\nclass DirectRadamec(DirectObject):\n    radamecCount = 0\n    notify = DirectNotifyGlobal.directNotify.newCategory('DirectRadamec')\n\n    def __init__(self, device = 'Analog0', nodePath = None):\n        # See if device manager has been initialized\n        if base.direct.deviceManager is None:\n            base.direct.deviceManager = DirectDeviceManager()\n        # Set name\n        self.name = 'Radamec-' + repr(DirectRadamec.radamecCount)\n        DirectRadamec.radamecCount += 1\n        # Get analogs\n        self.device = device\n        self.analogs = base.direct.deviceManager.createAnalogs(self.device)\n        self.numAnalogs = len(self.analogs)\n        self.aList = [0, 0, 0, 0, 0, 0, 0, 0]\n        # Radamec device max/mins\n        # Note:  These values change quite often, i.e. everytime\n        #        you unplug the radamec cords, or jostle them too\n        #        much.  For best results, re-record these values often.\n        self.minRange = [-180.0, -90, 522517.0, 494762.0]\n        self.maxRange = [180.0, 90, 547074.0, 533984.0]\n        # Spawn update task\n        self.enable()\n\n    def enable(self):\n        # Kill existing task\n        self.disable()\n        # Update task\n        taskMgr.add(self.updateTask, self.name + '-updateTask')\n\n    def disable(self):\n        taskMgr.remove(self.name + '-updateTask')\n\n    def destroy(self):\n        self.disable()\n\n    def updateTask(self, state):\n        # Update analogs\n        for i in range(len(self.analogs)):\n            self.aList[i] = self.analogs.getControlState(i)\n        return Task.cont\n\n    def radamecDebug(self):\n        panVal = self.normalizeChannel(RAD_PAN, -180, 180)\n        tiltVal = self.normalizeChannel(RAD_TILT, -90, 90)\n\n        self.notify.debug(\"PAN = %s\" % self.aList[RAD_PAN])\n        self.notify.debug(\"TILT = %s\" % self.aList[RAD_TILT])\n        self.notify.debug(\"ZOOM = %s\" % self.aList[RAD_ZOOM])\n        self.notify.debug(\"FOCUS = %s\" % self.aList[RAD_FOCUS])\n        self.notify.debug(\"Normalized: panVal: %s  tiltVal: %s\" % (panVal, tiltVal))\n\n    # Normalize to the range [-minVal, maxVal] based on some hard-coded\n    # max/min numbers of the Radamec device\n    def normalizeChannel(self, chan, minVal = -1, maxVal = 1):\n        if chan < 0 or chan >= min(len(self.maxRange), len(self.minRange)):\n            raise RuntimeError(\"can't normalize this channel (channel %d)\" % chan)\n\n        maxRange = self.maxRange[chan]\n        minRange = self.minRange[chan]\n\n        diff = maxRange - minRange\n        clampedVal = max(min(self.aList[chan], maxRange), maxRange)\n        return ((maxVal - minVal) * (clampedVal - minRange) / diff) + minVal\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directdevices/DirectRadamec.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/cbf68dd6_DirectRadamec.json",
    "doc_id": "doc_114"
  }
}