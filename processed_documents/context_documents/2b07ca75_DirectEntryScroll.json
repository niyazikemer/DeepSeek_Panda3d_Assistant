{
  "content": "__all__ = ['DirectEntryScroll']\n\nfrom panda3d.core import NodePath, OmniBoundingVolume, PGVirtualFrame\nfrom . import DirectGuiGlobals as DGG\nfrom .DirectFrame import DirectFrame\n\n\nclass DirectEntryScroll(DirectFrame):\n    def __init__(self, entry, parent = None, **kw):\n        optiondefs = (\n            ('pgFunc',         PGVirtualFrame,      None),\n            ('relief', None, None),\n            ('clipSize',     (-1, 1, -1, 1),        self.setClipSize),\n        )\n\n        self.defineoptions(kw, optiondefs)\n        DirectFrame.__init__(self, parent, **kw)\n        self.canvas = None\n        self.visXMin = 0.0\n        self.visXMax = 0.0\n        self.clipXMin = 0.0\n        self.clipXMax = 0.0\n        self.initialiseoptions(DirectEntryScroll)\n\n        # don't set a scale on the entry\n        # instead make it the correct size, use something like:\n           # text_scale = 0.035,\n           # frameSize = (-0.006, 3.2, -0.015, 0.036),\n        # if you need to scale the entry scale it's parent instead\n\n        self.canvas = NodePath(self.guiItem.getCanvasNode())\n        self.canvas.setPos(0,0,0)\n\n        self.entry = None\n        if entry is not None:\n            self.entry = entry\n            self.entry.reparentTo(self.canvas)\n            self.entry.bind(DGG.CURSORMOVE, self.cursorMove)\n\n        self.canvas.node().setBounds(OmniBoundingVolume())\n        self.canvas.node().setFinal(1)\n        self.resetCanvas()\n\n    def setEntry(self, entry):\n        \"\"\"\n        Sets a DirectEntry element for this scroll frame. A DirectEntryScroll\n        can only hold one entry at a time, so make sure to not call this\n        function twice or call clearEntry before to make sure no entry\n        is already set.\n        \"\"\"\n        assert self.entry is None, \"An entry was already set for this DirectEntryScroll element\"\n        self.entry = entry\n        self.entry.reparentTo(self.canvas)\n\n        self.entry.bind(DGG.CURSORMOVE, self.cursorMove)\n\n    def clearEntry(self):\n        \"\"\"\n        detaches and unbinds the entry from the scroll frame and its\n        events. You'll be responsible for destroying it.\n        \"\"\"\n        if self.entry is None:\n            return\n        self.entry.unbind(DGG.CURSORMOVE)\n        self.entry.detachNode()\n        self.entry = None\n\n    def cursorMove(self, cursorX, cursorY):\n        cursorX = self.entry.guiItem.getCursorX() * self.entry['text_scale'][0]\n        canvasX = self.canvas.getX()\n        visXMin = self.clipXMin - canvasX\n        visXMax = self.clipXMax - canvasX\n        visXCenter = (visXMin + visXMax) * 0.5\n        distanceToCenter = visXCenter - cursorX\n        clipExtent = self.clipXMax - self.clipXMin\n\n        entryExtent = self.entry['text_scale'][0] * self.entry['width']\n        entryWiggle = entryExtent - clipExtent\n\n        if abs(distanceToCenter) > (clipExtent * 0.5):\n            self.moveToCenterCursor()\n\n    def moveToCenterCursor(self):\n        cursorX = self.entry.guiItem.getCursorX() * self.entry['text_scale'][0]\n        canvasX = self.canvas.getX()\n        visXMin = self.clipXMin - canvasX\n        visXMax = self.clipXMax - canvasX\n        visXCenter = (visXMin + visXMax) * 0.5\n        distanceToCenter = visXCenter - cursorX\n        newX = canvasX + distanceToCenter\n\n        clipExtent = self.clipXMax - self.clipXMin\n\n        entryExtent = self.entry['text_scale'][0] * self.entry['width']\n        entryWiggle = entryExtent - clipExtent\n\n        if self.entry.guiItem.getCursorPosition() <= 0: #deals with the cursor jump bug\n            newX = 0.0\n        elif newX > 0.0:\n            newX = 0.0\n        elif newX < (-entryWiggle):\n            newX = -entryWiggle\n\n        #print(\"CursorX %s CanvasX %s VisCenter %s Distance %s NewX %s Wiggle %s\" % (cursorX, canvasX, visXCenter, distanceToCenter, newX, entryWiggle))\n\n        self.canvas.setX(newX)\n\n    def destroy(self):\n        # Destroy children of the canvas\n        for child in self.canvas.getChildren():\n            childGui = self.guiDict.get(child.getName())\n            if childGui:\n                childGui.destroy()\n            else:\n                parts = child.getName().split('-')\n                simpleChildGui = self.guiDict.get(parts[-1])\n                if simpleChildGui:\n                    simpleChildGui.destroy()\n        self.entry.destroy()\n        self.entry = None\n        DirectFrame.destroy(self)\n\n    def getCanvas(self):\n        return self.canvas\n\n    def setClipSize(self):\n        self.guiItem.setClipFrame(self['clipSize'])\n        self.clipXMin = self['clipSize'][0]\n        self.clipXMax = self['clipSize'][1]\n        self.visXMin = self.clipXMin\n        self.visXMax = self.clipXMax\n        if self.canvas:\n            self.resetCanvas()\n\n    def resetCanvas(self):\n        self.canvas.setPos(0,0,0)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/gui/DirectEntryScroll.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/2b07ca75_DirectEntryScroll.json",
    "doc_id": "doc_87"
  }
}