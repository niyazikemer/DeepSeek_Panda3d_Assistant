{
  "content": "Obstacle Avoidance\n\n'Obstacle Avoidance' is a behavior where an AI Character steers away from obstacles in its path.\n\nhttps://www.youtube.com/watch?v=xZnuWRiKL6I\n\nIn PandAI, obstacle avoidance is defined as :\n\naiBehaviors.obstacleAvoidance(float feeler_length)\n\nFeeler length is the range at which the obstacle can be detected by the AI Character\n\n(Note : This does not correspond to actual length in render. The algorithm computes the feeler\u2019s length based on AI Character\u2019s speed and size and also the Obstacle size and the feeler length which is input to it simply a multiplier)\n\nFor the algorithm to work, the obstacles need to be added to the world like this :\n\naiWorld.addObstacle(NodePath  obstacle)\n\nAlso you can remove an obstacle at any time needed by using\n\naiWorld.removeObstacle(NodePath obstacle)\n\nThe full working code in Panda3D is :\n\nimport direct.directbase.DirectStart\nfrom panda3d.core import *\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.task import Task\nfrom direct.actor.Actor import Actor\n#for Pandai\nfrom panda3d.ai import *\n#for Onscreen GUI\nfrom direct.gui.OnscreenText import OnscreenText\n\n# Globals\nspeed = 0.75\n\n# Function to put instructions on the screen.\nfont = loader.loadFont(\"cmss12\")\ndef addInstructions(pos, msg):\n    return OnscreenText(text=msg, style=1, fg=(1,1,1,1), font = font,\n                        pos=(-1.3, pos), align=TextNode.ALeft, scale = .05)\n\nclass World(DirectObject):\n\n    def __init__(self):\n        base.disableMouse()\n        base.cam.setPosHpr(0,0,55,0,-90,0)\n\n        self.loadModels()\n        self.setAI()\n        self.setMovement()\n\n    def loadModels(self):\n        # Seeker\n        ralphStartPos = Vec3(-10, 0, 0)\n        self.pursuer = Actor(\"models/ralph\",\n                                 {\"run\":\"models/ralph-run\"})\n        self.pursuer.reparentTo(render)\n        self.pursuer.setScale(0.5)\n        self.pursuer.setPos(ralphStartPos)\n        # Target\n        self.target = loader.loadModel(\"models/arrow\")\n        self.target.setColor(1,0,0)\n        self.target.setPos(5,0,0)\n        self.target.setScale(1)\n        self.target.reparentTo(render)\n        # Obstacle 1\n        self.obstacle1 = loader.loadModel(\"models/arrow\")\n        self.obstacle1.setColor(0,0,1)\n        self.obstacle1.setPos(2,0,0)\n        self.obstacle1.setScale(1)\n        self.obstacle1.reparentTo(render)\n        # Obstacle 2\n        self.obstacle2 = loader.loadModel(\"models/arrow\")\n        self.obstacle2.setColor(0,0,1)\n        self.obstacle2.setPos(5,5,0)\n        self.obstacle2.setScale(1)\n        self.obstacle2.reparentTo(render)\n\n        self.pursuer.loop(\"run\")\n\n    def setAI(self):\n        #Creating AI World\n        self.AIworld = AIWorld(render)\n\n        self.AIchar = AICharacter(\"pursuer\",self.pursuer, 100, 0.05, 5)\n        self.AIworld.addAiChar(self.AIchar)\n        self.AIbehaviors = self.AIchar.getAiBehaviors()\n\n        self.AIbehaviors.pursue(self.target)\n\n        # Obstacle avoidance\n        self.AIbehaviors.obstacleAvoidance(1.0)\n        self.AIworld.addObstacle(self.obstacle1)\n        self.AIworld.addObstacle(self.obstacle2)\n\n        #AI World update\n        taskMgr.add(self.AIUpdate,\"AIUpdate\")\n\n    #to update the AIWorld\n    def AIUpdate(self,task):\n        self.AIworld.update()\n        return Task.cont\n\n    #All the movement functions for the Target\n    def setMovement(self):\n        self.keyMap = {\"left\":0, \"right\":0, \"up\":0, \"down\":0}\n        self.accept(\"arrow_left\", self.setKey, [\"left\",1])\n        self.accept(\"arrow_right\", self.setKey, [\"right\",1])\n        self.accept(\"arrow_up\", self.setKey, [\"up\",1])\n        self.accept(\"arrow_down\", self.setKey, [\"down\",1])\n        self.accept(\"arrow_left-up\", self.setKey, [\"left\",0])\n        self.accept(\"arrow_right-up\", self.setKey, [\"right\",0])\n        self.accept(\"arrow_up-up\", self.setKey, [\"up\",0])\n        self.accept(\"arrow_down-up\", self.setKey, [\"down\",0])\n        #movement task\n        taskMgr.add(self.Mover,\"Mover\")\n\n        addInstructions(0.9, \"Use the Arrow keys to move the Red Target\")\n\n    def setKey(self, key, value):\n        self.keyMap[key] = value\n\n    def Mover(self,task):\n        startPos = self.target.getPos()\n        if (self.keyMap[\"left\"]!=0):\n                self.target.setPos(startPos + Point3(-speed,0,0))\n        if (self.keyMap[\"right\"]!=0):\n                self.target.setPos(startPos + Point3(speed,0,0))\n        if (self.keyMap[\"up\"]!=0):\n                self.target.setPos(startPos + Point3(0,speed,0))\n        if (self.keyMap[\"down\"]!=0):\n                self.target.setPos(startPos + Point3(0,-speed,0))\n\n        return Task.cont\n\nw = World()\nrun()\n\nTo get the full working demo, please visit :\n\nhttps://sites.google.com/site/etcpandai/documentation/steering-behaviors/obstacle-avoidance/PandAIObstacleAvoidanceExample.zip?attredirects=0&d=1",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/828c2d57_obstacle-avoidance.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/a961692e_828c2d57_obstacle-avoidance.json",
    "doc_id": "doc_389"
  }
}