{
  "content": "\"\"\"Undocumented Module\"\"\"\n\n__all__ = ['ClassicStyle', 'NewStyle', 'ToonEyes']\n\nfrom . import FSM\nfrom direct.task import Task\nfrom direct.task.TaskManagerGlobal import taskMgr\n\n\nclass ClassicStyle(FSM.FSM):\n\n    def __init__(self, name):\n        FSM.FSM.__init__(self, name)\n\n        self.defaultTransitions = {\n            'Red': ['Green'],\n            'Yellow': ['Red'],\n            'Green': ['Yellow'],\n        }\n\n    def enterRed(self):\n        print(\"enterRed(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def exitRed(self):\n        print(\"exitRed(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def enterYellow(self):\n        print(\"enterYellow(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def exitYellow(self):\n        print(\"exitYellow(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def enterGreen(self):\n        print(\"enterGreen(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def exitGreen(self):\n        print(\"exitGreen(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n\nclass NewStyle(FSM.FSM):\n\n    def enterRed(self):\n        print(\"enterRed(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def filterRed(self, request, args):\n        print(\"filterRed(self, '%s', %s)\" % (request, args))\n        if request == 'advance':\n            return 'Green'\n        return self.defaultFilter(request, args)\n\n    def exitRed(self):\n        print(\"exitRed(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def enterYellow(self):\n        print(\"enterYellow(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def filterYellow(self, request, args):\n        print(\"filterYellow(self, '%s', %s)\" % (request, args))\n        if request == 'advance':\n            return 'Red'\n        return self.defaultFilter(request, args)\n\n    def exitYellow(self):\n        print(\"exitYellow(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def enterGreen(self):\n        print(\"enterGreen(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n    def filterGreen(self, request, args):\n        print(\"filterGreen(self, '%s', %s)\" % (request, args))\n        if request == 'advance':\n            return 'Yellow'\n        return self.defaultFilter(request, args)\n\n    def exitGreen(self):\n        print(\"exitGreen(self, '%s', '%s')\" % (self.oldState, self.newState))\n\n\nclass ToonEyes(FSM.FSM):\n    def __init__(self):\n        FSM.FSM.__init__(self, 'eyes')\n\n        self.__unblinkName = \"unblink\"\n\n        # Eyes are initially open.\n        self.request('Open')\n\n    def defaultFilter(self, request, args):\n        # The default filter accepts any direct state request (these\n        # start with a capital letter).\n        if request[0].isupper():\n            return request\n\n        # Unexpected command requests are quietly ignored.\n        return None\n\n    def enterOpen(self):\n        print(\"swap in eyes open model\")\n\n    def filterOpen(self, request, args):\n        if request == 'blink':\n            taskMgr.remove(self.__unblinkName)\n            taskMgr.doMethodLater(0.125, self.__unblink, self.__unblinkName)\n            return 'Closed'\n        return self.defaultFilter(request, args)\n\n    def __unblink(self, task):\n        self.request('unblink')\n        return Task.done\n\n    def enterClosed(self):\n        print(\"swap in eyes closed model\")\n\n    def filterClosed(self, request, args):\n        if request == 'unblink':\n            return 'Open'\n        return self.defaultFilter(request, args)\n\n    def enterSurprised(self):\n        print(\"swap in eyes surprised model\")\n\n    def enterOff(self):\n        taskMgr.remove(self.__unblinkName)\n\n\n####\n#### Example of using ClassicStyle:\n##\n## >>> import SampleFSM\n## >>> foo = SampleFSM.ClassicStyle('foo')\n## >>> foo.request('Red')\n## enterRed(self, 'Off', 'Red')\n## ('Red',)\n## >>> foo.request('Yellow')\n## Traceback (most recent call last):\n##   File \"<stdin>\", line 1, in ?\n##   File \"/home/drose/player/direct/src/fsm/FSM.py\", line 168, in request\n##     result = func(request, args)\n##   File \"/home/drose/player/direct/src/fsm/FSM.py\", line 210, in defaultFilter\n##     self.notify.error(\"%s rejecting request %s from state %s.\" % (self.name, request, self.state))\n##   File \"/home/drose/player/direct/src/directnotify/Notifier.py\", line 99, in error\n##     raise exception(errorString)\n## StandardError: foo rejecting request Yellow from state Red.\n## >>> foo.request('Green')\n## exitRed(self, 'Red', 'Green')\n## enterGreen(self, 'Red', 'Green')\n## ('Green',)\n## >>>\n\n####\n#### Example of using NewStyle:\n##\n## >>> import SampleFSM\n## >>> foo = SampleFSM.NewStyle('foo')\n## >>> foo.request('Red')\n## enterRed(self, 'Off', 'Red')\n## ('Red',)\n## >>> foo.request('advance')\n## filterRed(self, 'advance', ())\n## exitRed(self, 'Red', 'Green')\n## enterGreen(self, 'Red', 'Green')\n## ('Green',)\n## >>> foo.request('advance')\n## filterGreen(self, 'advance', ())\n## exitGreen(self, 'Green', 'Yellow')\n## enterYellow(self, 'Green', 'Yellow')\n## ('Yellow',)\n## >>> foo.request('advance')\n## filterYellow(self, 'advance', ())\n## exitYellow(self, 'Yellow', 'Red')\n## enterRed(self, 'Yellow', 'Red')\n## ('Red',)\n## >>> foo.request('advance')\n## filterRed(self, 'advance', ())\n## exitRed(self, 'Red', 'Green')\n## enterGreen(self, 'Red', 'Green')\n## ('Green',)\n## >>>\n\n####\n#### Example of using ToonEyes:\n##\n## >>> from ShowBaseGlobal import *\n## >>> import SampleFSM\n## >>> eyes = SampleFSM.ToonEyes()\n## swap in eyes open model\n## >>> eyes.request('blink')\n## swap in eyes closed model\n## ('Closed',)\n## >>> run()\n## swap in eyes open model\n## >>> eyes.request('Surprised')\n## swap in eyes surprised model\n## ('Surprised',)\n## >>> eyes.request('blink')\n## >>>\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/fsm/SampleFSM.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/c3ea557f_SampleFSM.json",
    "doc_id": "doc_149"
  }
}