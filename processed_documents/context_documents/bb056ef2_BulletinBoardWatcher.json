{
  "content": "\"\"\"Contains the BulletinBoardWatcher class.\"\"\"\n\n__all__ = ['BulletinBoardWatcher']\n\nfrom direct.directnotify import DirectNotifyGlobal\nfrom direct.showbase.PythonUtil import Functor, makeList\nfrom direct.showbase import DirectObject\nfrom direct.showbase.BulletinBoardGlobal import bulletinBoard as bboard\n\n\nclass BulletinBoardWatcher(DirectObject.DirectObject):\n    \"\"\" This class allows you to wait for a set of posts to be made to (or\n    removed from) the bulletin board, and gives you a notification when all\n    posts have been made. Values of posts are not examined.\"\"\"\n    notify = DirectNotifyGlobal.directNotify.newCategory('BulletinBoardWatcher')\n\n    def __init__(self, name, postNames, callback, removeNames=None):\n        self.notify.debug('__init__: %s, %s, %s' % (name, postNames, callback))\n        if removeNames is None:\n            removeNames = []\n        self.name = name\n        self.postNames = makeList(postNames)\n        self.removeNames = makeList(removeNames)\n        self.callback = callback\n        self.waitingOn = set()\n        for name in self.postNames:\n            if not bboard.has(name):\n                eventName = bboard.getEvent(name)\n                self.waitingOn.add(eventName)\n                self.acceptOnce(eventName, Functor(self._handleEvent, eventName))\n        for name in self.removeNames:\n            if bboard.has(name):\n                eventName = bboard.getRemoveEvent(name)\n                self.waitingOn.add(eventName)\n                self.acceptOnce(eventName, Functor(self._handleEvent, eventName))\n        self._checkDone()\n\n    def destroy(self):\n        self.ignoreAll()\n        if hasattr(self, 'callback'):\n            del self.callback\n            del self.waitingOn\n\n    def isDone(self):\n        return len(self.waitingOn) == 0\n\n    def _checkDone(self):\n        if self.isDone():\n            self.notify.debug('%s: done' % self.name)\n            self.callback()\n            self.destroy()\n\n    def _handleEvent(self, eventName):\n        self.notify.debug('%s: handlePost(%s)' % (self.name, eventName))\n        assert eventName in self.waitingOn\n        self.waitingOn.remove(eventName)\n        self._checkDone()\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/BulletinBoardWatcher.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/bb056ef2_BulletinBoardWatcher.json",
    "doc_id": "doc_251"
  }
}