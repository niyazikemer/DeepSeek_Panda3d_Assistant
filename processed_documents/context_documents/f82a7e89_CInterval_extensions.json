{
  "content": "from panda3d.direct import CInterval\nfrom .extension_native_helpers import Dtool_funcToMethod\nfrom direct.directnotify.DirectNotifyGlobal import directNotify\nimport warnings\n\nCInterval.DtoolClassDict[\"notify\"] = directNotify.newCategory(\"Interval\")\n\n#####################################################################\ndef setT(self, t):\n    # Overridden from the C++ function to call privPostEvent\n    # afterward.  We do this by renaming the C++ function in\n    # FFIRename.\n    self.setT_Old(t)\n    self.privPostEvent()\n\nCInterval.DtoolClassDict[\"setT_Old\"] = CInterval.setT\nDtool_funcToMethod(setT, CInterval)\ndel setT\n#####################################################################\n\ndef play(self, t0 = 0.0, duration = None, scale = 1.0):\n    if __debug__:\n        warnings.warn(\"CInterval.play() is deprecated, use start() instead\", DeprecationWarning, stacklevel=2)\n    if duration:  # None or 0 implies full length\n        self.start(t0, t0 + duration, scale)\n    else:\n        self.start(t0, -1, scale)\n\nDtool_funcToMethod(play, CInterval)\ndel play\n#####################################################################\n\ndef stop(self):\n    if __debug__:\n        warnings.warn(\"CInterval.stop() is deprecated, use finish() instead\", DeprecationWarning, stacklevel=2)\n    self.finish()\n\nDtool_funcToMethod(stop, CInterval)\ndel stop\n#####################################################################\n\ndef setFinalT(self):\n    if __debug__:\n        warnings.warn(\"CInterval.setFinalT() is deprecated, use finish() instead\", DeprecationWarning, stacklevel=2)\n    self.finish()\n\nDtool_funcToMethod(setFinalT, CInterval)\ndel setFinalT\n#####################################################################\n\ndef privPostEvent(self):\n    # Call after calling any of the priv* methods to do any required\n    # Python finishing steps.\n    t = self.getT()\n    if hasattr(self, \"setTHooks\"):\n        for func in self.setTHooks:\n            func(t)\n\nDtool_funcToMethod(privPostEvent, CInterval)\ndel privPostEvent\n#####################################################################\n\ndef popupControls(self, tl = None):\n    \"\"\"\n    Popup control panel for interval.\n    \"\"\"\n    import math\n    # Don't use a regular import, to prevent ModuleFinder from picking\n    # it up as a dependency when building a .p3d package.\n    import importlib\n    EntryScale = importlib.import_module('direct.tkwidgets.EntryScale')\n    tkinter = importlib.import_module('tkinter')\n\n    if tl is None:\n        tl = tkinter.Toplevel()\n        tl.title('Interval Controls')\n    outerFrame = tkinter.Frame(tl)\n    def entryScaleCommand(t, s=self):\n        s.setT(t)\n        s.pause()\n    self.es = es = EntryScale.EntryScale(\n        outerFrame, text = self.getName(),\n        min = 0, max = math.floor(self.getDuration() * 100) / 100,\n        command = entryScaleCommand)\n    es.set(self.getT(), fCommand = 0)\n    es.pack(expand = 1, fill = tkinter.X)\n    bf = tkinter.Frame(outerFrame)\n    # Jump to start and end\n    def toStart(s=self, es=es):\n        s.setT(0.0)\n        s.pause()\n    def toEnd(s=self):\n        s.setT(s.getDuration())\n        s.pause()\n    jumpToStart = tkinter.Button(bf, text = '<<', command = toStart)\n    # Stop/play buttons\n    def doPlay(s=self, es=es):\n        s.resume(es.get())\n\n    stop = tkinter.Button(bf, text = 'Stop',\n                  command = lambda s=self: s.pause())\n    play = tkinter.Button(\n        bf, text = 'Play',\n        command = doPlay)\n    jumpToEnd = tkinter.Button(bf, text = '>>', command = toEnd)\n    jumpToStart.pack(side = tkinter.LEFT, expand = 1, fill = tkinter.X)\n    play.pack(side = tkinter.LEFT, expand = 1, fill = tkinter.X)\n    stop.pack(side = tkinter.LEFT, expand = 1, fill = tkinter.X)\n    jumpToEnd.pack(side = tkinter.LEFT, expand = 1, fill = tkinter.X)\n    bf.pack(expand = 1, fill = tkinter.X)\n    outerFrame.pack(expand = 1, fill = tkinter.X)\n    # Add function to update slider during setT calls\n    def update(t, es=es):\n        es.set(t, fCommand = 0)\n    if not hasattr(self, \"setTHooks\"):\n        self.setTHooks = []\n    self.setTHooks.append(update)\n    self.setWantsTCallback(1)\n    # Clear out function on destroy\n    def onDestroy(e, s=self, u=update):\n        if u in s.setTHooks:\n            s.setTHooks.remove(u)\n    tl.bind('<Destroy>', onDestroy)\n\nDtool_funcToMethod(popupControls, CInterval)\ndel popupControls\n#####################################################################\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/extensions_native/CInterval_extensions.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/f82a7e89_CInterval_extensions.json",
    "doc_id": "doc_342"
  }
}