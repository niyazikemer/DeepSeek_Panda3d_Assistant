{
  "content": "The Window Framework\n\npython\n\nThe WindowFramework class is for use in C++ only. If you use Python, you can just use ShowBase to open a window and skip this page.\n\ncpp\n\nThis page will explain how to use the WindowFramework class in C++ to open a blank window. First of all, we need to include the appropriate header files:\n\n#include \"pandaFramework.h\"\n#include \"pandaSystem.h\"\n\nSecond, we need to create an instance of the PandaFramework class, and use it to open a window.\n\nPandaFramework framework;\nframework.open_framework(argc, argv);\nframework.set_window_title(\"Hello World!\");\n\nWindowFramework *window = framework.open_window();\n\nOptionally, we can enable keyboard support, in case we want to check for keyboard presses, and we can enable the default camera trackball. Note that you also need to enable keyboard support to receive mouse button events, since it sets up the button event handlers.\n\n// Enable keyboard detection\nwindow->enable_keyboard();\n// Enable default camera movement\nwindow->setup_trackball();\n\nNow, we're going to check if the window has opened successfully. If so, the main loop must be called, using the function framework.main_loop(). This is equivalent to the base.run() function in Python.\n\nif (window != nullptr) {\n  nout << \"Opened the window successfully!\\n\";\n\n  // Put here your own code, such as the loading of your models\n\n  framework.main_loop();\n} else {\n  nout << \"Could not load the window!\\n\";\n}\n\nAfterwards, we need to close the framework:\n\nframework.close_framework();\nreturn (0);\n\nNow, compile and run <running-your-program> your file and you have your own window opened!\n\nThis is the completed application:\n\n// Include all the stuff\n#include \"pandaFramework.h\"\n#include \"pandaSystem.h\"\n\nint main(int argc, char *argv[]) {\n  // Open the framework\n  PandaFramework framework;\n  framework.open_framework(argc, argv);\n  // Set a nice title\n  framework.set_window_title(\"Hello World!\");\n  // Open it!\n  WindowFramework *window = framework.open_window();\n\n  // Check whether the window is loaded correctly\n  if (window != nullptr) {\n    nout << \"Opened the window successfully!\\n\";\n\n    window->enable_keyboard(); // Enable keyboard detection\n    window->setup_trackball(); // Enable default camera movement\n\n    // Put here your own code, such as the loading of your models\n\n    // Do the main loop\n    framework.main_loop();\n  } else {\n    nout << \"Could not load the window!\\n\";\n  }\n  // Close the framework\n  framework.close_framework();\n  return (0);\n}\n\nThe WindowFramework class also provides all the basic things that the Python equivalent ShowBase would normally take care of:\n\nconst NodePath &get_render();\nconst NodePath &get_render_2d();\nconst NodePath &get_aspect_2d();\n\nvoid set_wireframe(bool enable);\nvoid set_texture(bool enable);\nvoid set_two_sided(bool enable);\nvoid set_one_sided_reverse(bool enable);\nvoid set_lighting(bool enable);\n\nconst NodePath &get_camera_group();\n\nint get_num_cameras() const;\nCamera *get_camera(int n) const;\n\n// WindowFramework also provides access to the GraphicsWindow.\n// for example, to set the background color to black, you can do this:\nwindow->get_graphics_window()->set_clear_color(LColor(0, 0, 0, 1));\n\nIt's very useful to study the file panda/src/framework/windowFramework.h, since you will need to use it often.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/aebd239e_window-framework.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/252e272f_aebd239e_window-framework.json",
    "doc_id": "doc_467"
  }
}