{
  "content": "Texture Combine Modes\n\nIn addition to the several Texture Blend Modes <texture-modes> described previously, there is a more advanced interface on TextureStage that allows for a larger vocabulary of texture blending options.\n\nAlthough several of the following options (CMReplace, CMModulate, CMAdd) have obvious parallels with the simpler blend modes described previously, they are in fact more powerful, because with each of the following you may specify the particular source or sources to be used for the operation; you are not limited to simply applying the operation to the top texture and the texture below.\n\nRGB modes\n\nThe following specify the effect of the RGB (color) channels. A separate set of methods, below, specifies the effect of the alpha channel.\n\npython\n\nts.setCombineRgb(TextureStage.CMReplace, source, operand)\n\ncpp\n\nts->set_combine_rgb(TextureStage::CM_replace, source, operand);\n\nThis mode is similar to \"replace mode\". Whatever color is specified by source and operand becomes the new color.\n\npython\n\nts.setCombineRgb(TextureStage.CMModulate, source0, operand0, source1, operand1)\n\ncpp\n\nts->set_combine_rgb(TextureStage::CM_modulate, source0, operand0, source1, operand1);\n\nThis mode is similar to \"modulate mode\". The color from source0/operand0 is multiplied by the color from source1/operand1.\n\npython\n\nts.setCombineRgb(TextureStage.CMAdd, source0, operand0, source1, operand1)\n\ncpp\n\nts->set_combine_rgb(TextureStage::CM_add, source0, operand0, source1, operand1);\n\nThis mode is similar to \"add mode\". The color from source0/operand0 is added to the color from source1/operand1, and the result is clamped to 1 (white).\n\npython\n\nts.setCombineRgb(TextureStage.CMAddSigned, source0, operand0, source1, operand1)\n\ncpp\n\nts->set_combine_rgb(TextureStage::CM_add_signed, source0, operand0, source1, operand1);\n\nIn this mode, the colors are added as signed numbers, and the result wraps.\n\npython\n\nts.setCombineRgb(TextureStage.CMSubtract, source0, operand0, source1, operand1)\n\ncpp\n\nts->set_combine_rgb(TextureStage::CM_modulate, source0, operand0, source1, operand1);\n\nIn this mode, source1/operand1 is subtracted from source0/operand0.\n\npython\n\nts.setCombineRgb(TextureStage.CMInterpolate,\n                 source0, operand0, source1, operand1, source2, operand2)\n\ncpp\n\nts->set_combine_rgb(TextureStage::CM_interpolate,\n                    source0, operand0, source1, operand1, source2, operand2);\n\nThis is the only mode that uses three sources. The color value of source2/operand2 is used to select between source0/operand0 and source1/operand1. When source2 is 0, source1 is selected, and when source2 is 1, source0 is selected. When source2 is between 0 and 1, the color is smoothly blended between source0 and source1.\n\nAlpha modes\n\nThe following methods more-or-less duplicate the functionality of the above, but they control what happens to the alpha channel. Thus, you have explicit control over whether an alpha cutout in the top texture should produce an alpha cutout in the resulting object.\n\npython\n\nts.setCombineAlpha(TextureStage.CMReplace, source, operand)\nts.setCombineAlpha(TextureStage.CMModulate, source0, operand0, source1, operand1)\nts.setCombineAlpha(TextureStage.CMAdd, source0, operand0, source1, operand1)\nts.setCombineAlpha(TextureStage.CMAddSigned, source0, operand0, source1, operand1)\nts.setCombineAlpha(TextureStage.CMSubtract, source0, operand0, source1, operand1)\nts.setCombineAlpha(TextureStage.CMInterpolate, source0, operand0, source1, operand1,\n                   source2, operand2)\n\ncpp\n\nts->set_combine_alpha(TextureStage::CM_replace, source, operand);\nts->set_combine_alpha(TextureStage::CM_modulate, source0, operand0, source1, operand1);\nts->set_combine_alpha(TextureStage::CM_add, source0, operand0, source1, operand1);\nts->set_combine_alpha(TextureStage::CM_add_signed, source0, operand0, source1, operand1);\nts->set_combine_alpha(TextureStage::CM_subtract, source0, operand0, source1, operand1);\nts->set_combine_alpha(TextureStage::CM_interpolate, source0, operand0, source1, operand1,\n                      source2, operand2);\n\nSource values\n\nThis table lists the legal values for any of source, source0, source1, or source2, in the above calls. This broadly gives you control over which two (or three) textures are used as inputs to the above combine modes.\n\npython\n\ncpp\n\nOperands\n\nThis table lists the legal values for any of operand, operand0, operand1, or operand2, in the above calls. This fine-tunes the channel data that is used from each texture input.\n\npython\n\ncpp",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/84f48978_texture-combine-modes.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/6a616989_84f48978_texture-combine-modes.json",
    "doc_id": "doc_627"
  }
}