{
  "content": "\"\"\"Contains the WidgetPropertiesDialog class.\"\"\"\n\n__all__ = ['WidgetPropertiesDialog']\n\nimport Pmw\nimport tkinter as tk\n\n\nclass WidgetPropertiesDialog(tk.Toplevel):\n    \"\"\"Class to open dialogs to adjust widget properties.\"\"\"\n\n    def __init__(self, propertyDict, propertyList = None, parent = None,\n                 title = 'Widget Properties'):\n        \"\"\"Initialize a dialog.\n        Arguments:\n            propertyDict -- a dictionary of properties to be edited\n            parent -- a parent window (the application window)\n            title -- the dialog title\n        \"\"\"\n        # Record property list\n        self.propertyDict = propertyDict\n        self.propertyList = propertyList\n        if self.propertyList is None:\n            self.propertyList = sorted(self.propertyDict)\n        # Use default parent if none specified\n        if not parent:\n            parent = tk._default_root\n        # Create toplevel window\n        tk.Toplevel.__init__(self, parent)\n        self.transient(parent)\n        # Set title\n        if title:\n            self.title(title)\n        # Record parent\n        self.parent = parent\n        # Initialize modifications\n        self.modifiedDict = {}\n        # Create body\n        body = tk.Frame(self)\n        self.initial_focus = self.body(body)\n        body.pack(padx=5, pady=5)\n        # Create OK Cancel button\n        self.buttonbox()\n        # Initialize window state\n        self.grab_set()\n        self.protocol(\"WM_DELETE_WINDOW\", self.cancel)\n        self.geometry(\"+%d+%d\" % (parent.winfo_rootx() + 50,\n                                  parent.winfo_rooty() + 50))\n        self.initial_focus.focus_set()\n        self.wait_window(self)\n\n    def destroy(self):\n        \"\"\"Destroy the window\"\"\"\n        self.propertyDict = {}\n        self.initial_focus = None\n        # Clean up balloons!\n        for balloon in self.balloonList:\n            balloon.withdraw()\n        tk.Toplevel.destroy(self)\n\n    #\n    # construction hooks\n    def body(self, master):\n        \"\"\"create dialog body.\n        return entry that should have initial focus.\n        This method should be overridden, and is called\n        by the __init__ method.\n        \"\"\"\n        count = 0\n        entryList = []\n        self.balloonList = []\n        for property in self.propertyList:\n            propertySet = self.propertyDict[property]\n            # Widget\n            widget = propertySet.get('widget', None)\n            # Get initial value\n            initialvalue = widget[property]\n            # Type of entry\n            entryType = propertySet.get('type', 'real')\n            # Is None an allowable value?\n            fAllowNone = propertySet.get('fNone', 0)\n            # Help string specified?\n            helpString = propertySet.get('help', None)\n            # Create label\n            label = tk.Label(master, text=property, justify=tk.LEFT)\n            label.grid(row=count, column=0, padx=5, sticky=tk.W)\n\n            # Create entry\n            entry = Pmw.EntryField(master, entry_justify=tk.RIGHT)\n            entry.grid(row=count, column=1, padx=5, sticky=tk.W + tk.E)\n            if initialvalue is None:\n                entry.insert(0, 'None')\n            else:\n                entry.insert(0, initialvalue)\n\n            # Create balloon for help\n            balloon = Pmw.Balloon(state='balloon')\n            self.balloonList.append(balloon)\n            # extra info if None is allowed value\n            if helpString is None:\n                if fAllowNone:\n                    extra = ' or None'\n                else:\n                    extra = ''\n            # Set up help string and validator based upon type\n            if entryType == 'real':\n                # Only allow real numbers\n                if fAllowNone:\n                    entry['validate'] = {'validator': self.realOrNone}\n                else:\n                    entry['validate'] = {'validator': 'real'}\n                if helpString is None:\n                    helpString = 'Enter a floating point number' + extra + '.'\n            elif entryType == 'integer':\n                # Only allow integer values\n                if fAllowNone:\n                    entry['validate'] = {'validator': self.intOrNone}\n                else:\n                    entry['validate'] = {'validator': 'integer'}\n                if helpString is None:\n                    helpString = f'Enter an integer{extra}.'\n            else:\n                # Anything goes with a string widget\n                if helpString is None:\n                    helpString = f'Enter a string{extra}.'\n            # Bind balloon with help string to entry\n            balloon.bind(entry, helpString)\n            # Create callback to execute whenever a value is changed\n            modifiedCallback = (lambda f=self.modified, w=widget, e=entry,\n                                p=property, t=entryType, fn=fAllowNone:\n                                f(w, e, p, t, fn))\n            entry['modifiedcommand'] = modifiedCallback\n            # Keep track of the entrys\n            entryList.append(entry)\n            count += 1\n\n        # Set initial focus\n        if len(entryList) > 0:\n            entry = entryList[0]\n            entry.select_range(0, tk.END)\n            # Set initial focus to first entry in the list\n            return entryList[0]\n        else:\n            # Just set initial focus to self\n            return self\n\n    def modified(self, widget, entry, property, type, fNone):\n        self.modifiedDict[property] = (widget, entry, type, fNone)\n\n    def buttonbox(self):\n        \"\"\"add standard button box buttons.\n        \"\"\"\n        box = tk.Frame(self)\n        # Create buttons\n        w = tk.Button(box, text=\"OK\", width=10, command=self.ok)\n        w.pack(side=tk.LEFT, padx=5, pady=5)\n        # Create buttons\n        w = tk.Button(box, text=\"Cancel\", width=10, command=self.cancel)\n        w.pack(side=tk.LEFT, padx=5, pady=5)\n        # Bind commands\n        self.bind(\"<Return>\", self.ok)\n        self.bind(\"<Escape>\", self.cancel)\n        # Pack\n        box.pack()\n\n    def realOrNone(self, val):\n        val = val.lower()\n        if 'none'.find(val) != -1:\n            if val == 'none':\n                return Pmw.OK\n            else:\n                return Pmw.PARTIAL\n        return Pmw.realvalidator(val)\n\n    def intOrNone(self, val):\n        val = val.lower()\n        if 'none'.find(val) != -1:\n            if val == 'none':\n                return Pmw.OK\n            else:\n                return Pmw.PARTIAL\n        return Pmw.integervalidator(val)\n\n    #\n    # standard button semantics\n    def ok(self, event=None):\n        self.withdraw()\n        self.update_idletasks()\n        self.validateChanges()\n        self.apply()\n        self.cancel()\n\n    def cancel(self, event=None):\n        # put focus back to the parent window\n        self.parent.focus_set()\n        self.destroy()\n\n    def validateChanges(self):\n        for property in self.modifiedDict:\n            tuple = self.modifiedDict[property]\n            widget = tuple[0]\n            entry = tuple[1]\n            type = tuple[2]\n            fNone = tuple[3]\n            value = entry.get()\n            lValue = value.lower()\n            if 'none'.find(lValue) != -1:\n                if fNone and (lValue == 'none'):\n                    widget[property] = None\n            else:\n                if type == 'real':\n                    value = float(value)\n                elif type == 'integer':\n                    value = int(value)\n                widget[property] = value\n\n    def apply(self):\n        \"\"\"process the data\n\n        This method is called automatically to process the data, *after*\n        the dialog is destroyed. By default, it does nothing.\n        \"\"\"\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/tkwidgets/WidgetPropertiesDialog.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/5541e2ed_WidgetPropertiesDialog.json",
    "doc_id": "doc_193"
  }
}