{
  "content": "\"\"\"\n   This is the GUI for the Curve Animation\n\"\"\"\nimport wx\n\nfrom . import ObjectGlobals as OG\n\n\nclass CurveAnimUI(wx.Dialog):\n    \"\"\"\n    This is the Curve Animation Panel implementation.\n    \"\"\"\n\n    def __init__(self, parent, editor):\n        wx.Dialog.__init__(self, parent, id=wx.ID_ANY, title=\"Curve Animation\",\n                           pos=wx.DefaultPosition, size=(430, 140))\n\n        self.editor = editor\n        self.nodePath = None\n        self.curve = None\n\n        self.mainPanel = wx.Panel(self, -1)\n\n        self.chooseNode = wx.StaticText(self.mainPanel, -1, \"Choose NodePath:\")\n        self.chooseNodeTxt = wx.TextCtrl(self.mainPanel, -1, \"\")\n        self.chooseNodeButton = wx.Button(self.mainPanel, -1, \"Choose..\")\n\n        self.chooseCurve = wx.StaticText(self.mainPanel, -1, \"Choose attch Curve:\")\n        self.chooseCurveTxt = wx.TextCtrl(self.mainPanel, -1, \"\")\n        self.chooseCurveButton = wx.Button(self.mainPanel, -1, \"Choose..\")\n\n        self.duritionTime = wx.StaticText(self.mainPanel, -1, \"Durition(Frame):\")\n        self.duritionTimeSpin = wx.SpinCtrl(self.mainPanel, -1, \"\", size=(70,25), min=24, max=10000)\n\n        self.createAnimButton = wx.Button(self.mainPanel, -1, \"Creat\")\n        self.saveAnimButton = wx.Button(self.mainPanel, -1, \"Save Animation\")\n\n        self.SetProperties()\n        self.DoLayout()\n\n        self.Bind(wx.EVT_BUTTON, self.OnChooseNode, self.chooseNodeButton)\n        self.Bind(wx.EVT_BUTTON, self.OnChooseCurve, self.chooseCurveButton)\n        self.Bind(wx.EVT_BUTTON, self.OnCreateAnim, self.createAnimButton)\n        self.Bind(wx.EVT_BUTTON, self.OnSaveAnim, self.saveAnimButton)\n\n        self.Bind(wx.EVT_CLOSE, self.OnExit)\n\n    def SetProperties(self):\n        self.duritionTimeSpin.SetValue(24)\n        self.chooseNodeTxt.SetMinSize((200, 21))\n        self.chooseCurveTxt.SetMinSize((200, 21))\n        self.saveAnimButton.SetToolTipString(\"Save the animation to the global animation control\")\n\n    def DoLayout(self):\n        dialogSizer = wx.BoxSizer(wx.VERTICAL)\n        mainSizer = wx.FlexGridSizer(4, 3, 0, 0)\n\n        mainSizer.Add(self.chooseNode, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 10)\n        mainSizer.Add(self.chooseNodeTxt, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)\n        mainSizer.Add(self.chooseNodeButton, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)\n\n        mainSizer.Add(self.chooseCurve, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 10)\n        mainSizer.Add(self.chooseCurveTxt, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)\n        mainSizer.Add(self.chooseCurveButton, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)\n\n        mainSizer.Add(self.duritionTime, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 10)\n        mainSizer.Add(self.duritionTimeSpin, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)\n        mainSizer.Add(self.createAnimButton, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)\n\n        mainSizer.Add(self.saveAnimButton, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)\n\n        self.mainPanel.SetSizerAndFit(mainSizer)\n\n        dialogSizer.Add(self.mainPanel, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)\n\n        self.SetSizer(dialogSizer)\n        self.Layout()\n\n    def OnChooseNode(self, evt):\n        if base.direct.selected.last is None or base.direct.selected.last.hasTag('Controller') or not base.direct.selected.last.hasTag('OBJRoot'):\n            dlg = wx.MessageDialog(None, 'Please select an object.', 'NOTICE', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n        else:\n            obj = self.editor.objectMgr.findObjectByNodePath(base.direct.selected.last)\n            if obj[OG.OBJ_DEF].name == '__Curve__':\n                dlg = wx.MessageDialog(None, 'Please select an object, not a curve.', 'NOTICE', wx.OK)\n                dlg.ShowModal()\n                dlg.Destroy()\n            else:\n                self.nodePath = obj\n                self.chooseNodeTxt.SetValue(str(self.nodePath[OG.OBJ_UID]))\n\n    def OnChooseCurve(self, evt):\n        if base.direct.selected.last is None or base.direct.selected.last.hasTag('Controller') or not base.direct.selected.last.hasTag('OBJRoot'):\n            dlg = wx.MessageDialog(None, 'Please select a curve.', 'NOTICE', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n        else:\n            obj = self.editor.objectMgr.findObjectByNodePath(base.direct.selected.last)\n            if obj[OG.OBJ_DEF].name != '__Curve__':\n                dlg = wx.MessageDialog(None, 'Please select a curve, not an object.', 'NOTICE', wx.OK)\n                dlg.ShowModal()\n                dlg.Destroy()\n            elif obj[OG.OBJ_DEF].name == '__Curve__':\n                self.curve = obj\n                self.chooseCurveTxt.SetValue(str(self.curve[OG.OBJ_UID]))\n\n    def OnCreateAnim(self, evt):\n        self.time = self.duritionTimeSpin.GetValue()\n        if self.nodePath is None or self.curve is None:\n            dlg = wx.MessageDialog(None, 'Please select an object and a curve first.', 'NOTICE', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n        else:\n            self.curveSequence = self.editor.animMgr.singleCurveAnimation(self.nodePath, self.curve, self.time)\n            self.curveSequence.start()\n\n    def OnSaveAnim(self, evt):\n        if not self.curveSequence:\n            dlg = wx.MessageDialog(None, 'Please create an animation first.', 'NOTICE', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n        else:\n            if self.editor.animMgr.curveAnimation == {}:\n                self.editor.animMgr.curveAnimation[(self.nodePath[OG.OBJ_UID], self.curve[OG.OBJ_UID])] = \\\n                    (self.nodePath[OG.OBJ_UID], self.curve[OG.OBJ_UID], self.time)\n                self.editor.updateStatusReadout('Sucessfully saved to global animation list')\n                return\n\n            hasKey = False\n            for key in self.editor.animMgr.curveAnimation:\n                if key == (self.nodePath[OG.OBJ_UID], self.curve[OG.OBJ_UID]):\n                    dlg = wx.MessageDialog(None, 'Already have the animation for this object attach to this curve.', 'NOTICE', wx.OK)\n                    dlg.ShowModal()\n                    dlg.Destroy()\n                    hasKey = True\n                    return\n                elif self.nodePath[OG.OBJ_UID] == key[0]:\n                    dlg = wx.MessageDialog(None, 'This object is already attached to a curve.', 'NOTICE', wx.OK)\n                    dlg.ShowModal()\n                    dlg.Destroy()\n                    hasKey = True\n                    return\n\n            if not hasKey and self.editor.animMgr.curveAnimation != {}:\n                self.editor.animMgr.curveAnimation[(self.nodePath[OG.OBJ_UID], self.curve[OG.OBJ_UID])] = \\\n                    (self.nodePath[OG.OBJ_UID], self.curve[OG.OBJ_UID], self.time)\n                self.editor.updateStatusReadout('Sucessfully saved to global animation list')\n\n    def OnExit(self, evt):\n        self.Destroy()\n        self.editor.ui.curveAnimMenuItem.Check(False)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/CurveAnimUI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/258ea79b_CurveAnimUI.json",
    "doc_id": "doc_30"
  }
}