{
  "content": "\"\"\"Undocumented Module\"\"\"\n\n__all__ = ['TaskManagerPanel', 'TaskManagerWidget']\n\nfrom direct.tkwidgets.AppShell import AppShell\nfrom direct.showbase.DirectObject import DirectObject\nimport Pmw\nimport tkinter as tk\nfrom tkinter.messagebox import askokcancel\n\n\nclass TaskManagerPanel(AppShell):\n    # Override class variables here\n    appname = 'TaskManager Panel'\n    frameWidth      = 300\n    frameHeight     = 400\n    usecommandarea = 0\n    usestatusarea  = 0\n\n    def __init__(self, taskMgr, parent = None, **kw):\n        INITOPT = Pmw.INITOPT\n        optiondefs = (\n            ('title',       self.appname,       None),\n        )\n        self.defineoptions(kw, optiondefs)\n\n        self.taskMgr = taskMgr\n\n        # Call superclass initialization function\n        AppShell.__init__(self, parent = parent)\n\n        self.initialiseoptions(TaskManagerPanel)\n\n    def createInterface(self):\n        # FILE MENU\n        # Get a handle on the file menu so commands can be inserted\n        # before quit item\n        self.taskMgrWidget = TaskManagerWidget(\n            self.interior(), self.taskMgr)\n\n    def onDestroy(self, event):\n        self.taskMgrWidget.onDestroy()\n\n\nclass TaskManagerWidget(DirectObject):\n    \"\"\"\n    TaskManagerWidget class: this class contains methods for creating\n    a panel to control taskManager tasks.\n    \"\"\"\n\n    def __init__(self, parent, taskMgr):\n        \"\"\"\n        TaskManagerWidget class pops up a control panel to view/delete\n        tasks managed by the taskManager.\n        \"\"\"\n        # Record parent (used by ok cancel dialog boxes)\n        self.parent = parent\n        # Record taskManager\n        self.taskMgr = taskMgr\n        # Init current task\n        self.currentTask = None\n        self.__taskDict = {}\n\n        # Create widgets\n        # Create a listbox\n        self.taskListBox = Pmw.ScrolledListBox(\n            parent,\n            labelpos = tk.NW, label_text = 'Tasks:',\n            label_font=('MSSansSerif', 10, 'bold'),\n            listbox_takefocus = 1,\n            items = [],\n            selectioncommand = self.setCurrentTask)\n        self.taskListBox.pack(expand = 1, fill = tk.BOTH)\n\n        self._popupMenu = tk.Menu(self.taskListBox.component('listbox'),\n                                  tearoff = 0)\n        self._popupMenu.add_command(\n            label = 'Remove Task',\n            command = self.removeCurrentTask)\n        self._popupMenu.add_command(\n            label = 'Remove Matching Tasks',\n            command = self.removeMatchingTasks)\n\n        # Controls Frame\n        controlsFrame = tk.Frame(parent)\n        self.removeButton = tk.Button(controlsFrame, text = 'Remove Task',\n                                      command = self.removeCurrentTask)\n        #self.removeButton.pack(expand = 1, fill = tk.X, side = LEFT)\n        self.removeButton.grid(row = 0, column = 0, sticky = tk.EW)\n        self.removeMatchingButton = tk.Button(controlsFrame,\n                                              text = 'Remove Matching Tasks',\n                                              command = self.removeMatchingTasks)\n        #self.removeMatchingButton.pack(expand = 1, fill = tk.X, side = LEFT)\n        self.removeMatchingButton.grid(row = 0, column = 1, sticky = tk.EW)\n\n        self.taskMgrVerbose = tk.IntVar()\n        self.taskMgrVerbose.set(0)\n        self.update = tk.Button(\n            controlsFrame,\n            text = 'Update',\n            command = self.updateTaskListBox)\n        #self.update.pack(expand = 1, fill = tk.X, side = LEFT)\n        self.update.grid(row = 1, column = 0, sticky = tk.EW)\n        self.dynamicUpdate = tk.Checkbutton(\n            controlsFrame,\n            text = 'Dynamic Update',\n            variable = self.taskMgrVerbose,\n            command = self.toggleTaskMgrVerbose)\n        #self.dynamicUpdate.pack(expand = 1, fill = tk.X, side = LEFT)\n        self.dynamicUpdate.grid(row = 1, column = 1, sticky = tk.EW)\n        # Pack frames\n        controlsFrame.pack(fill = tk.X)\n        controlsFrame.grid_columnconfigure(0, weight = 1)\n        controlsFrame.grid_columnconfigure(1, weight = 1)\n\n        # Add hook to spawnTaskEvents\n        self.accept('TaskManager-spawnTask', self.spawnTaskHook)\n        self.accept('TaskManager-removeTask', self.removeTaskHook)\n        # Get listbox\n        listbox = self.taskListBox.component('listbox')\n        # Bind updates to arrow buttons\n        listbox.bind('<KeyRelease-Up>', self.setCurrentTask)\n        listbox.bind('<KeyRelease-Down>', self.setCurrentTask)\n        listbox.bind('<ButtonPress-3>', self.popupMenu)\n        # And grab focus (to allow keyboard navigation)\n        listbox.focus_set()\n        # Update listbox values\n        self.updateTaskListBox()\n\n    def popupMenu(self, event):\n        \"\"\"\n        listbox = self.taskListBox.component('listbox')\n        index = listbox.nearest(event.y)\n        listbox.selection_clear(0)\n        listbox.activate(index)\n        self.taskListBox.select_set(index)\n        self.setCurrentTask()\n        \"\"\"\n        self._popupMenu.post(event.widget.winfo_pointerx(),\n                             event.widget.winfo_pointery())\n        return \"break\"\n\n    def setCurrentTask(self, event = None):\n        if len(self.taskListBox.curselection()) > 0: # [gjeon] to avoid crash when nothing is selected\n            index = int(self.taskListBox.curselection()[0])\n            self.currentTask = self.__taskDict[index]\n        else:\n            self.currentTask = None\n\n    def updateTaskListBox(self):\n        # Get a list of task names\n        taskNames = []\n        self.__taskDict = {}\n        count = 0\n        for task in sorted(self.taskMgr.getTasks(), key=lambda t: t.getName()):\n            taskNames.append(task.getName())\n            self.__taskDict[count] = task\n            count += 1\n\n        if taskNames:\n            self.taskListBox.setlist(taskNames)\n            # And set current index (so keypresses will start with index 0)\n            self.taskListBox.component('listbox').activate(0)\n            # Select first item\n            #self.taskListBox.select_set(0) # [gjeon] commented out to avoid focus problem with other lists\n            self.setCurrentTask()\n\n    def toggleTaskMgrVerbose(self):\n        if self.taskMgrVerbose.get():\n            self.updateTaskListBox()\n\n    def spawnTaskHook(self, task):\n        if self.taskMgrVerbose.get():\n            self.updateTaskListBox()\n\n    def removeTaskHook(self, task):\n        if self.taskMgrVerbose.get():\n            self.updateTaskListBox()\n\n    def removeCurrentTask(self):\n        if self.currentTask:\n            name = self.currentTask.name\n            ok = 1\n            if ((name == 'dataLoop') or\n                (name == 'resetPrevTransform') or\n                (name == 'tkLoop') or\n                (name == 'eventManager') or\n                (name == 'igLoop')):\n                ok = askokcancel('TaskManagerControls',\n                                 'Remove: %s?' % name,\n                                 parent = self.parent,\n                                 default = 'cancel')\n            if ok:\n                self.taskMgr.remove(self.currentTask)\n                self.updateTaskListBox()\n\n    def removeMatchingTasks(self):\n        name = self.taskListBox.getcurselection()[0]\n        ok = 1\n        if ((name == 'dataLoop') or\n            (name == 'resetPrevTransform') or\n            (name == 'tkLoop') or\n            (name == 'eventManager') or\n            (name == 'igLoop')):\n            ok = askokcancel('TaskManagerControls',\n                             'Remove tasks named: %s?' % name,\n                             parent = self.parent,\n                             default = 'cancel')\n        if ok:\n            self.taskMgr.remove(name)\n            self.updateTaskListBox()\n\n    def onDestroy(self):\n        self.ignore('TaskManager-spawnTask')\n        self.ignore('TaskManager-removeTask')\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/tkpanels/TaskManagerPanel.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/ec792566_TaskManagerPanel.json",
    "doc_id": "doc_57"
  }
}