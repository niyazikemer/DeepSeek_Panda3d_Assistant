{
  "content": "\nfrom panda3d.core import Filename, NodePath, VirtualFileSystem, getModelPath\n\n# Leave these imports in, they may be used by ptf files.\nfrom panda3d.core import * # pylint: disable=unused-import\nfrom panda3d.physics import * # pylint: disable=unused-import\nfrom . import Particles # pylint: disable=unused-import\nfrom . import ForceGroup # pylint: disable=unused-import\n\nfrom direct.directnotify import DirectNotifyGlobal\n\n\nclass ParticleEffect(NodePath):\n    notify = DirectNotifyGlobal.directNotify.newCategory('ParticleEffect')\n    pid = 1\n\n    def __init__(self, name=None, particles=None):\n        if name is None:\n            name = 'particle-effect-%d' % ParticleEffect.pid\n            ParticleEffect.pid += 1\n        NodePath.__init__(self, name)\n        # Record particle effect name\n        self.name = name\n        # Enabled flag\n        self.fEnabled = 0\n        # Dictionary of particles and forceGroups\n        self.particlesDict = {}\n        self.forceGroupDict = {}\n        # The effect's particle system\n        if particles is not None:\n            self.addParticles(particles)\n        self.renderParent = None\n\n    def birthLitter(self):\n        for p in self.particlesDict.values():\n            p.birthLitter()\n\n    def cleanup(self):\n        self.removeNode()\n        self.disable()\n        if self.__isValid():\n            for f in self.forceGroupDict.values():\n                f.cleanup()\n            for p in self.particlesDict.values():\n                p.cleanup()\n            del self.forceGroupDict\n            del self.particlesDict\n        del self.renderParent\n\n    def getName(self):\n        # override NodePath.getName()\n        return self.name\n\n    def reset(self):\n        self.removeAllForces()\n        self.removeAllParticles()\n        self.forceGroupDict = {}\n        self.particlesDict = {}\n\n    def start(self, parent=None, renderParent=None):\n        assert self.notify.debug('start() - name: %s' % self.name)\n        self.renderParent = renderParent\n        self.enable()\n        if parent is not None:\n            self.reparentTo(parent)\n\n    def enable(self):\n        # band-aid added for client crash - grw\n        if self.__isValid():\n            if self.renderParent:\n                for p in self.particlesDict.values():\n                    p.setRenderParent(self.renderParent.node())\n            for f in self.forceGroupDict.values():\n                f.enable()\n            for p in self.particlesDict.values():\n                p.enable()\n            self.fEnabled = 1\n\n    def disable(self):\n        self.detachNode()\n        # band-aid added for client crash - grw\n        if self.__isValid():\n            for p in self.particlesDict.values():\n                p.setRenderParent(p.node)\n            for f in self.forceGroupDict.values():\n                f.disable()\n            for p in self.particlesDict.values():\n                p.disable()\n            self.fEnabled = 0\n\n    def isEnabled(self):\n        \"\"\"\n        Note: this may be misleading if enable(), disable() not used\n        \"\"\"\n        return self.fEnabled\n\n    def addForceGroup(self, forceGroup):\n        forceGroup.nodePath.reparentTo(self)\n        forceGroup.particleEffect = self\n        self.forceGroupDict[forceGroup.name] = forceGroup\n\n        # Associate the force group with all particles\n        for force in forceGroup:\n            self.addForce(force)\n\n    def addForce(self, force):\n        for p in list(self.particlesDict.values()):\n            p.addForce(force)\n\n    def removeForceGroup(self, forceGroup):\n        # Remove forces from all particles\n        for force in forceGroup:\n            self.removeForce(force)\n\n        forceGroup.nodePath.removeNode()\n        forceGroup.particleEffect = None\n        self.forceGroupDict.pop(forceGroup.getName(), None)\n\n    def removeForce(self, force):\n        for p in list(self.particlesDict.values()):\n            p.removeForce(force)\n\n    def removeAllForces(self):\n        for fg in list(self.forceGroupDict.values()):\n            self.removeForceGroup(fg)\n\n    def addParticles(self, particles):\n        particles.nodePath.reparentTo(self)\n        self.particlesDict[particles.getName()] = particles\n\n        # Associate all forces in all force groups with the particles\n        for fg in list(self.forceGroupDict.values()):\n            for force in fg:\n                particles.addForce(force)\n\n    def removeParticles(self, particles):\n        if particles is None:\n            self.notify.warning('removeParticles() - particles is None!')\n            return\n        particles.nodePath.detachNode()\n        self.particlesDict.pop(particles.getName(), None)\n\n        # Remove all forces from the particles\n        for fg in list(self.forceGroupDict.values()):\n            for f in fg:\n                particles.removeForce(f)\n\n    def removeAllParticles(self):\n        for p in list(self.particlesDict.values()):\n            self.removeParticles(p)\n\n    def getParticlesList(self):\n        return list(self.particlesDict.values())\n\n    def getParticlesNamed(self, name):\n        return self.particlesDict.get(name, None)\n\n    def getParticlesDict(self):\n        return self.particlesDict\n\n    def getForceGroupList(self):\n        return list(self.forceGroupDict.values())\n\n    def getForceGroupNamed(self, name):\n        return self.forceGroupDict.get(name, None)\n\n    def getForceGroupDict(self):\n        return self.forceGroupDict\n\n    def saveConfig(self, filename):\n        filename = Filename(filename)\n        with open(filename.toOsSpecific(), 'w') as f:\n            # Add a blank line\n            f.write('\\n')\n\n            # Make sure we start with a clean slate\n            f.write('self.reset()\\n')\n\n            pos = self.getPos()\n            hpr = self.getHpr()\n            scale = self.getScale()\n            f.write('self.setPos(%0.3f, %0.3f, %0.3f)\\n' %\n                    (pos[0], pos[1], pos[2]))\n            f.write('self.setHpr(%0.3f, %0.3f, %0.3f)\\n' %\n                    (hpr[0], hpr[1], hpr[2]))\n            f.write('self.setScale(%0.3f, %0.3f, %0.3f)\\n' %\n                    (scale[0], scale[1], scale[2]))\n\n            # Save all the particles to file\n            num = 0\n            for p in list(self.particlesDict.values()):\n                target = 'p%d' % num\n                num = num + 1\n                f.write(target + ' = Particles.Particles(\\'%s\\')\\n' % p.getName())\n                p.printParams(f, target)\n                f.write('self.addParticles(%s)\\n' % target)\n\n            # Save all the forces to file\n            num = 0\n            for fg in list(self.forceGroupDict.values()):\n                target = 'f%d' % num\n                num = num + 1\n                f.write(target + ' = ForceGroup.ForceGroup(\\'%s\\')\\n' % \\\n                                                    fg.getName())\n                fg.printParams(f, target)\n                f.write('self.addForceGroup(%s)\\n' % target)\n\n    def loadConfig(self, filename):\n        fn = Filename(filename)\n        vfs = VirtualFileSystem.getGlobalPtr()\n        try:\n            if not vfs.resolveFilename(fn, getModelPath().value) and not fn.isRegularFile():\n                raise FileNotFoundError(\"could not find particle file: %s\" % (filename))\n\n            data = vfs.readFile(fn, True)\n            data = data.replace(b'\\r', b'')\n            exec(data)\n        except Exception:\n            self.notify.warning('loadConfig: failed to load particle file: '+ repr(filename))\n            raise\n\n    def accelerate(self,time,stepCount = 1,stepTime=0.0):\n        for particles in self.getParticlesList():\n            particles.accelerate(time,stepCount,stepTime)\n\n    def clearToInitial(self):\n        for particles in self.getParticlesList():\n            particles.clearToInitial()\n\n    def softStop(self):\n        for particles in self.getParticlesList():\n            particles.softStop()\n\n    def softStart(self, firstBirthDelay=None):\n        if self.__isValid():\n            for particles in self.getParticlesList():\n                if firstBirthDelay is not None:\n                    particles.softStart(br=-1, first_birth_delay=firstBirthDelay)\n                else:\n                    particles.softStart()\n        else:\n            # Not asserting here since we want to crash live clients for more expedient bugfix\n            # (Sorry, live clients)\n            self.notify.error('Trying to start effect(%s) after cleanup.' % (self.getName(),))\n\n    def __isValid(self):\n        return hasattr(self, 'forceGroupDict') and \\\n               hasattr(self, 'particlesDict')\n\n    # Snake-case aliases.\n    is_enabled = isEnabled\n    add_force_group = addForceGroup\n    add_force = addForce\n    remove_force_group = removeForceGroup\n    remove_force = removeForce\n    remove_all_forces = removeAllForces\n    add_particles = addParticles\n    remove_particles = removeParticles\n    remove_all_particles = removeAllParticles\n    get_particles_list = getParticlesList\n    get_particles_named = getParticlesNamed\n    get_particles_dict = getParticlesDict\n    get_force_group_list = getForceGroupList\n    get_force_group_named = getForceGroupNamed\n    get_force_group_dict = getForceGroupDict\n    save_config = saveConfig\n    load_config = loadConfig\n    clear_to_initial = clearToInitial\n    soft_stop = softStop\n    soft_start = softStart\n    birth_litter = birthLitter\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/particles/ParticleEffect.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/4ffed8d5_ParticleEffect.json",
    "doc_id": "doc_67"
  }
}