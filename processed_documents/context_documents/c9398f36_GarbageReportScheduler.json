{
  "content": "from direct.showbase.GarbageReport import GarbageReport\nfrom direct.showbase.PythonUtil import serialNum\nfrom direct.task.TaskManagerGlobal import taskMgr\n\n\nclass GarbageReportScheduler:\n    \"\"\"Runs a garbage report every once in a while and logs the results.\"\"\"\n\n    def __init__(self, waitBetween=None, waitScale=None):\n        # waitBetween is in seconds\n        # waitScale is a multiplier for the waitBetween every time around\n        if waitBetween is None:\n            waitBetween = 30*60\n        if waitScale is None:\n            waitScale = 1.5\n        self._waitBetween = waitBetween\n        self._waitScale = waitScale\n        self._taskName = 'startScheduledGarbageReport-%s' % serialNum()\n        self._garbageReport = None\n        self._scheduleNextGarbageReport()\n\n    def getTaskName(self):\n        return self._taskName\n\n    def _scheduleNextGarbageReport(self, garbageReport=None):\n        if garbageReport:\n            # this report finished, wait a bit then start another\n            assert garbageReport is self._garbageReport\n            # garbagereport will clean itself up\n            self._garbageReport = None\n        # run another garbagereport after a delay\n        taskMgr.doMethodLater(self._waitBetween,\n                              self._runGarbageReport,\n                              self._taskName)\n        # and increase the delay every time around\n        self._waitBetween = self._waitBetween * self._waitScale\n\n    def _runGarbageReport(self, task):\n        # run a garbage report and schedule the next one after this one finishes\n        # give this job 3 times as many timeslices as normal-priority jobs\n        self._garbageReport = GarbageReport('ScheduledGarbageReport', threaded=True,\n                                            doneCallback=self._scheduleNextGarbageReport,\n                                            autoDestroy=True,\n                                            priority=GarbageReport.Priorities.Normal * 3)\n        return task.done\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/GarbageReportScheduler.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/c9398f36_GarbageReportScheduler.json",
    "doc_id": "doc_281"
  }
}