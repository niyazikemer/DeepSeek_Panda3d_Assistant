{
  "content": "\"\"\"A DirectCheckButton is a type of button that toggles between two states\nwhen clicked.  It also has a separate indicator that can be modified\nseparately.\n\nSee the :ref:`directcheckbutton` page in the programming manual for a more\nin-depth explanation and an example of how to use this class.\n\"\"\"\n\n__all__ = ['DirectCheckButton']\n\nfrom panda3d.core import PGFrameStyle, VBase4\nfrom .DirectButton import DirectButton\nfrom .DirectLabel import DirectLabel\n\n\nclass DirectCheckButton(DirectButton):\n    \"\"\"\n    DirectCheckButton(parent) - Create a DirectGuiWidget which responds\n    to mouse clicks by setting a state of on or off and execute a callback\n    function (passing that state through) if defined\n    \"\"\"\n\n    def __init__(self, parent = None, **kw):\n        # Inherits from DirectButton\n        # A Direct Frame can have:\n        # - A background texture (pass in path to image, or Texture Card)\n        # - A midground geometry item (pass in geometry)\n        # - A foreground text Node (pass in text string or Onscreen Text)\n        # For a direct button:\n        # Each button has 4 states (ready, press, rollover, disabled)\n        # The same image/geom/text can be used for all four states or each\n        # state can have a different text/geom/image\n        # State transitions happen automatically based upon mouse interaction\n        # Responds to click event and calls command if None\n\n        self.colors = None\n        optiondefs = (\n            ('indicatorValue', 0, self.setIndicatorValue),\n            # boxBorder defines the space created around the check box\n            ('boxBorder', 0, None),\n            # boxPlacement maps left, above, right, below\n            ('boxPlacement', 'left', None),\n            ('boxImage', None, None),\n            ('boxImageScale', 1, None),\n            ('boxImageColor', None, None),\n            ('boxRelief', 'sunken', None),\n        )\n        # Merge keyword options with default options\n        self.defineoptions(kw, optiondefs)\n        # Initialize superclasses\n        DirectButton.__init__(self, parent)\n        self.indicator = self.createcomponent(\"indicator\", (), None,\n                                              DirectLabel, (self,),\n                                              numStates = 2,\n                                              image = self['boxImage'],\n                                              image_scale = self['boxImageScale'],\n                                              image_color = self['boxImageColor'],\n                                              state = 'disabled',\n                                              text = ('X', 'X'),\n                                              relief = self['boxRelief'],\n                                              )\n\n        # Call option initialization functions\n        self.initialiseoptions(DirectCheckButton)\n        # After initialization with X giving it the correct size, put back space\n        if self['boxImage'] is None:\n            self.indicator['text'] = (' ', '*')\n            self.indicator['text_pos'] = (0, -.2)\n        else:\n            self.indicator['text'] = (' ', ' ')\n        if self['boxImageColor'] is not None and self['boxImage'] is not None:\n            self.colors = [VBase4(0, 0, 0, 0), self['boxImageColor']]\n            self.component('indicator')['image_color'] = VBase4(0, 0, 0, 0)\n\n    # Override the resetFrameSize of DirectGuiWidget inorder to provide space for label\n    def resetFrameSize(self):\n        self.setFrameSize(fClearFrame = 1)\n\n    def setFrameSize(self, fClearFrame = 0):\n\n        if self['frameSize']:\n            # Use user specified bounds\n            self.bounds = self['frameSize']\n            frameType = self.frameStyle[0].getType()\n            ibw = self.indicator['borderWidth']\n        else:\n            # Use ready state to compute bounds\n            frameType = self.frameStyle[0].getType()\n            if fClearFrame and frameType != PGFrameStyle.TNone:\n                self.frameStyle[0].setType(PGFrameStyle.TNone)\n                self.guiItem.setFrameStyle(0, self.frameStyle[0])\n                # To force an update of the button\n                self.guiItem.getStateDef(0)\n            # Clear out frame before computing bounds\n            self.getBounds()\n            # Restore frame style if necessary\n            if frameType != PGFrameStyle.TNone:\n                self.frameStyle[0].setType(frameType)\n                self.guiItem.setFrameStyle(0, self.frameStyle[0])\n\n            # Ok, they didn't set specific bounds,\n            #  let's add room for the label indicator\n            #  get the difference in height\n\n            ibw = self.indicator['borderWidth']\n            indicatorWidth = (self.indicator.getWidth() + (2*ibw[0]))\n            indicatorHeight = (self.indicator.getHeight() + (2*ibw[1]))\n            diff = (indicatorHeight + (2*self['boxBorder']) -\n                    (self.bounds[3] - self.bounds[2]))\n            # If background is smaller then indicator, enlarge background\n            if diff > 0:\n                if self['boxPlacement'] == 'left':            #left\n                    self.bounds[0] += -(indicatorWidth + (2*self['boxBorder']))\n                    self.bounds[3] += diff/2\n                    self.bounds[2] -= diff/2\n                elif self['boxPlacement'] == 'below':          #below\n                    self.bounds[2] += -(indicatorHeight+(2*self['boxBorder']))\n                elif self['boxPlacement'] == 'right':          #right\n                    self.bounds[1] += indicatorWidth + (2*self['boxBorder'])\n                    self.bounds[3] += diff/2\n                    self.bounds[2] -= diff/2\n                else:                                    #above\n                    self.bounds[3] += indicatorHeight + (2*self['boxBorder'])\n\n            # Else make space on correct side for indicator\n            else:\n                if self['boxPlacement'] == 'left':            #left\n                    self.bounds[0] += -(indicatorWidth + (2*self['boxBorder']))\n                elif self['boxPlacement'] == 'below':          #below\n                    self.bounds[2] += -(indicatorHeight + (2*self['boxBorder']))\n                elif self['boxPlacement'] == 'right':          #right\n                    self.bounds[1] += indicatorWidth + (2*self['boxBorder'])\n                else:                                    #above\n                    self.bounds[3] += indicatorHeight + (2*self['boxBorder'])\n\n        # Set frame to new dimensions\n        if ((frameType != PGFrameStyle.TNone) and\n            (frameType != PGFrameStyle.TFlat)):\n            bw = self['borderWidth']\n        else:\n            bw = (0, 0)\n        # Set frame to new dimensions\n        self.guiItem.setFrame(\n            self.bounds[0] - bw[0],\n            self.bounds[1] + bw[0],\n            self.bounds[2] - bw[1],\n            self.bounds[3] + bw[1])\n\n        # If they didn't specify a position, put it in the center of new area\n        if not self.indicator['pos']:\n            bbounds = self.bounds\n            lbounds = self.indicator.bounds\n            newpos = [0, 0, 0]\n\n            if self['boxPlacement'] == 'left':            #left\n                newpos[0] += bbounds[0]-lbounds[0] + self['boxBorder'] + ibw[0]\n                dropValue = (bbounds[3]-bbounds[2]-lbounds[3]+lbounds[2])/2 + self['boxBorder']\n                newpos[2] += (bbounds[3]-lbounds[3] + self['boxBorder'] -\n                              dropValue)\n            elif self['boxPlacement'] == 'right':            #right\n                newpos[0] += bbounds[1]-lbounds[1] - self['boxBorder'] - ibw[0]\n                dropValue = (bbounds[3]-bbounds[2]-lbounds[3]+lbounds[2])/2 + self['boxBorder']\n                newpos[2] += (bbounds[3]-lbounds[3] + self['boxBorder']\n                              - dropValue)\n            elif self['boxPlacement'] == 'above':            #above\n                newpos[2] += bbounds[3]-lbounds[3] - self['boxBorder'] - ibw[1]\n            else:                                      #below\n                newpos[2] += bbounds[2]-lbounds[2] + self['boxBorder'] + ibw[1]\n\n            self.indicator.setPos(newpos[0], newpos[1], newpos[2])\n\n    def commandFunc(self, event):\n        self['indicatorValue'] = 1 - self['indicatorValue']\n        if self.colors is not None:\n            self.component('indicator')['image_color'] = self.colors[self['indicatorValue']]\n\n        if self['command']:\n            # Pass any extra args to command\n            self['command'](*[self['indicatorValue']] + self['extraArgs'])\n\n    def setIndicatorValue(self):\n        self.component('indicator').guiItem.setState(self['indicatorValue'])\n        if self.colors is not None:\n            self.component('indicator')['image_color'] = self.colors[self['indicatorValue']]\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/gui/DirectCheckButton.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/a97813f6_DirectCheckButton.json",
    "doc_id": "doc_83"
  }
}