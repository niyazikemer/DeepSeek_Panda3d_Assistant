{
  "content": "\"\"\"\nAppShell provides a GUI application framework.\nThis is an adaption of AppShell.py found in Python and Tkinter Programming\nby John E. Grayson which is a streamlined adaptation of GuiAppD.py, originally\ncreated by Doug Hellmann (doughellmann@mindspring.com).\n\"\"\"\n\n__all__ = ['AppShell']\n\nfrom direct.showbase.DirectObject import DirectObject\nfrom . import Dial\nfrom . import Floater\nfrom . import Slider\nfrom . import EntryScale\nfrom . import VectorWidgets\nfrom . import ProgressBar\nimport Pmw\nimport tkinter as tk\nimport builtins\n\n\n# Create toplevel widget dictionary\nif not hasattr(builtins, \"widgetDict\"):\n    builtins.widgetDict = {}  # type: ignore[attr-defined]\n\n# Create toplevel variable dictionary\nif not hasattr(builtins, \"variableDict\"):\n    builtins.variableDict = {}  # type: ignore[attr-defined]\n\n\ndef resetWidgetDict():\n    builtins.widgetDict = {}\n\n\ndef resetVariableDict():\n    builtins.variableDict = {}\n\n\n# Inherit from MegaWidget instead of Toplevel so you can pass in a toplevel\n# to use as a container if you wish.  If no toplevel passed in, create one\nclass AppShell(Pmw.MegaWidget, DirectObject):\n    appversion      = '1.0'\n    appname         = 'Generic Application Frame'\n    copyright       = ('Copyright 2004 Walt Disney Imagineering.' +\n                       ' All Rights Reserved')\n    contactname     = 'Mark R. Mine'\n    contactphone    = '(818) 544-2921'\n    contactemail    = 'Mark.Mine@disney.com'\n\n    frameWidth      = 450\n    frameHeight     = 320\n    padx            = 5\n    pady            = 5\n    usecommandarea  = 0\n    usestatusarea   = 0\n    balloonState    = 'none'\n    panelCount      = 0\n\n    def __init__(self, parent = None, **kw):\n        optiondefs = (\n            ('title',          self.appname,        None),\n            ('padx',           1,                   Pmw.INITOPT),\n            ('pady',           1,                   Pmw.INITOPT),\n            ('framewidth',     self.frameWidth,     Pmw.INITOPT),\n            ('frameheight',    self.frameHeight,    Pmw.INITOPT),\n            ('usecommandarea', self.usecommandarea, Pmw.INITOPT),\n            ('usestatusarea',  self.usestatusarea,  Pmw.INITOPT),\n        )\n        self.defineoptions(kw, optiondefs)\n        # If no toplevel passed in, create one\n        if parent is None:\n            self.parent = tk.Toplevel()\n        else:\n            self.parent = parent\n        # Initialize the base class\n        Pmw.MegaWidget.__init__(self, self.parent)\n        # Set window size\n        self.parent.geometry('%dx%d' % (self.frameWidth, self.frameHeight))\n        self.parent.title(self['title'])\n        # Create unique id\n        AppShell.panelCount += 1\n        self.id = self.appname + '-' + repr(AppShell.panelCount)\n        # Create a dictionary in the widgetDict to hold this panel's widgets\n        self.widgetDict = builtins.widgetDict[self.id] = {}\n        # And one to hold this panel's variables\n        self.variableDict = builtins.variableDict[self.id] = {}\n        # Get handle to the toplevels hull\n        self._hull = self.component('hull')\n        # Initialize the application\n        self.appInit()\n        # create the interface\n        self.__createInterface()\n        # Set focus to ourselves\n        self.focus_set()\n        # initialize our options\n        self.initialiseoptions(AppShell)\n\n        self.pack(fill = tk.BOTH, expand = 1)\n\n    def __createInterface(self):\n        self.__createBalloon()\n        self.__createMenuBar()\n        self.__createDataArea()\n        self.__createCommandArea()\n        self.__createMessageBar()\n        self.__createAboutBox()\n        # Add binding for panel cleanup code\n        self.interior().bind('<Destroy>', self.onDestroy)\n        #\n        # Create the parts of the interface\n        # which can be modified by subclasses\n        #\n        self.createMenuBar()\n        self.createInterface()\n\n    def __createBalloon(self):\n        # Create the balloon help manager for the frame.\n        # Create the manager for the balloon help\n        self.__balloon = self.createcomponent('balloon', (), None,\n                                              Pmw.Balloon, (self._hull,))\n        self.__balloon.configure(state = self.balloonState)\n\n    def __createMenuBar(self):\n        self.menuFrame = tk.Frame(self._hull)\n        self.menuBar = self.createcomponent('menubar', (), None,\n                                            Pmw.MenuBar,\n                                            (self.menuFrame,),\n                                            hull_relief=tk.FLAT,\n                                            hull_borderwidth=0,\n                                            balloon=self.balloon())\n\n        self.menuBar.addmenu('Help', 'About %s' % self.appname, side = 'right')\n        self.menuBar.addmenu('File', 'File commands and Quit')\n        self.menuBar.pack(fill=tk.X, side = tk.LEFT)\n\n        # Force some space between pull down menus and other widgets\n        spacer = tk.Label(self.menuFrame, text = '   ')\n        spacer.pack(side = tk.LEFT, expand = 0)\n\n        self.menuFrame.pack(fill = tk.X)\n\n    def __createDataArea(self):\n        # Create data area where data entry widgets are placed.\n        self.dataArea = self.createcomponent('dataarea',\n                                             (), None,\n                                             tk.Frame, (self._hull,),\n                                             relief=tk.GROOVE,\n                                             bd=1)\n        self.dataArea.pack(side=tk.TOP, fill=tk.BOTH, expand=tk.YES,\n                           padx=self['padx'], pady=self['pady'])\n\n    def __createCommandArea(self):\n        # Create a command area for application-wide buttons.\n        self.__commandFrame = self.createcomponent('commandframe', (), None,\n                                                   tk.Frame,\n                                                   (self._hull,),\n                                                   relief=tk.SUNKEN,\n                                                   bd=1)\n        self.__buttonBox = self.createcomponent('buttonbox', (), None,\n                                                Pmw.ButtonBox,\n                                                (self.__commandFrame,),\n                                                padx=0, pady=0)\n        self.__buttonBox.pack(side=tk.TOP, expand=tk.NO, fill=tk.X)\n        if self['usecommandarea']:\n            self.__commandFrame.pack(side=tk.TOP,\n                                     expand=tk.NO,\n                                     fill=tk.X,\n                                     padx=self['padx'],\n                                     pady=self['pady'])\n\n    def __createMessageBar(self):\n        # Create the message bar area for help and status messages.\n        frame = self.createcomponent('bottomtray', (), None,\n                                     tk.Frame, (self._hull,), relief=tk.SUNKEN)\n        self.__messageBar = self.createcomponent('messagebar',\n                                                  (), None,\n                                                 Pmw.MessageBar,\n                                                 (frame,),\n                                                 #entry_width = 40,\n                                                 entry_relief=tk.SUNKEN,\n                                                 entry_bd=1,\n                                                 labelpos=None)\n        self.__messageBar.pack(side=tk.LEFT, expand=tk.YES, fill=tk.X)\n\n        self.__progressBar = ProgressBar.ProgressBar(\n            frame,\n            fillColor='slateblue',\n            doLabel=1,\n            width=150)\n        self.__progressBar.frame.pack(side=tk.LEFT, expand=tk.NO, fill=tk.NONE)\n\n        self.updateProgress(0)\n        if self['usestatusarea']:\n            frame.pack(side=tk.BOTTOM, expand=tk.NO, fill=tk.X)\n\n        self.__balloon.configure(statuscommand = \\\n                                 self.__messageBar.helpmessage)\n\n    def __createAboutBox(self):\n        Pmw.aboutversion(self.appversion)\n        Pmw.aboutcopyright(self.copyright)\n        Pmw.aboutcontact(\n            'For more information, contact:\\n %s\\n Phone: %s\\n Email: %s' % \\\n            (self.contactname, self.contactphone, self.contactemail))\n        self.about = Pmw.AboutDialog(self._hull,\n                                     applicationname=self.appname)\n        self.about.withdraw()\n\n    def toggleBalloon(self):\n        if self.toggleBalloonVar.get():\n            self.__balloon.configure(state = 'both')\n        else:\n            self.__balloon.configure(state = 'status')\n\n    def showAbout(self):\n        # Create the dialog to display about and contact information.\n        self.about.show()\n        self.about.focus_set()\n\n    def quit(self):\n        self.parent.destroy()\n\n    ### USER METHODS ###\n    # To be overridden\n    def appInit(self):\n        # Called before interface is created (should be overridden).\n        pass\n\n    def createInterface(self):\n        # Override this method to create the interface for the app.\n        pass\n\n    def onDestroy(self, event):\n        # Override this method with actions to be performed on panel shutdown\n        pass\n\n    def createMenuBar(self):\n        # Creates default menus.  Can be overridden or simply augmented\n        # Using button Add below\n        self.menuBar.addmenuitem('Help', 'command',\n                                 'Get information on application',\n                                 label='About...', command=self.showAbout)\n        self.toggleBalloonVar = tk.IntVar()\n        if self.balloonState == 'none':\n            self.toggleBalloonVar.set(0)\n        else:\n            self.toggleBalloonVar.set(1)\n        self.menuBar.addmenuitem('Help', 'checkbutton',\n                                 'Toggle balloon help',\n                                 label='Balloon help',\n                                 variable = self.toggleBalloonVar,\n                                 command=self.toggleBalloon)\n\n        self.menuBar.addmenuitem('File', 'command', 'Quit this application',\n                                label='Quit',\n                                command=self.quit)\n\n    # Getters\n    def interior(self):\n        # Retrieve the interior site where widgets should go.\n        return self.dataArea\n\n    def balloon(self):\n        # Retrieve the panel's balloon widget\n        return self.__balloon\n\n    def buttonBox(self):\n        # Retrieve the button box.\n        return self.__buttonBox\n\n    def messageBar(self):\n        # Retieve the message bar\n        return self.__messageBar\n\n    # Utility functions\n    def buttonAdd(self, buttonName, helpMessage=None,\n                  statusMessage=None, **kw):\n        # Add a button to the button box.\n        newBtn = self.__buttonBox.add(buttonName)\n        newBtn.configure(kw)\n        if helpMessage:\n            self.bind(newBtn, helpMessage, statusMessage)\n        return newBtn\n\n    def alignbuttons(self):\n        \"\"\" Make all buttons wide as widest \"\"\"\n        self.__buttonBox.alignbuttons()\n\n    def bind(self, child, balloonHelpMsg, statusHelpMsg=None):\n        # Bind a help message and/or status message to a widget.\n        self.__balloon.bind(child, balloonHelpMsg, statusHelpMsg)\n\n    def updateProgress(self, newValue=0, newMax=0):\n        # Used to update progress bar\n        self.__progressBar.updateProgress(newValue, newMax)\n\n    ## WIDGET UTILITY FUNCTIONS ##\n    def addWidget(self, category, text, widget):\n        self.widgetDict[category + '-' + text] = widget\n\n    def getWidget(self, category, text):\n        return self.widgetDict.get(category + '-' + text, None)\n\n    def addVariable(self, category, text, variable):\n        self.variableDict[category + '-' + text] = variable\n\n    def getVariable(self, category, text):\n        return self.variableDict.get(category + '-' + text, None)\n\n    def createWidget(self, parent, category, text, widgetClass,\n                     help, command, side, fill, expand, kw):\n        # Update kw to reflect user inputs\n        kw['text'] = text\n        # Create widget\n        widget = widgetClass(parent, **kw)\n        # Do this after so command isn't called on widget creation\n        widget['command'] = command\n        # Pack widget\n        widget.pack(side = side, fill = fill, expand = expand)\n        # Bind help\n        self.bind(widget, help)\n        # Record widget\n        self.addWidget(category, text, widget)\n        return widget\n\n    def newCreateLabeledEntry(self, parent, category, text, help = '',\n                              command = None, value = '',\n                              width = 12, relief = tk.SUNKEN,\n                              side = tk.LEFT, fill = tk.X, expand = 0):\n        \"\"\" createLabeledEntry(parent, category, text, [options]) \"\"\"\n        # Create labeled entry\n        frame = tk.Frame(parent)\n        variable = tk.StringVar()\n        variable.set(value)\n        label = tk.Label(frame, text = text)\n        label.pack(side = tk.LEFT, fill = tk.X, expand = 0)\n        entry = tk.Entry(frame, width = width, relief = relief,\n                         textvariable = variable)\n        entry.pack(side = tk.LEFT, fill = tk.X, expand = 1)\n        frame.pack(side = side, fill = tk.X, expand = expand)\n        if command:\n            entry.bind('<Return>', command)\n        # Add balloon help\n        self.bind(label, help)\n        self.bind(entry, help)\n        # Record widgets and variable\n        self.addWidget(category, text, entry)\n        self.addWidget(category, text + '-Label', label)\n        self.addVariable(category, text, variable)\n        return entry\n\n    def newCreateButton(self, parent, category, text,\n                        help = '', command = None,\n                        side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        \"\"\" createButton(parent, category, text, [options]) \"\"\"\n        # Create the widget\n        widget = self.createWidget(parent, category, text, tk.Button,\n                                   help, command, side, fill, expand, kw)\n        return widget\n\n    def newCreateCheckbutton(self, parent, category, text,\n                             help = '', command = None,\n                             initialState = 0, anchor = tk.W,\n                             side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        \"\"\" createCheckbutton(parent, category, text, [options]) \"\"\"\n        # Create the widget\n        widget = self.createWidget(parent, category, text, tk.Checkbutton,\n                                   help, command, side, fill, expand, kw)\n        # Perform extra customization\n        widget['anchor'] = anchor\n        variable = tk.BooleanVar()\n        variable.set(initialState)\n        self.addVariable(category, text, variable)\n        widget['variable'] = variable\n        return widget\n\n    def newCreateRadiobutton(self, parent, category, text, variable, value,\n                             command = None, help = '', anchor = tk.W,\n                             side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        \"\"\"\n        createRadiobutton(parent, category, text, variable, value, [options])\n        \"\"\"\n        # Create the widget\n        widget = self.createWidget(parent, category, text, tk.Radiobutton,\n                                   help, command, side, fill, expand, kw)\n        # Perform extra customization\n        widget['anchor'] = anchor\n        widget['value'] = value\n        widget['variable'] = variable\n        return widget\n\n    def newCreateFloater(self, parent, category, text,\n                         help = '', command = None,\n                         side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Create the widget\n        widget = self.createWidget(parent, category, text,\n                                   Floater.Floater,\n                                   help, command, side, fill, expand, kw)\n        return widget\n\n    def newCreateDial(self, parent, category, text,\n                      help = '', command = None,\n                      side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Create the widget\n        widget = self.createWidget(parent, category, text,\n                                   Dial.Dial,\n                                   help, command, side, fill, expand, kw)\n        return widget\n\n    def newCreateSider(self, parent, category, text,\n                       help = '', command = None,\n                       side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Create the widget\n        widget = self.createWidget(parent, category, text,\n                                   Slider.Slider,\n                                   help, command, side, fill, expand, kw)\n        return widget\n\n    def newCreateEntryScale(self, parent, category, text,\n                            help = '', command = None,\n                            side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Create the widget\n        widget = self.createWidget(parent, category, text,\n                                   EntryScale.EntryScale,\n                                   help, command, side, fill, expand, kw)\n        return widget\n\n    def newCreateVector2Entry(self, parent, category, text,\n                              help = '', command = None,\n                              side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Create the widget\n        widget = self.createWidget(parent, category, text,\n                                   VectorWidgets.Vector2Entry,\n                                   help, command, side, fill, expand, kw)\n\n    def newCreateVector3Entry(self, parent, category, text,\n                              help = '', command = None,\n                              side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Create the widget\n        widget = self.createWidget(parent, category, text,\n                                   VectorWidgets.Vector3Entry,\n                                   help, command, side, fill, expand, kw)\n        return widget\n\n    def newCreateColorEntry(self, parent, category, text,\n                            help = '', command = None,\n                            side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Create the widget\n        widget = self.createWidget(parent, category, text,\n                                   VectorWidgets.ColorEntry,\n                                   help, command, side, fill, expand, kw)\n        return widget\n\n    def newCreateOptionMenu(self, parent, category, text,\n                            help = '', command = None, items = [],\n                            labelpos = tk.W, label_anchor = tk.W,\n                            label_width = 16, menu_tearoff = 1,\n                            side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Create variable\n        variable = tk.StringVar()\n        if len(items) > 0:\n            variable.set(items[0])\n        # Update kw to reflect user inputs\n        kw['items'] = items\n        kw['label_text'] = text\n        kw['labelpos'] = labelpos\n        kw['label_anchor'] = label_anchor\n        kw['label_width'] = label_width\n        kw['menu_tearoff'] = menu_tearoff\n        kw['menubutton_textvariable'] = variable\n        # Create widget\n        widget = Pmw.OptionMenu(parent, **kw)\n        # Do this after so command isn't called on widget creation\n        widget['command'] = command\n        # Pack widget\n        widget.pack(side = side, fill = fill, expand = expand)\n        # Bind help\n        self.bind(widget.component('menubutton'), help)\n        # Record widget and variable\n        self.addWidget(category, text, widget)\n        self.addVariable(category, text, variable)\n        return widget\n\n    def newCreateComboBox(self, parent, category, text,\n                          help = '', command = None,\n                          items = [], state = tk.DISABLED, history = 0,\n                          labelpos = tk.W, label_anchor = tk.W,\n                          label_width = 16, entry_width = 16,\n                          side = tk.LEFT, fill = tk.X, expand = 0, **kw):\n        # Update kw to reflect user inputs\n        kw['label_text'] = text\n        kw['labelpos'] = labelpos\n        kw['label_anchor'] = label_anchor\n        kw['label_width'] = label_width\n        kw['entry_width'] = entry_width\n        kw['scrolledlist_items'] = items\n        kw['entryfield_entry_state'] = state\n        # Create widget\n        widget = Pmw.ComboBox(parent, **kw)\n        # Bind selection command\n        widget['selectioncommand'] = command\n        # Select first item if it exists\n        if len(items) > 0:\n            widget.selectitem(items[0])\n        # Pack widget\n        widget.pack(side = side, fill = fill, expand = expand)\n        # Bind help\n        self.bind(widget, help)\n        # Record widget\n        self.addWidget(category, text, widget)\n        return widget\n\n    def transformRGB(self, rgb, max = 1.0):\n        retval = '#'\n        for v in [rgb[0], rgb[1], rgb[2]]:\n            v = (v/max)*255\n            if v > 255:\n                v = 255\n            if v < 0:\n                v = 0\n            retval = \"%s%02x\" % (retval, int(v))\n        return retval\n\n\nclass TestAppShell(AppShell):\n    # Override class variables here\n    appname = 'Test Application Shell'\n    usecommandarea = 1\n    usestatusarea  = 1\n\n    def __init__(self, parent = None, **kw):\n        # Call superclass initialization function\n        AppShell.__init__(self)\n        self.initialiseoptions(TestAppShell)\n\n    def createButtons(self):\n        self.buttonAdd('Ok',\n                       helpMessage='Exit',\n                       statusMessage='Exit',\n                       command=self.quit)\n\n    def createMain(self):\n        self.label = self.createcomponent('label', (), None,\n                                          tk.Label,\n                                          (self.interior(),),\n                                          text='Data Area')\n        self.label.pack()\n        self.bind(self.label, 'Space taker')\n\n    def createInterface(self):\n        self.createButtons()\n        self.createMain()\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/tkwidgets/AppShell.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/342b5b21_AppShell.json",
    "doc_id": "doc_199"
  }
}