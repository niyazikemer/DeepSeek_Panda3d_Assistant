{
  "content": "from panda3d.core import NodePath\nfrom panda3d.physics import (\n    AngularForce,\n    AngularVectorForce,\n    ForceNode,\n    LinearCylinderVortexForce,\n    LinearDistanceForce,\n    LinearForce,\n    LinearFrictionForce,\n    LinearJitterForce,\n    LinearNoiseForce,\n    LinearSinkForce,\n    LinearSourceForce,\n    LinearVectorForce,\n)\nfrom direct.showbase.DirectObject import DirectObject\n\nfrom direct.directnotify import DirectNotifyGlobal\nimport sys\nimport warnings\n\n\nclass ForceGroup(DirectObject):\n\n    notify = DirectNotifyGlobal.directNotify.newCategory('ForceGroup')\n    id = 1\n\n    def __init__(self, name=None):\n        if name is None:\n            self.name = 'ForceGroup-%d' % ForceGroup.id\n            ForceGroup.id += 1\n        else:\n            self.name = name\n\n        self.node = ForceNode(self.name)\n        self.nodePath = NodePath(self.node)\n        self.fEnabled = 0\n\n        self.particleEffect = None\n\n    def cleanup(self):\n        self.node.clear()\n        self.nodePath.removeNode()\n        del self.nodePath\n        del self.node\n        del self.particleEffect\n\n    def enable(self):\n        \"\"\"Convenience function to enable all forces in force group\"\"\"\n        for i in range(self.node.getNumForces()):\n            f = self.node.getForce(i)\n            f.setActive(1)\n        self.fEnabled = 1\n\n    def disable(self):\n        \"\"\"Convenience function to disable all forces in force group\"\"\"\n        for i in range(self.node.getNumForces()):\n            f = self.node.getForce(i)\n            f.setActive(0)\n        self.fEnabled = 0\n\n    def isEnabled(self):\n        return self.fEnabled\n\n    def addForce(self, force):\n        self.node.addForce(force)\n        if self.particleEffect:\n            self.particleEffect.addForce(force)\n\n    def removeForce(self, force):\n        self.node.removeForce(force)\n        if self.particleEffect is not None:\n            self.particleEffect.removeForce(force)\n\n    # Get/set\n    def getName(self):\n        warnings.warn(\"Deprecated: access .name directly instead.\", DeprecationWarning, stacklevel=2)\n        return self.name\n\n    def getNode(self):\n        return self.node\n\n    def getNodePath(self):\n        return self.nodePath\n\n    # Utility functions\n    def __getitem__(self, index):\n        numForces = self.node.getNumForces()\n        if index < 0 or index >= numForces:\n            raise IndexError\n        return self.node.getForce(index)\n\n    def __len__(self):\n        return self.node.getNumForces()\n\n    def asList(self):\n        l = []\n        for i in range(self.node.getNumForces()):\n            l.append(self.node.getForce(i))\n        return l\n\n    def printParams(self, file = sys.stdout, targ = 'self'):\n        file.write('# Force parameters\\n')\n        for i in range(self.node.getNumForces()):\n            f = self.node.getForce(i)\n            fname = 'force%d' % i\n            if isinstance(f, LinearForce):\n                amplitude = f.getAmplitude()\n                massDependent = f.getMassDependent()\n                if isinstance(f, LinearCylinderVortexForce):\n                    file.write(fname + ' = LinearCylinderVortexForce(%.4f, %.4f, %.4f, %.4f, %d)\\n' % (f.getRadius(), f.getLength(), f.getCoef(), amplitude, massDependent))\n                elif isinstance(f, LinearDistanceForce):\n                    radius = f.getRadius()\n                    falloffType = f.getFalloffType()\n                    ftype = 'FTONEOVERR'\n                    if falloffType == LinearDistanceForce.FTONEOVERR:\n                        ftype = 'FTONEOVERR'\n                    elif falloffType == LinearDistanceForce.FTONEOVERRSQUARED:\n                        ftype = 'FTONEOVERRSQUARED'\n                    elif falloffType == LinearDistanceForce.FTONEOVERRCUBED:\n                        ftype = 'FTONEOVERRCUBED'\n                    forceCenter = f.getForceCenter()\n                    if isinstance(f, LinearSinkForce):\n                        file.write(fname + ' = LinearSinkForce(Point3(%.4f, %.4f, %.4f), LinearDistanceForce.%s, %.4f, %.4f, %d)\\n' % (forceCenter[0], forceCenter[1], forceCenter[2], ftype, radius, amplitude, massDependent))\n                    elif isinstance(f, LinearSourceForce):\n                        file.write(fname + ' = LinearSourceForce(Point3(%.4f, %.4f, %.4f), LinearDistanceForce.%s, %.4f, %.4f, %d)\\n' % (forceCenter[0], forceCenter[1], forceCenter[2], ftype, radius, amplitude, massDependent))\n                elif isinstance(f, LinearFrictionForce):\n                    file.write(fname + ' = LinearFrictionForce(%.4f, %.4f, %d)\\n' % (f.getCoef(), amplitude, massDependent))\n                elif isinstance(f, LinearJitterForce):\n                    file.write(fname + ' = LinearJitterForce(%.4f, %d)\\n' % (amplitude, massDependent))\n                elif isinstance(f, LinearNoiseForce):\n                    file.write(fname + ' = LinearNoiseForce(%.4f, %d)\\n' % (amplitude, massDependent))\n                elif isinstance(f, LinearVectorForce):\n                    vec = f.getLocalVector()\n                    file.write(fname + ' = LinearVectorForce(Vec3(%.4f, %.4f, %.4f), %.4f, %d)\\n' % (vec[0], vec[1], vec[2], amplitude, massDependent))\n                mask = f.getVectorMasks()\n                file.write(fname + '.setVectorMasks(%d, %d, %d)\\n' % (mask[0],mask[1],mask[2]))\n            elif isinstance(f, AngularForce):\n                if isinstance(f, AngularVectorForce):\n                    vec = f.getQuat()\n                    file.write(fname + ' = AngularVectorForce(Quat(%.4f, %.4f, %.4f, %.4f))\\n' % (vec[0], vec[1], vec[2], vec[3]))\n            file.write(fname + '.setActive(%d)\\n' % f.getActive())\n            file.write(targ + '.addForce(%s)\\n' % fname)\n\n    is_enabled = isEnabled\n    get_node = getNode\n    get_node_path = getNodePath\n    as_list = asList\n    print_params = printParams\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/particles/ForceGroup.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/c074401f_ForceGroup.json",
    "doc_id": "doc_72"
  }
}