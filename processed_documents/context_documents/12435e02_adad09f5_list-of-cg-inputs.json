{
  "content": "List of Possible Cg Shader Inputs\n\nCaution\n\nSupport for Cg shaders will be deprecated in an upcoming version of Panda3D.\n\nIn many cases, it is desirable to access information from the render state or from the 3-D transformation of the node that is currently being rendered. Instead of having to pass all this information manually, it is possible to name your variables in a special way that Panda3D will recognize and automatically populate with the relevant data.\n\nThe following table describes the inputs that can be used in Cg shaders.\n\nUsing Custom Shader Inputs\n\nAs of Panda3D 1.8.0, the capabilities for passing numeric shader inputs have been greatly enhanced. The available input types are as follows:\n\nVec4\n- Vec3\n- Vec2\n- Point4\n- Point3\n- Point2\n- Mat4\n- Mat3\n- PTALMatrix4f\n- PTALMatrix3f\n- PTALVecBase4f\n- PTALVecBase3f\n- PTALVecBase2f\n- PTAFloat\n- PTADouble\n\nFor definition let us consider the shader parameter float3. It's type is float and format is Vec3 (meaning it can hold 3 elements) and a float3x3 input is of type float and format Mat3 (meaning it can hold 9 elements)\n\nThe main concept of the shader inputs is that the Cg input format and type is independent to the Panda3D input. The only condition is that the number of elements passed by the user through the setShaderInput() function of Panda3D and the number of elements expected by the shader input should be the same. For example, a parameter uniform float4x4 mat[4] (total of 16*4 elements) could be set with: (the below list is just a sample and there are more ways to represent it)\n\nsetShaderInput(\"input_name\",PTALMat4f[4])\nsetShaderInput(PTALVecBase4f[16])\nsetShaderInput(PTAFloat[16*4])\nsetShaderInput(PTADouble[16*4])\n\nBut for some Cg input types there is no corresponding Panda3D type such as float3x2(Panda3D does not have a corresponding Mat3x2 class) Hence these input types can be initiated row-wise as\n\n1 2 3\n\n4 5 6\n\nThis row wise input can be sent to the Cg shader in any of the following ways: (Note that the below list is just a sample and there are more ways to represent it)\n\nsetShaderInput(PTAFloat[6])\nsetShaderInput(PTADouble[6])\nsetShaderInput(PTALVecBase3f[2])\nsetShaderInput(PTALVecBase2f[3])\n\nNow, the issue of common input types such as float, double, int, long. The GPU registers generally can handle only floats. Hence even if we do send a double it will be automatically type casted into float. Hence for such type of inputs we can use above types.\n\nFor example, input types such as\n\nfloat3 var\nbool3 var\nhalf3 var\ndouble3 var\nfixed3 var\nint3 var\n\nCan be sent to your Cg shader program by (the below list is just a sample and there are more ways to represent it)\n\nsetShaderInput(PTAFloat[3])\nsetShaderInput(PTADouble[3])\n\nBelow is a sample code snippet that shows how you can use the new shader inputs.\n\nfrom panda3d.core import Vec4\nvec4 = Vec4(0.0,1.0,0.0,1.0)\nmyModel.setShaderInput(\"Inputs.vec4\",vec4)\n\nFirst import the necessary header to use the type of input. In our case it's .Vec4. The next statement shows a Vec4 input type. Then set the Vec4 as a shader input to your model.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/adad09f5_list-of-cg-inputs.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/12435e02_adad09f5_list-of-cg-inputs.json",
    "doc_id": "doc_580"
  }
}