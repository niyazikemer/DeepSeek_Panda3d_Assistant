{
  "content": "\"\"\"Contains the OnScreenDebug class.\"\"\"\n\n__all__ = ['OnScreenDebug']\n\nfrom panda3d.core import (\n    ConfigVariableBool,\n    ConfigVariableDouble,\n    ConfigVariableString,\n    TextNode,\n    Vec4,\n)\n\nfrom direct.gui import OnscreenText\nfrom direct.directtools import DirectUtil\n\n\nclass OnScreenDebug:\n\n    enabled = ConfigVariableBool(\"on-screen-debug-enabled\", False)\n\n    def __init__(self):\n        self.onScreenText = None\n        self.frame = 0\n        self.text = \"\"\n        self.data = {}\n\n    def load(self):\n        if self.onScreenText:\n            return\n\n        fontPath = ConfigVariableString(\"on-screen-debug-font\", \"cmtt12\").value\n        fontScale = ConfigVariableDouble(\"on-screen-debug-font-scale\", 0.05).value\n\n        color = {\n            \"black\": Vec4(0, 0, 0, 1),\n            \"white\": Vec4(1, 1, 1, 1),\n        }\n        fgColor = color[ConfigVariableString(\"on-screen-debug-fg-color\", \"white\").value]\n        bgColor = color[ConfigVariableString(\"on-screen-debug-bg-color\", \"black\").value]\n        fgColor.setW(ConfigVariableDouble(\"on-screen-debug-fg-alpha\", 0.85).value)\n        bgColor.setW(ConfigVariableDouble(\"on-screen-debug-bg-alpha\", 0.85).value)\n\n        font = base.loader.loadFont(fontPath)\n        if not font.isValid():\n            print(\"failed to load OnScreenDebug font %s\" % fontPath)\n            font = TextNode.getDefaultFont()\n        self.onScreenText = OnscreenText.OnscreenText(\n                parent = base.a2dTopLeft, pos = (0.0, -0.1),\n                fg=fgColor, bg=bgColor, scale = (fontScale, fontScale, 0.0),\n                align = TextNode.ALeft, mayChange = 1, font = font)\n        # Make sure readout is never lit or drawn in wireframe\n        DirectUtil.useDirectRenderStyle(self.onScreenText)\n\n    def render(self):\n        if not self.enabled:\n            return\n        if not self.onScreenText:\n            self.load()\n        self.onScreenText.clearText()\n        for k, v in sorted(self.data.items()):\n            if v[0] == self.frame:\n                # It was updated this frame (key equals value):\n                #isNew = \" is\"\n                isNew = \"=\"\n            else:\n                # This data is not for the current\n                # frame (key roughly equals value):\n                #isNew = \"was\"\n                isNew = \"~\"\n            value = v[1]\n            if isinstance(value, float):\n                value = \"% 10.4f\"%(value,)\n            # else: other types will be converted to str by the \"%s\"\n            self.onScreenText.appendText(\"%20s %s %-44s\\n\"%(k, isNew, value))\n        self.onScreenText.appendText(self.text)\n        self.frame += 1\n\n    def clear(self):\n        self.text = \"\"\n        if self.onScreenText:\n            self.onScreenText.clearText()\n\n    def add(self, key, value):\n        self.data[key] = (self.frame, value)\n        return 1 # to allow assert onScreenDebug.add(\"foo\", bar)\n\n    def has(self, key):\n        return key in self.data\n\n    def remove(self, key):\n        del self.data[key]\n\n    def removeAllWithPrefix(self, prefix):\n        toRemove = []\n        for key in list(self.data.keys()):\n            if len(key) >= len(prefix):\n                if key[:len(prefix)] == prefix:\n                    toRemove.append(key)\n        for key in toRemove:\n            self.remove(key)\n\n    def append(self, text):\n        self.text += text\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/OnScreenDebug.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/a76bfde3_OnScreenDebug.json",
    "doc_id": "doc_262"
  }
}