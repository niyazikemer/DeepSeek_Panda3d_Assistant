{
  "content": "Bullet Collision Filtering\n\nBy default all Bullet collision objects collide with all other Bullet collision objects. Here the term \"collision objects\" refers to objects which are derived from .BulletBodyNode, namely .BulletRigidBodyNode, .BulletGhostNode, and .BulletSoftBodyNode.\n\nBullet collision objects won't collide with visible geometry, that is objects of type .GeomNode!\n\nSometime we need more control over who collides with whom. This can be achieved by setting up collision filtering properly. Collision filtering is done using bitmasks, which get assigned to every collision object.\n\nBit Masks\n\nBullet makes use of the regular Panda3D collide masks, which are instances of .BitMask32. Two objects collide if the two masks have at least one bit in common. The following example shows a selection of common ways to set up a bit mask. For more information please refer to the manual page on collision-bitmasks.\n\npython\n\nfrom panda3d.core import BitMask32\n\nmask1 = BitMask32.allOn()\nmask2 = BitMask32.allOff()\nmask3 = BitMask32.bit(2)\nmask4 = BitMask32.bit(5)\nmask5 = BitMask32(0x3)\n\ncpp\n\n#include \"panda3d/bitMask.h\"\n\nBitMask32 mask1 = BitMask32::all_on();\nBitMask32 mask2 = BitMask32::all_off();\nBitMask32 mask3 = BitMask32::bit(2);\nBitMask32 mask4 = BitMask32::bit(5);\nBitMask32 mask5 = BitMask32(0x3);\n\nGiven the above bit masks we would get the following results for collision:\n\nmask1 and mask2 = false\nmask1 vs. mask3 = true\nmask3 vs. mask4 = false\nmask3 vs. mask5 = true\nmask4 vs. mask5 = false\n\nGroup Masks\n\nSometimes BitMasks alone are not flexible enough to represent the relationships between a large number of groups of objects. Group masks are similar to bit masks in that each object belongs to a group, but instead of collisions only occurring between objects that belong to the same group, collision relationships are instead represented by a collision matrix. This means that a larger number of groups can be represented in the same 32 bits of a .BitMask32.\n\nTo use group mask filtering instead of the default bit mask filtering mentioned above, set the bullet-filter-algorithm configuration variable to groups-mask. The default collision matrix is set to only collide objects that are in the same group. As you make changes, the collision matrix is kept symmetrical along the line of the diagonal for you. So if you set Group 0 to collide with Group 1, then Group 1 will also automatically collide with Group 0.\n\nThe following collision matrix shows that the only collisions that occur are between group 1 and group 2, and group 2 with itself.\n\n\\ Group 0 Group 1 Group 2 Group 0 False False False Group 1 False True Group 2 True\n\nThe following code segment shows how this matrix is represented in code.\n\npython\n\n# Group 0 never collides\nworld.setGroupCollisionFlag(0, 0, False)\nworld.setGroupCollisionFlag(0, 1, False)\nworld.setGroupCollisionFlag(0, 2, False)\n\n# Group 1 only collides with Group 2\nworld.setGroupCollisionFlag(1, 1, False)\nworld.setGroupCollisionFlag(1, 2, True)\n\n# Group 2 only collides with itself\nworld.setGroupCollisionFlag(2, 2, True)\n\ncpp\n\n// Group 0 never collides\nphysics_world->set_group_collision_flag(0, 0, false);\nphysics_world->set_group_collision_flag(0, 1, false);\nphysics_world->set_group_collision_flag(0, 2, false);\n\n// Group 1 only collides with Group 2\nphysics_world->set_group_collision_flag(1, 1, false);\nphysics_world->set_group_collision_flag(1, 2, true);\n\n// Group 2 only collides with itself\nphysics_world->set_group_collision_flag(2, 2, true);\n\nPlease note that this group matrix is ignored by queries <queries>, which take a mask that directly indicates which groups to match against.\n\nGroup Assignment\n\nThe example below shows a typical setup for a rigid body. Only the last line of the code block is new. Here we set the collide mask which specifies which collision groups the object belongs to.\n\npython\n\nshape = shape = BulletBoxShape(Vec3(0.5, 0.5, 0.5))\n\nbody = BulletRigidBodyNode('Body')\nbody.addShape(shape)\n\nworld.attachRigidBody(body)\n\nbodyNP = self.worldNP.attachNewNode(body)\nbodyNP.setPos(0, 0, -1)\n\n# Set it to be a part of group 0\nbodyNP.setCollideMask(BitMask32.bit(0))\n\ncpp\n\nBulletBoxShape *box_shape = new BulletBoxShape(LVecBase3(0.5, 0.5, 0.5));\nBulletRigidBodyNode *body_rigid_node = new BulletRigidBodyNode(\"Body\");\nbody_rigid_node->add_shape(box_shape);\nphysics_world->attach(box_rigid_node);\n\nNodePath np_body = window->get_render().attach_new_node(box_rigid_node);\nnp_body.set_pos(0, 0, 2);\n\n// Set it to be a part of group 0\nnp_body.set_collide_mask(BitMask32::bit(0));\n\nPandaNodes have two kinds of collide masks, a \"from\" collide mask and an \"into\" collide mask. Panda3D's internal collision system requires both masks set, but when using Bullet physics only the \"into\" collide mask is used. The following line is an alternate way to set the collide mask:\n\npython\n\nbodyNP.node().setIntoCollideMask(mask)\n\ncpp\n\nnp_box.node()->set_into_collide_mask(mask);\n\nThis way of setting collide masks can be used for rigid bodies and ghost objects. Soft body collisions (and soft body vs. rigid body collisions) are more complex. Please see the manual pages about soft body configuration for details.\n\nMultiple Group Assignment\n\nIt it is also possible for an object to be part of multiple groups. The object is considered to collide with another object if it does so as part of any of the individual groups that it is a member of.\n\nTo make an object part of multiple groups, use the bitwise OR operator to combine multiple bitmasks.\n\npython\n\n# Set it to be a part of groups 0 and 2\nbodyNP.setCollideMask(BitMask32.bit(0) | BitMask32.bit(2))\n\ncpp\n\n// Set it to be a part of groups 0 and 2\nnp_body.set_collide_mask(BitMask32::bit(0) | BitMask32::bit(2));",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/cadceabb_collision-filtering.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/d4378174_cadceabb_collision-filtering.json",
    "doc_id": "doc_726"
  }
}