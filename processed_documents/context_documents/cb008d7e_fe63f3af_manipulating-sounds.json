{
  "content": "Manipulating Sounds\n\nLooping a Sound\n\nTo cause a sound to loop (i.e., cause it to repeat once it is finished playing) do the following:\n\npython\n\nmySound.setLoop(True)\nmySound.play()\n\ncpp\n\nmySound->set_loop(true);\nmySound->play();\n\nTo stop a sound from looping pass False in the ~.AudioSound.set_loop() function.\n\npython\n\nmySound.setLoop(False)\n\ncpp\n\nmySound->set_loop(false);\n\nSounds can also be looped for a certain number of times:\n\npython\n\nmySound.setLoopCount(n)\n\ncpp\n\nmySound->set_loop_count(n);\n\nWhere 'n' can be any positive integer. 0 will cause a sound to loop forever. 1 will cause a sound to play only once. >1 will cause a sound to loop that many times.\n\nNote\n\nSetting a sound's loop count to 0 or >1 will automatically set a sound's loop flag to true.\n\nNotes on Looping Sounds Seamlessly\n\nLooping a sound seamlessly should be as simple as loading the sound, then calling ~.AudioSound.set_loop() and ~.AudioSound.play(). However, occasionally Panda users have had difficulty getting sounds to loop seamlessly. The problems have been traced to three(!) different causes:\n\nSome MP3 encoders contain a bug where they add blank space at the end of the sound. This causes a skip during looping. Try using a wav instead.\n\nSome have tried using Sound Intervals to create a loop. Unfortunately, sound intervals depend on Panda's Thread to restart the sound, and if the CPU is is busy, there's a skip. This is not a seamless method, in general. Use ~.AudioSound.set_loop() instead.\n\nThere is a bug in Miles sound system, which requires a workaround in Panda3D. At one time, the workaround was causing problems with FMOD, until we devised a new workaround. This bug no longer exists, you can ignore it.\n\nSo the easiest way to get a reliable looping sound is to use wav files, and to use ~.AudioSound.set_loop(), not sound intervals. Of course, when it comes time to ship your game, you can convert your sounds to mp3, but before you do, test your mp3 encoder to see if it contains the blank-space bug.\n\nCueing Time\n\nThere are ~.AudioSound.get_time(), ~.AudioSound.set_time() and ~.AudioSound.length() functions for sounds. These will respectively, report the current time position, set the current time position and report the length. All these are in seconds.\n\npython\n\nmySound.length()\n\ncpp\n\nmySound->length();\n\nwill return the length of a sound file in seconds.\n\npython\n\nmySound.getTime()\n\ncpp\n\nmySound->get_time();\n\nwill get the current time the 'playback head' of a sound is at in seconds.\n\npython\n\nmySound.setTime(n)\n\ncpp\n\nmySound->set_time(n);\n\nwill set the 'playhead head' of a sound to n (where is seconds).\n\nCaution\n\nWhen using the default OpenAL back-end, setting the time will not take effect immediately. You will need to call ~.AudioSound.play() to restart the sound at the configured position.\n\nChanging Playback Speed\n\nTo change a sound's playback speed, use:\n\npython\n\nmySound.setPlayRate(n)\n\ncpp\n\nmySound->set_play_rate(n);\n\nWhere n is any float.\n\nNegative numbers will play a sound backwards. Passing the value 0 will pause the sound.\n\nYou can also get a sound's play rate with:\n\npython\n\nmySound.getPlayRate()\n\ncpp\n\nmySound->get_play_rate();",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/fe63f3af_manipulating-sounds.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/cb008d7e_fe63f3af_manipulating-sounds.json",
    "doc_id": "doc_466"
  }
}