{
  "content": "The Virtual File System\n\nGeneral file reading in Panda is handled by the Virtual File System.\n\nAlthough it presents the files and directories that it provides access to as a single, unbroken file system, it can in fact include files from multiple sources (such as multifiles) in the hierarchy, regardless of the underlying structure.\n\nThis has the advantage of allowing one to access files and directories without worrying overmuch about where they actually reside, and even access Multifile archives as a directory hierarchy.\n\npython\n\nPython Interface\n\nPanda3D offers a replacement for the Python file module that supports the virtual file system. You can find it in direct.stdpy.file. The interface is exactly the same as Python's, so it's safe to put this import above all the files where you want to use the open() function:\n\nfrom direct.stdpy.file import *\n\nThis module reimplements Python's file I/O mechanisms using Panda constructs. This enables Python to interface more easily with Panda's virtual file system, and it also better-supports Panda's SIMPLE_THREADS model, by avoiding blocking all threads while waiting for I/O to complete.\n\nBesides the ~direct.stdpy.file.open() call, this module also contains replacements for various other functions provided by the Python os and os.path modules. See the API reference page <direct.stdpy.file> for a full listing.\n\nNote\n\nThis section is incomplete.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/c8f13f02_virtual-file-system.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/07c63f10_c8f13f02_virtual-file-system.json",
    "doc_id": "doc_383"
  }
}