{
  "content": "AI Repositories\n\nAI Servers are clients that reside on a server rather than on the end users' client machines. An AI server (usually called AI Repository) is used to create distributed objects which are usually used to handle game logic that should not be run by end user clients.\n\nIn networked games, most of the game logic should be handled by the server. Clients shouldn\u2019t be trusted as it\u2019s not possible to ensure that they haven\u2019t been compromised in one way or another.\n\nSimilar to the server repositories, for AI repositories most of the low-level networking code is neatly hidden by Panda3D which makes setting up a basic AI server rather simple too. Though rather than having a dedicated AIRepository class, we have to use the .ClientRepository as, as stated before, the AI repository is nothing else than a client.\n\nClientRepository.__init__(\n    self,\n    dcFileNames = dcFileNames,\n    dcSuffix = 'AI',\n    threadedNet = True)\n\nThe setup is quite similar to the one of a normal client repository which we will take a look at in the next sections. The main difference is that for an AI repository we pass the dcSuffix = \u2018AI\u2019 to the .ClientRepository initialization. This makes sure that the correct definitions of the DC definition file will be used. Another method that should be specifically defined in an AI Repository is the following.\n\ndef deallocateChannel(self, doID):\n    print(\"Client left us: \", doID)\n\nThis function will be called whenever a client has disconnected and gives us the chance to react to its disconnection.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/47963ea2_ai-repositories.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/d5d9e7c2_47963ea2_ai-repositories.json",
    "doc_id": "doc_420"
  }
}