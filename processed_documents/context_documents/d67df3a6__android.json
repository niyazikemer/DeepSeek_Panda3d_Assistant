{
  "content": "\"\"\"Internal support module for Android builds.\"\"\"\n\nimport xml.etree.ElementTree as ET\n\nfrom ._proto.targeting_pb2 import Abi\nfrom ._proto.config_pb2 import BundleConfig # pylint: disable=unused-import\nfrom ._proto.files_pb2 import NativeLibraries # pylint: disable=unused-import\nfrom ._proto.Resources_pb2 import ResourceTable # pylint: disable=unused-import\nfrom ._proto.Resources_pb2 import XmlNode\n\n\nAbiAlias = Abi.AbiAlias\n\n\ndef str_resource(id):\n    def compile(attrib, manifest):\n        attrib.resource_id = id\n    return compile\n\n\ndef int_resource(id):\n    def compile(attrib, manifest):\n        attrib.resource_id = id\n        if attrib.value.startswith('0x') or attrib.value.startswith('0X'):\n            attrib.compiled_item.prim.int_hexadecimal_value = int(attrib.value, 16)\n        else:\n            attrib.compiled_item.prim.int_decimal_value = int(attrib.value)\n    return compile\n\n\ndef bool_resource(id):\n    def compile(attrib, manifest):\n        attrib.resource_id = id\n        attrib.compiled_item.prim.boolean_value = {\n            'true': True, '1': True, 'false': False, '0': False\n        }[attrib.value]\n    return compile\n\n\ndef enum_resource(id, *values):\n    def compile(attrib, manifest):\n        attrib.resource_id = id\n        attrib.compiled_item.prim.int_decimal_value = values.index(attrib.value)\n    return compile\n\n\ndef flag_resource(id, **values):\n    def compile(attrib, manifest):\n        attrib.resource_id = id\n        bitmask = 0\n        flags = attrib.value.split('|')\n        for flag in flags:\n            bitmask |= values[flag]\n        attrib.compiled_item.prim.int_hexadecimal_value = bitmask\n    return compile\n\n\ndef ref_resource(id):\n    def compile(attrib, manifest):\n        assert attrib.value[0] == '@'\n        ref_type, ref_name = attrib.value[1:].split('/')\n        attrib.resource_id = id\n        attrib.compiled_item.ref.name = ref_type + '/' + ref_name\n\n        if ref_type == 'android:style':\n            attrib.compiled_item.ref.id = ANDROID_STYLES[ref_name]\n        elif ':' not in ref_type:\n            attrib.compiled_item.ref.id = manifest.register_resource(ref_type, ref_name)\n        else:\n            print(f'Warning: unhandled AndroidManifest.xml reference \"{attrib.value}\"')\n    return compile\n\n\n# See data/res/values/public.xml\nANDROID_STYLES = {\n    'Animation': 0x01030000,\n    'Animation.Activity': 0x01030001,\n    'Animation.Dialog': 0x01030002,\n    'Animation.Translucent': 0x01030003,\n    'Animation.Toast': 0x01030004,\n    'Theme': 0x01030005,\n    'Theme.NoTitleBar': 0x01030006,\n    'Theme.NoTitleBar.Fullscreen': 0x01030007,\n    'Theme.Black': 0x01030008,\n    'Theme.Black.NoTitleBar': 0x01030009,\n    'Theme.Black.NoTitleBar.Fullscreen': 0x0103000a,\n    'Theme.Dialog': 0x0103000b,\n    'Theme.Light': 0x0103000c,\n    'Theme.Light.NoTitleBar': 0x0103000d,\n    'Theme.Light.NoTitleBar.Fullscreen': 0x0103000e,\n    'Theme.Translucent': 0x0103000f,\n    'Theme.Translucent.NoTitleBar': 0x01030010,\n    'Theme.Translucent.NoTitleBar.Fullscreen': 0x01030011,\n    'Widget': 0x01030012,\n    'Widget.AbsListView': 0x01030013,\n    'Widget.Button': 0x01030014,\n    'Widget.Button.Inset': 0x01030015,\n    'Widget.Button.Small': 0x01030016,\n    'Widget.Button.Toggle': 0x01030017,\n    'Widget.CompoundButton': 0x01030018,\n    'Widget.CompoundButton.CheckBox': 0x01030019,\n    'Widget.CompoundButton.RadioButton': 0x0103001a,\n    'Widget.CompoundButton.Star': 0x0103001b,\n    'Widget.ProgressBar': 0x0103001c,\n    'Widget.ProgressBar.Large': 0x0103001d,\n    'Widget.ProgressBar.Small': 0x0103001e,\n    'Widget.ProgressBar.Horizontal': 0x0103001f,\n    'Widget.SeekBar': 0x01030020,\n    'Widget.RatingBar': 0x01030021,\n    'Widget.TextView': 0x01030022,\n    'Widget.EditText': 0x01030023,\n    'Widget.ExpandableListView': 0x01030024,\n    'Widget.ImageWell': 0x01030025,\n    'Widget.ImageButton': 0x01030026,\n    'Widget.AutoCompleteTextView': 0x01030027,\n    'Widget.Spinner': 0x01030028,\n    'Widget.TextView.PopupMenu': 0x01030029,\n    'Widget.TextView.SpinnerItem': 0x0103002a,\n    'Widget.DropDownItem': 0x0103002b,\n    'Widget.DropDownItem.Spinner': 0x0103002c,\n    'Widget.ScrollView': 0x0103002d,\n    'Widget.ListView': 0x0103002e,\n    'Widget.ListView.White': 0x0103002f,\n    'Widget.ListView.DropDown': 0x01030030,\n    'Widget.ListView.Menu': 0x01030031,\n    'Widget.GridView': 0x01030032,\n    'Widget.WebView': 0x01030033,\n    'Widget.TabWidget': 0x01030034,\n    'Widget.Gallery': 0x01030035,\n    'Widget.PopupWindow': 0x01030036,\n    'MediaButton': 0x01030037,\n    'MediaButton.Previous': 0x01030038,\n    'MediaButton.Next': 0x01030039,\n    'MediaButton.Play': 0x0103003a,\n    'MediaButton.Ffwd': 0x0103003b,\n    'MediaButton.Rew': 0x0103003c,\n    'MediaButton.Pause': 0x0103003d,\n    'TextAppearance': 0x0103003e,\n    'TextAppearance.Inverse': 0x0103003f,\n    'TextAppearance.Theme': 0x01030040,\n    'TextAppearance.DialogWindowTitle': 0x01030041,\n    'TextAppearance.Large': 0x01030042,\n    'TextAppearance.Large.Inverse': 0x01030043,\n    'TextAppearance.Medium': 0x01030044,\n    'TextAppearance.Medium.Inverse': 0x01030045,\n    'TextAppearance.Small': 0x01030046,\n    'TextAppearance.Small.Inverse': 0x01030047,\n    'TextAppearance.Theme.Dialog': 0x01030048,\n    'TextAppearance.Widget': 0x01030049,\n    'TextAppearance.Widget.Button': 0x0103004a,\n    'TextAppearance.Widget.IconMenu.Item': 0x0103004b,\n    'TextAppearance.Widget.EditText': 0x0103004c,\n    'TextAppearance.Widget.TabWidget': 0x0103004d,\n    'TextAppearance.Widget.TextView': 0x0103004e,\n    'TextAppearance.Widget.TextView.PopupMenu': 0x0103004f,\n    'TextAppearance.Widget.DropDownHint': 0x01030050,\n    'TextAppearance.Widget.DropDownItem': 0x01030051,\n    'TextAppearance.Widget.TextView.SpinnerItem': 0x01030052,\n    'TextAppearance.WindowTitle': 0x01030053,\n}\n\n\n# See data/res/values/public.xml, attrs.xml and especially attrs_manifest.xml\nANDROID_ATTRIBUTES = {\n    'allowBackup': bool_resource(0x1010280),\n    'allowClearUserData': bool_resource(0x1010005),\n    'allowParallelSyncs': bool_resource(0x1010332),\n    'allowSingleTap': bool_resource(0x1010259),\n    'allowTaskReparenting': bool_resource(0x1010204),\n    'alwaysRetainTaskState': bool_resource(0x1010203),\n    'appCategory': enum_resource(0x01010545, \"game\", \"audio\", \"video\", \"image\", \"social\", \"news\", \"maps\", \"productivity\", \"accessibility\"),\n    'clearTaskOnLaunch': bool_resource(0x1010015),\n    'configChanges': flag_resource(0x0101001f, mcc=0x0001, mnc=0x0002, locale=0x0004, touchscreen=0x0008, keyboard=0x0010, keyboardHidden=0x0020, navigation=0x0040, orientation=0x0080, screenLayout=0x0100, uiMode=0x0200, screenSize=0x0400, smallestScreenSize=0x0800, layoutDirection=0x2000, colorMode=0x4000, grammaticalGender=0x8000, fontScale=0x40000000, fontWeightAdjustment=0x10000000),\n    'debuggable': bool_resource(0x0101000f),\n    'documentLaunchMode': enum_resource(0x1010445, \"none\", \"intoExisting\", \"always\", \"never\"),\n    'enabled': bool_resource(0x101000e),\n    'excludeFromRecents': bool_resource(0x1010017),\n    'exported': bool_resource(0x1010010),\n    'extractNativeLibs': bool_resource(0x10104ea),\n    'finishOnTaskLaunch': bool_resource(0x1010014),\n    'fullBackupContent': bool_resource(0x10104eb),\n    'glEsVersion': int_resource(0x1010281),\n    'hardwareAccelerated': bool_resource(0x10102d3),\n    'hasCode': bool_resource(0x101000c),\n    'host': str_resource(0x1010028),\n    'icon': ref_resource(0x1010002),\n    'immersive': bool_resource(0x10102c0),\n    'installLocation': enum_resource(0x10102b7, \"auto\", \"internalOnly\", \"preferExternal\"),\n    'isGame': bool_resource(0x010103f4),\n    'label': str_resource(0x01010001),\n    'launchMode': enum_resource(0x101001d, \"standard\", \"singleTop\", \"singleTask\", \"singleInstance\"),\n    'maxSdkVersion': int_resource(0x1010271),\n    'mimeType': str_resource(0x1010026),\n    'minSdkVersion': int_resource(0x101020c),\n    'multiprocess': bool_resource(0x1010013),\n    'name': str_resource(0x1010003),\n    'noHistory': bool_resource(0x101022d),\n    'pathPattern': str_resource(0x101002c),\n    'preferMinimalPostProcessing': bool_resource(0x101060c),\n    'required': bool_resource(0x101028e),\n    'resizeableActivity': bool_resource(0x10104f6),\n    'scheme': str_resource(0x1010027),\n    'screenOrientation': enum_resource(0x101001e, 'landscape', 'portrait', 'user', 'behind', 'sensor', 'nosensor', 'sensorLandscape', 'sensorPortrait', 'reverseLandscape', 'reversePortrait', 'fullSensor', 'userLandscape', 'userPortrait', 'fullUser', 'locked'),\n    'stateNotNeeded': bool_resource(0x1010016),\n    'supportsRtl': bool_resource(0x010103af),\n    'supportsUploading': bool_resource(0x101029b),\n    'targetSandboxVersion': int_resource(0x101054c),\n    'targetSdkVersion': int_resource(0x1010270),\n    'theme': ref_resource(0x01010000),\n    'value': str_resource(0x1010024),\n    'versionCode': int_resource(0x101021b),\n    'versionName': str_resource(0x101021c),\n}\n\n\nclass AndroidManifest:\n    def __init__(self):\n        super().__init__()\n        self._stack = []\n        self.root = XmlNode()\n        self.resource_types = []\n        self.resources = {}\n\n    def parse_xml(self, data):\n        parser = ET.XMLParser(target=self)\n        parser.feed(data)\n        parser.close()\n\n    def start_ns(self, prefix, uri):\n        decl = self.root.element.namespace_declaration.add()\n        decl.prefix = prefix\n        decl.uri = uri\n\n    def start(self, tag, attribs):\n        if not self._stack:\n            node = self.root\n        else:\n            node = self._stack[-1].child.add()\n\n        element = node.element\n        element.name = tag\n\n        self._stack.append(element)\n\n        for key, value in attribs.items():\n            attrib = element.attribute.add()\n            attrib.value = value\n\n            if key.startswith('{'):\n                attrib.namespace_uri, key = key[1:].split('}', 1)\n                res_compile = ANDROID_ATTRIBUTES.get(key, None)\n                if not res_compile:\n                    print(f'Warning: unhandled AndroidManifest.xml attribute \"{key}\"')\n            else:\n                res_compile = None\n\n            attrib.name = key\n\n            if res_compile:\n                res_compile(attrib, self)\n\n    def end(self, tag):\n        self._stack.pop()\n\n    def register_resource(self, type, name):\n        if type not in self.resource_types:\n            self.resource_types.append(type)\n            type_id = len(self.resource_types)\n            self.resources[type] = []\n        else:\n            type_id = self.resource_types.index(type) + 1\n\n        resources = self.resources[type]\n        if name in resources:\n            entry_id = resources.index(name)\n        else:\n            entry_id = len(resources)\n            resources.append(name)\n\n        id = (0x7f << 24) | (type_id << 16) | (entry_id)\n        return id\n\n    def dumps(self):\n        return self.root.SerializeToString()\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/dist/_android.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/d67df3a6__android.json",
    "doc_id": "doc_136"
  }
}