{
  "content": "Supported Model Formats\n\nPanda3D contains an extensible plug-in system for loading model files. These plug-ins enable Panda3D to load models in a variety of formats, without requiring an explicit conversion step. This page lists the formats and plug-ins available for loading models into Panda3D.\n\nBAM Format\n\nThe most powerful file format that Panda3D supports is BAM. This is a direct binary representation of the internal object structure of Panda3D. As such it supports almost all of the objects you can create in Panda3D, and any model can be converted to BAM without loss of information. You can also save any scene graph structure in Panda3D back to a BAM file using the ~.NodePath.write_bam_file() call.\n\nBut because BAM files are a reflection of the internal memory structure of Panda3D, it's theoretically possible for a BAM file created using one version of Panda3D to no longer work in a future version of Panda3D. Therefore, if you choose to work directly with BAM files, you should make sure to always preserve the source assets and information about the pipeline so that you can reconvert the model as needed.\n\nBecause it is such an efficient format, it is very well-suited for shipping with a copy of a game for end-users. This allows the finished game to load models very quickly, and the plug-ins for loading models can be excluded. This format is very well-suited for shipping with a copy of a game for end-users, with the further advantage that the additional plug-ins do not need to be included with the installed game. The distribution tools therefore automatically convert files to the BAM format.\n\nWith a few exceptions, most tools and plug-ins do not directly export to the BAM format. To create a BAM file manually, you can use a tool like egg2bam <converting-egg-to-bam>, or you can simply load or create the model in Panda3D and use the ~.NodePath.write_bam_file() method.\n\nEgg Format\n\nThe second-best-supported file format in Panda3D is the Egg format, a text-based format that is unique to Panda3D. There are many tools available to manipulate Egg files, and you can even open an Egg file in a text editor to see what it contains. See the egg-files section for more detailed information about this format.\n\nAn Egg file can contain static geometry, but it can also contain information for animating the model, as well as information about the model's material, ie. what color the material has, and how this color changes under the influence of lighting). However, unlike BAM, it cannot represent all of the things that are possible in Panda3D. For instance, light sources are not represented.\n\nPanda3D provides various tools for converting models to the Egg format <converting-to-egg>. Furthermore, there are exporter plug-ins for various modelling packages that are able to produce Egg files.\n\nThe plug-in for loading .egg files is provided with Panda3D out of the box. Panda3D also provides an API for manipulating Egg files programmatically. The .EggData class is the main entry point of this API.\n\nglTF Plug-In\n\nAn increasingly commonly used format for 3D assets is the glTF format <gltf-files>. This is a standard format that is very widely supported by many modelling suites. There are also many models available on the internet in this format.\n\nThe best way to load these files is via the third-party panda3d-gltf plug-in. This plug-in is not included with Panda3D by default, but needs to be installed separately. The easiest way is to use the following pip command:\n\npython -m pip install -U panda3d-gltf\n\nIf you do not install panda3d-gltf, Panda3D will load glTF files using the Assimp plug-in, which also supports glTF files. However, panda3d-gltf is significantly more mature and featureful than the Assimp loader, so it is strongly recommended that you use panda3d-gltf instead.\n\nFor more information on the glTF format and importing glTF files into Panda3D, see gltf-files.\n\nAssimp Plug-In\n\nPanda3D also provides a plug-in out of the box that integrates with the Assimp library. This third-party library supports a broad range of different formats, such as .obj, .stl and .dxf, allowing them to be loaded into Panda3D without an explicit conversion step.\n\nThe full list of supported formats is available on this page:\n\nhttps://assimp-docs.readthedocs.io/en/latest/about/introduction.html\n\nThe quality of support varies substantially from format to format, and it is preferred to use a more specific plug-in if one is available for that format. For example, Assimp includes support for .gltf files, but the panda3d-gltf plug-in (mentioned above) is considered to be higher-quality.\n\nPlease note that while skeletal animations are supported, morph targets (also known as shape keys) are not currently supported by the Assimp plug-in, even if they are supported by the underlying format.\n\nCaution\n\nModels loaded with the Assimp plug-in may appear rotated around the X axis, due to the fact that Assimp uses a Y-up coordinate system whereas Panda3D uses a Z-up coordinate system. A future version of Panda3D will correct this automatically, but for now, you will need to manually rotate your models:\n\npython\n\nmodel.setP(90)\n\ncpp\n\nmodel.set_p(90);\n\nThe following Config.prc settings can be used to control the behavior of the Assimp loader. Note that you will need to clear the model cache after changing one of these variables for these changes to take effect.\n\nVariable name Default Description notify-level-assimp warning Sets the verbosity of debug messages (spam, debug, info, warning,\nerror) assimp-calc-tangent-space false Calculates tangent and binormal vectors, useful for normal\nmapping. assimp-join-identical-vertices true Merges duplicate vertices. Set this to false if you want each vertex\nto only be in use on one triangle. assimp-improve-cache-locality true Improves rendering performance of the loaded meshes by reordering\ntriangles for better vertex cache locality. Set this to false if you\nneed geometry to be loaded in the exact order that it was specified in\nthe file, or to improve load performance. assimp-remove-redundant-materials true Removes redundant/unreferenced materials from assets. assimp-fix-infacing-normals false Determines which normal vectors are facing inward and inverts them\nso that they are facing outward. assimp-optimize-meshes true Reduces the number of draw calls by unifying geometry with the same\nmaterials. Especially effective in conjunction with\nassimp-optimize-graph and assimp-remove-redundant-materials. assimp-optimize-graph false Optimizes the scene geometry by flattening the scene hierarchy. This\nis very efficient (combined with assimp-optimize-meshes), but it may\nresult the hierarchy to become lost, so it is disabled by default. assimp-flip-winding-order false Set this true to flip the winding order of all loaded geometry. assimp-gen-normals false Set this true to generate normals (if absent from file) on\nimport. assimp-smooth-normal-angle 0.0 Set this to anything other than 0.0 in degrees (so 180.0 is PI) to\nspecify the maximum angle that may be between two face normals at the\nsame vertex position that are smoothed together. Sometimes referred to\nas 'crease angle'. Only has effect if assimp-gen-normals is set to true\nand the file does not contain normals. Note that you may need to clear\nthe model-cache after changing this. assimp-collapse-dummy-root-node false If set to true, collapses the root node that Assimp creates, if it\nappears to be a synthetic dummy root node and contains no meshes. This\nvariable is new as of Panda3D 1.10.13 and will become true by default as\nof Panda3D 1.11.0.\n\nOther Formats\n\nOther file formats need to be converted first to a supported format. Panda3D provides various utilities that can be used to convert models to the Egg format <converting-to-egg>.\n\nFor several formats for which Panda3D ships with a to-egg conversion tool, Panda3D can automatically do the step of converting the model to .egg on load. For example, Panda3D ships with a flt2egg converter, which can convert OpenFlight models to the Egg format. If you try to load a .flt file, Panda3D will implicitly invoke flt2egg behind the scenes. The plug-in responsible for this is called p3ptloader.\n\nThe formats supported by this plug-in are OpenFlight (.flt), LightWave (.lwo), AutoCAD (.dxf), VRML (.wrl), Direct X (.x), and Wavefront OBJ (.obj). However, note that some of these formats can be loaded by the Assimp loader, in which case this plug-in is only used if the Assimp plug-in is not available. Also note that the obj2egg converter is extremely limited and does not support materials or textures, so it is not recommended to load .obj files via this route.\n\nSupported Feature Table\n\nThis table lists the most commonly used supported file formats and the features that are supported by these formats and their respective importers:\n\n\\ .bam .egg .gltf .obj .dae .x Node hierarchy \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Custom object tags \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u274c \u274c \u274c Geometry --- Triangle meshes \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Higher-order polygons \u274c \u2714\ufe0f \u274c \u274c \u2714\ufe0f \u2714\ufe0f Lines and segments \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Vertex colors \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f **Materials and Textur es** --- Basic materials \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Basic textures \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Texture blending \u2714\ufe0f \u2714 \ufe0f \u274c \u274c \u274c \u274c Gloss maps \u2714\ufe0f \u2714 \ufe0f \u274c \u274c \u2714\ufe0f \u274c Normal maps \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u274c \u2714\ufe0f \u274c Height/parallax maps \u2714\ufe0f \u2714 \ufe0f \u274c \u2714\ufe0f \u274c \u274c Emission maps \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Roughness/metal maps \u2714\ufe0f \u274c \u2714\ufe0f \u2714\ufe0f \u274c \u274c Texcoord transforms \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u274c \u274c \u274c Animation --- Object animations \u274c \u274c \u274c \u274c \u274c \u274c Skeletal animations \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u274c \u2714\ufe0f \u2714\ufe0f Morph targets \u2714\ufe0f \u2714 \ufe0f \u2714\ufe0f \u274c \u274c \u274c Split animation files \u2714\ufe0f \u2714 \ufe0f \u274c \u274c \u274c \u274c Other --- Collision shapes \u2714\ufe0f \u2714 \ufe0f \u274c \u274c \u274c \u274c Light sources \u2714\ufe0f \u274c \u2714\ufe0f \u274c \u2714\ufe0f \u274c Level of detail (LOD) \u2714\ufe0f \u2714 \ufe0f \u274c \u274c \u274c \u274c External references \u274c \u2714\ufe0f \u274c \u274c \u274c \u274c NURBS curves \u274c \u2714\ufe0f \u274c \u274c \u274c \u274c Shaders \u274c \u274c \u274c \u274c \u274c \u274c",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/f1b1e378_model-file-formats.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/c6d3d715_f1b1e378_model-file-formats.json",
    "doc_id": "doc_351"
  }
}