{
  "content": "\"\"\"This module defines various transition effects that can be used to\ngraphically transition between two scenes, such as by fading the screen to\na particular color.\"\"\"\n\n__all__ = ['Transitions']\n\nfrom panda3d.core import AsyncFuture, ConfigVariableBool, NodePath, TransparencyAttrib, Vec3, Vec4\nfrom direct.showbase import ShowBaseGlobal\nfrom direct.showbase.MessengerGlobal import messenger\nfrom direct.gui.DirectGui import DirectFrame\nfrom direct.gui import DirectGuiGlobals as DGG\nfrom direct.interval.LerpInterval import LerpColorScaleInterval, LerpColorInterval, LerpScaleInterval, LerpPosInterval\nfrom direct.interval.MetaInterval import Sequence, Parallel\nfrom direct.interval.FunctionInterval import Func\n\n\nclass Transitions:\n    # These may be reassigned before the fade or iris transitions are\n    # actually invoked to change the models that will be used.\n    IrisModelName = \"models/misc/iris\"\n    FadeModelName = \"models/misc/fade\"\n\n    def __init__(self, loader,\n                 model=None,\n                 scale=3.0,\n                 pos=Vec3(0, 0, 0)):\n        self.transitionIval = None\n        self.__transitionFuture = None\n        self.letterboxIval = None\n        self.__letterboxFuture = None\n        self.iris = None\n        self.fade = None\n        self.letterbox = None\n        self.fadeModel = model\n        self.imagePos = pos\n        if model:\n            self.alphaOff = Vec4(1, 1, 1, 0)\n            self.alphaOn = Vec4(1, 1, 1, 1)\n            model.setTransparency(1)\n            self.lerpFunc = LerpColorScaleInterval\n        else:\n            self.alphaOff = Vec4(0, 0, 0, 0)\n            self.alphaOn = Vec4(0, 0, 0, 1)\n            self.lerpFunc = LerpColorInterval\n\n        self.irisTaskName = \"irisTask\"\n        self.fadeTaskName = \"fadeTask\"\n        self.letterboxTaskName = \"letterboxTask\"\n\n    def __del__(self):\n        if self.fadeModel:\n            self.fadeModel.removeNode()\n            self.fadeModel = None\n\n    ##################################################\n    # Fade\n    ##################################################\n\n    # We can set a custom model for the fade before using it for the first time\n    def setFadeModel(self, model, scale=1.0):\n        self.fadeModel = model\n        # We have to change some default parameters for a custom fadeModel\n        self.alphaOn = Vec4(1, 1, 1, 1)\n\n        # Reload fade if its already been created\n        if self.fade:\n            self.fade.destroy()\n            self.fade = None\n            self.loadFade()\n\n    def loadFade(self):\n        if self.fade is None:\n            # We create a DirectFrame for the fade polygon, instead of\n            # simply loading the polygon model and using it directly,\n            # so that it will also obscure mouse events for objects\n            # positioned behind it.\n            self.fade = DirectFrame(\n                parent = ShowBaseGlobal.hidden,\n                guiId = 'fade',\n                relief = None,\n                image = self.fadeModel,\n                image_scale = (4, 2, 2),\n                state = DGG.NORMAL,\n            )\n            if not self.fadeModel:\n                # No fade model was given, so we make this the fade model.\n                self.fade[\"relief\"] = DGG.FLAT\n                self.fade[\"frameSize\"] = (-2, 2, -1, 1)\n                self.fade[\"frameColor\"] = (0, 0, 0, 1)\n                self.fade.setTransparency(TransparencyAttrib.MAlpha)\n            self.fade.setBin('unsorted', 0)\n            self.fade.setColor(0,0,0,0)\n\n        self.fade.setScale(max(base.a2dRight, base.a2dTop))\n\n    def getFadeInIval(self, t=0.5, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Returns an interval without starting it.  This is particularly useful in\n        cutscenes, so when the cutsceneIval is escaped out of we can finish the fade immediately\n        \"\"\"\n        #self.noTransitions() masad: this creates a one frame pop, is it necessary?\n        self.loadFade()\n\n        transitionIval = Sequence(Func(self.fade.reparentTo, ShowBaseGlobal.aspect2d, DGG.FADE_SORT_INDEX),\n                                  Func(self.fade.showThrough),  # in case aspect2d is hidden for some reason\n                                  self.lerpFunc(self.fade, t,\n                                                self.alphaOff,\n                                                # self.alphaOn,\n                                                blendType=blendType\n                                                ),\n                                  Func(self.fade.detachNode),\n                                  name = self.fadeTaskName,\n                                  )\n        if finishIval:\n            transitionIval.append(finishIval)\n        return transitionIval\n\n    def getFadeOutIval(self, t=0.5, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Create a sequence that lerps the color out, then\n        parents the fade to hidden\n        \"\"\"\n        self.noTransitions()\n        self.loadFade()\n\n        transitionIval = Sequence(Func(self.fade.reparentTo, ShowBaseGlobal.aspect2d, DGG.FADE_SORT_INDEX),\n                                  Func(self.fade.showThrough),  # in case aspect2d is hidden for some reason\n                                  self.lerpFunc(self.fade, t,\n                                                self.alphaOn,\n                                                # self.alphaOff,\n                                                blendType=blendType\n                                                ),\n                                  name = self.fadeTaskName,\n                                  )\n        if finishIval:\n            transitionIval.append(finishIval)\n        return transitionIval\n\n    def fadeIn(self, t=0.5, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Play a fade in transition over t seconds.\n        Places a polygon on the aspect2d plane then lerps the color\n        from black to transparent. When the color lerp is finished, it\n        parents the fade polygon to hidden.\n        \"\"\"\n        gsg = base.win.getGsg()\n        if gsg:\n            # If we're about to fade in from black, go ahead and\n            # preload all the textures etc.\n            base.graphicsEngine.renderFrame()\n            base.render.prepareScene(gsg)\n            base.render2d.prepareScene(gsg)\n\n        if t == 0:\n            # Fade in immediately with no lerp\n            #print \"transitiosn: fadeIn 0.0\"\n            self.noTransitions()\n            self.loadFade()\n            self.fade.detachNode()\n            fut = AsyncFuture()\n            fut.setResult(None)\n            return fut\n        else:\n            # Create a sequence that lerps the color out, then\n            # parents the fade to hidden\n            self.transitionIval = self.getFadeInIval(t, finishIval, blendType)\n            self.transitionIval.append(Func(self.__finishTransition))\n            self.__transitionFuture = AsyncFuture()\n            self.transitionIval.start()\n            return self.__transitionFuture\n\n    def fadeOut(self, t=0.5, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Play a fade out transition over t seconds.\n        Places a polygon on the aspect2d plane then lerps the color\n        from transparent to full black. When the color lerp is finished,\n        it leaves the fade polygon covering the aspect2d plane until you\n        fadeIn or call noFade.\n        lerp\n        \"\"\"\n        if t == 0:\n            # Fade out immediately with no lerp\n            self.noTransitions()\n            self.loadFade()\n\n            self.fade.reparentTo(ShowBaseGlobal.aspect2d, DGG.FADE_SORT_INDEX)\n            self.fade.setColor(self.alphaOn)\n        elif ConfigVariableBool('no-loading-screen', False):\n            if finishIval:\n                self.transitionIval = finishIval\n                self.transitionIval.start()\n        else:\n            # Create a sequence that lerps the color out, then\n            # parents the fade to hidden\n            self.transitionIval = self.getFadeOutIval(t, finishIval, blendType)\n            self.transitionIval.append(Func(self.__finishTransition))\n            self.__transitionFuture = AsyncFuture()\n            self.transitionIval.start()\n            return self.__transitionFuture\n\n        # Immediately done, so return a dummy future.\n        fut = AsyncFuture()\n        fut.setResult(None)\n        return fut\n\n    def fadeOutActive(self):\n        return self.fade and self.fade.getColor()[3] > 0\n\n    def fadeScreen(self, alpha=0.5):\n        \"\"\"\n        Put a semitransparent screen over the camera plane\n        to darken out the world. Useful for drawing attention to\n        a dialog box for instance\n        \"\"\"\n        #print \"transitiosn: fadeScreen\"\n        self.noTransitions()\n        self.loadFade()\n\n        self.fade.reparentTo(ShowBaseGlobal.aspect2d, DGG.FADE_SORT_INDEX)\n        self.fade.setColor(self.alphaOn[0],\n                           self.alphaOn[1],\n                           self.alphaOn[2],\n                           alpha)\n\n    def fadeScreenColor(self, color):\n        \"\"\"\n        Put a semitransparent screen over the camera plane\n        to darken out the world. Useful for drawing attention to\n        a dialog box for instance\n        \"\"\"\n        #print \"transitiosn: fadeScreenColor\"\n        self.noTransitions()\n        self.loadFade()\n\n        self.fade.reparentTo(ShowBaseGlobal.aspect2d, DGG.FADE_SORT_INDEX)\n        self.fade.setColor(color)\n\n    def noFade(self):\n        \"\"\"\n        Removes any current fade tasks and parents the fade polygon away\n        \"\"\"\n        #print \"transitiosn: noFade\"\n        if self.transitionIval:\n            self.transitionIval.pause()\n            self.transitionIval = None\n        if self.__transitionFuture:\n            self.__transitionFuture.cancel()\n            self.__transitionFuture = None\n        if self.fade:\n            # Make sure to reset the color, since fadeOutActive() is looking at it\n            self.fade.setColor(self.alphaOff)\n            self.fade.detachNode()\n\n    def setFadeColor(self, r, g, b):\n        self.alphaOn.set(r, g, b, 1)\n        self.alphaOff.set(r, g, b, 0)\n\n    ##################################################\n    # Iris\n    ##################################################\n\n    def loadIris(self):\n        if self.iris is None:\n            self.iris = base.loader.loadModel(self.IrisModelName)\n            self.iris.setPos(0, 0, 0)\n\n    def getIrisInIval(self, t=0.5, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Returns an interval without starting it.  This is particularly useful in\n        cutscenes, so when the cutsceneIval is escaped out of we can finish the iris immediately\n        \"\"\"\n        self.noTransitions()\n        self.loadIris()\n\n        scale = 0.18 * max(base.a2dRight, base.a2dTop)\n        transitionIval = Sequence(Func(self.iris.reparentTo, ShowBaseGlobal.aspect2d, DGG.FADE_SORT_INDEX),\n                                  LerpScaleInterval(self.iris, t,\n                                                    scale = scale,\n                                                    startScale = 0.01,\n                                                    blendType=blendType),\n                                 Func(self.iris.detachNode),\n                                 Func(self.__finishTransition),\n                                 name = self.irisTaskName,\n                                 )\n        if finishIval:\n            transitionIval.append(finishIval)\n        return transitionIval\n\n    def getIrisOutIval(self, t=0.5, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Create a sequence that lerps the iris out, then\n        parents the iris to hidden\n        \"\"\"\n        self.noTransitions()\n        self.loadIris()\n        self.loadFade()  # we need this to cover up the hole.\n\n        scale = 0.18 * max(base.a2dRight, base.a2dTop)\n        transitionIval = Sequence(Func(self.iris.reparentTo, ShowBaseGlobal.aspect2d, DGG.FADE_SORT_INDEX),\n                                  LerpScaleInterval(self.iris, t,\n                                                    scale = 0.01,\n                                                    startScale = scale,\n                                                    blendType=blendType),\n                                 Func(self.iris.detachNode),\n                                 # Use the fade to cover up the hole that the iris would leave\n                                 Func(self.fadeOut, 0),\n                                 Func(self.__finishTransition),\n                                 name = self.irisTaskName,\n                                 )\n\n        if finishIval:\n            transitionIval.append(finishIval)\n        return transitionIval\n\n    def irisIn(self, t=0.5, finishIval=None, blendType = 'noBlend'):\n        \"\"\"\n        Play an iris in transition over t seconds.\n        Places a polygon on the aspect2d plane then lerps the scale\n        of the iris polygon up so it looks like we iris in. When the\n        scale lerp is finished, it parents the iris polygon to hidden.\n        \"\"\"\n        if t == 0:\n            self.iris.detachNode()\n            fut = AsyncFuture()\n            fut.setResult(None)\n            return fut\n        else:\n            self.transitionIval = self.getIrisInIval(t, finishIval, blendType)\n            self.__transitionFuture = AsyncFuture()\n            self.transitionIval.start()\n            return self.__transitionFuture\n\n    def irisOut(self, t=0.5, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Play an iris out transition over t seconds.\n        Places a polygon on the aspect2d plane then lerps the scale\n        of the iris down so it looks like we iris out. When the scale\n        lerp is finished, it leaves the iris polygon covering the\n        aspect2d plane until you irisIn or call noIris.\n        \"\"\"\n        if t == 0:\n            self.iris.detachNode()\n            self.fadeOut(0)\n            fut = AsyncFuture()\n            fut.setResult(None)\n            return fut\n        else:\n            self.transitionIval = self.getIrisOutIval(t, finishIval, blendType)\n            self.__transitionFuture = AsyncFuture()\n            self.transitionIval.start()\n            return self.__transitionFuture\n\n    def noIris(self):\n        \"\"\"\n        Removes any current iris tasks and parents the iris polygon away\n        \"\"\"\n        if self.transitionIval:\n            self.transitionIval.pause()\n            self.transitionIval = None\n        if self.iris is not None:\n            self.iris.detachNode()\n        # Actually we need to remove the fade too,\n        # because the iris effect uses it.\n        self.noFade()\n\n    def noTransitions(self):\n        \"\"\"\n        This call should immediately remove any and all transitions running\n        \"\"\"\n        self.noFade()\n        self.noIris()\n        # Letterbox is not really a transition, it is a screen overlay\n        # self.noLetterbox()\n\n    def __finishTransition(self):\n        if self.__transitionFuture:\n            self.__transitionFuture.setResult(None)\n            self.__transitionFuture = None\n\n    ##################################################\n    # Letterbox\n    ##################################################\n\n    def loadLetterbox(self):\n        if not self.letterbox:\n            # We create a DirectFrame for the fade polygon, instead of\n            # simply loading the polygon model and using it directly,\n            # so that it will also obscure mouse events for objects\n            # positioned behind it.\n            self.letterbox = NodePath(\"letterbox\")\n            # Allow fade in and out of the bars\n            self.letterbox.setTransparency(1)\n\n            # Allow DirectLabels to be parented to the letterbox sensibly\n            self.letterbox.setBin('unsorted', 0)\n\n            # Allow a custom look to the letterbox graphic.\n\n            # TODO: This model isn't available everywhere.  We should\n            # pass it in as a parameter.\n            button = base.loader.loadModel('models/gui/toplevel_gui',\n                                           okMissing = True)\n\n            barImage = None\n            if button:\n                barImage = button.find('**/generic_button')\n\n            self.letterboxTop = DirectFrame(\n                parent = self.letterbox,\n                guiId = 'letterboxTop',\n                relief = DGG.FLAT,\n                state = DGG.NORMAL,\n                frameColor = (0, 0, 0, 1),\n                borderWidth = (0, 0),\n                frameSize = (-1, 1, 0, 0.2),\n                pos = (0, 0, 1.0),\n                image = barImage,\n                image_scale = (2.25,1,.5),\n                image_pos = (0,0,.1),\n                image_color = (0.3,0.3,0.3,1),\n                sortOrder = 0,\n            )\n            self.letterboxBottom = DirectFrame(\n                parent = self.letterbox,\n                guiId = 'letterboxBottom',\n                relief = DGG.FLAT,\n                state = DGG.NORMAL,\n                frameColor = (0, 0, 0, 1),\n                borderWidth = (0, 0),\n                frameSize = (-1, 1, 0, 0.2),\n                pos = (0, 0, -1.2),\n                image = barImage,\n                image_scale = (2.25,1,.5),\n                image_pos = (0,0,.1),\n                image_color = (0.3,0.3,0.3,1),\n                sortOrder = 0,\n            )\n\n            # masad: always place these at the bottom of render\n            self.letterboxTop.setBin('sorted',0)\n            self.letterboxBottom.setBin('sorted',0)\n            self.letterbox.reparentTo(ShowBaseGlobal.render2d, -1)\n            self.letterboxOff(0)\n\n    def noLetterbox(self):\n        \"\"\"\n        Removes any current letterbox tasks and parents the letterbox polygon away\n        \"\"\"\n        if self.letterboxIval:\n            self.letterboxIval.pause()\n            self.letterboxIval = None\n        if self.__letterboxFuture:\n            self.__letterboxFuture.cancel()\n            self.__letterboxFuture = None\n        if self.letterbox:\n            self.letterbox.stash()\n\n    def __finishLetterbox(self):\n        if self.__letterboxFuture:\n            self.__letterboxFuture.setResult(None)\n            self.__letterboxFuture = None\n\n    def letterboxOn(self, t=0.25, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Move black bars in over t seconds.\n        \"\"\"\n        self.noLetterbox()\n        self.loadLetterbox()\n        self.letterbox.unstash()\n        if t == 0:\n            self.letterboxBottom.setPos(0, 0, -1)\n            self.letterboxTop.setPos(0, 0, 0.8)\n            fut = AsyncFuture()\n            fut.setResult(None)\n            return fut\n        else:\n            self.__letterboxFuture = AsyncFuture()\n            self.letterboxIval = Sequence(Parallel(\n                LerpPosInterval(self.letterboxBottom,\n                                t,\n                                pos = Vec3(0, 0, -1),\n                                #startPos = Vec3(0, 0, -1.2),\n                                blendType=blendType\n                                ),\n                LerpPosInterval(self.letterboxTop,\n                                t,\n                                pos = Vec3(0, 0, 0.8),\n                                # startPos = Vec3(0, 0, 1),\n                                blendType=blendType\n                                ),\n            ),\n                                          Func(self.__finishLetterbox),\n                                          name = self.letterboxTaskName,\n                                          )\n            if finishIval:\n                self.letterboxIval.append(finishIval)\n            self.letterboxIval.start()\n            return self.__letterboxFuture\n\n    def letterboxOff(self, t=0.25, finishIval=None, blendType='noBlend'):\n        \"\"\"\n        Move black bars away over t seconds.\n        \"\"\"\n        self.noLetterbox()\n        self.loadLetterbox()\n        self.letterbox.unstash()\n        if t == 0:\n            self.letterbox.stash()\n            fut = AsyncFuture()\n            fut.setResult(None)\n            return fut\n        else:\n            self.__letterboxFuture = AsyncFuture()\n            self.letterboxIval = Sequence(Parallel(\n                LerpPosInterval(self.letterboxBottom,\n                                t,\n                                pos = Vec3(0, 0, -1.2),\n                                # startPos = Vec3(0, 0, -1),\n                                blendType=blendType\n                                ),\n                LerpPosInterval(self.letterboxTop,\n                                t,\n                                pos = Vec3(0, 0, 1),\n                                # startPos = Vec3(0, 0, 0.8),\n                                blendType=blendType\n                                ),\n            ),\n                Func(self.letterbox.stash),\n                Func(self.__finishLetterbox),\n                Func(messenger.send, 'letterboxOff'),\n                name = self.letterboxTaskName,\n            )\n            if finishIval:\n                self.letterboxIval.append(finishIval)\n            self.letterboxIval.start()\n            return self.__letterboxFuture\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/Transitions.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/04f671e4_Transitions.json",
    "doc_id": "doc_244"
  }
}