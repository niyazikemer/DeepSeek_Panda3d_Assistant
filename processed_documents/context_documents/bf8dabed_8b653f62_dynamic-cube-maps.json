{
  "content": "Dynamic Cube Maps\n\npython\n\nSince the six faces of a cube map are really just six different views of a scene from the same point, it's possible to generate a cube map automatically by rendering these six different views at runtime.\n\nThis is really just a form of offscreen rendering to a texture. Instead of rendering just one 2-D texture image, though, rendering a dynamic cube map means rendering six different 2-D images, one for each face of a cube map texture.\n\nPanda3D makes this easy for you. To start rendering a dynamic cube map, simply call:\n\nrig = NodePath('rig')\nbuffer = base.win.makeCubeMap(name, size, rig)\n\nThis will return an offscreen GraphicsBuffer that will be used to render the cube map. The three required parameters to makeCubeMap() are:\n\nThere are also additional, optional parameters to makeCubeMap():\n\nNote that we passed a new NodePath, called rig in the above example, to the makeCubeMap() call. This NodePath serves as the \"camera rig\"; the makeCubeMap() method will create six cameras facing in six different directions, and attach them all to the camera rig. Thus, you can parent this rig into your scene and move it around as if it were a six-eyed camera. Normally, for environment maps, you would parent the rig somewhere within your shiny object so it can look out of the shiny object and see the things that should be reflected in it.\n\nThe actual cube map itself be retrieved with the call:\n\ntex = buffer.getTexture()\n\nYou can apply the texture to geometry as in the previous example <environment-mapping-with-cube-maps>. You should use the MWorldCubeMap mode to generate texture coordinates for your geometry since the camera rig will have a CompassEffect <compass-effects> on it to keep it unrotated with respect to render.\n\nWhen you are done with the cube map, you should remove its buffer (and stop the cube map from continuing to render) by calling:\n\nbase.graphicsEngine.removeWindow(buffer)\n\nAs a complete example, here is how we might load up a dynamic cube map environment on our teapot and move the teapot down the street to show off the dynamic reflections:\n\nscene = loader.loadModel('bvw-f2004--streetscene/street-scene.egg')\nscene.reparentTo(render)\nscene.setZ(-2)\n\nteapot = loader.loadModel('teapot.egg')\nteapot.reparentTo(render)\n\nrig = NodePath('rig')\nbuffer = base.win.makeCubeMap('env', 64, rig)\nrig.reparentTo(teapot)\n\nteapot.setTexGen(TextureStage.getDefault(), TexGenAttrib.MWorldCubeMap)\nteapot.setTexture(buffer.getTexture())\n\nzoom = teapot.posInterval(5, VBase3(20, 0, 0), startPos=VBase3(-20, 0, 0))\nzoom.loop()\n\nWarning\n\nWhen you render a dynamic cube map, don't forget that you are re-rendering your scene six times every frame in addition to the main frame render. If you are not careful, and if you have a complex scene, then you could easily end up reducing your frame rate by a factor of seven.\n\nIt is a good idea to limit the amount of geometry that you render in the cube map. One simple way to do this is to ensure that the far plane <lenses-and-field-of-view> on the cube map cameras is set relatively close in. Since all of the cube map cameras share the same lens, you can adjust the near and far plane of all of the cameras at once like this:\n\nlens = rig.find('**/+Camera').node().getLens()\nlens.setNearFar(1, 100)\n\nIt is especially important when you are using cube maps that you structure your scene graph hierarchically and divide it up spatially so that Panda3D's view-frustum culling can do an effective job of eliminating the parts of the scene that are behind each of the six cameras. (Unfortunately, the street-scene model used in the above example is not at all well-structured, so the example performs very poorly on all but the highest-end hardware.)\n\nIt's also usually a good idea to keep the cube map size (the size parameter to makeCubeMap()) no larger than it absolutely has to be to get the look you want.\n\nYou can also take advantage of the DrawMask to hide things from the cube cameras that are not likely to be important in the reflections. The documentation for this advanced feature of Panda3D will be found in another section of the manual (which, as of the time of this writing, has yet to be written).\n\nFinally, you can temporarily disable the cube map rendering from time to time if you know the environment won't be changing for a little while. The cube map will retain its last-rendered image. You can do this with buffer.setActive(0). Use buffer.setActive(1) to re-activate it.\n\ncpp",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/8b653f62_dynamic-cube-maps.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/bf8dabed_8b653f62_dynamic-cube-maps.json",
    "doc_id": "doc_496"
  }
}