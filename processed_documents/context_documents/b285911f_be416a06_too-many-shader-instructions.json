{
  "content": "Too Many Shader Instructions\n\npython\n\nThis can only happen if you have at least one .NodePath.set_shader() or .NodePath.set_shader_auto() method call in your application, or you are using a postprocessing filter from ~direct.filter.CommonFilters.CommonFilters.\n\ncpp\n\nThis can only happen if you have at least one .NodePath.set_shader() or .NodePath.set_shader_auto() method call in your application.\n\nToo Many Vertex Shader Instructions\n\nAlthough relatively rare, a bottleneck can form in the vertex processing stage if there are many vertices in the scene and the vertex shaders applied to the scene are too complex.\n\nTry to simplify your scene. Objects that are far away don't need millions of vertices. Consider the use of level-of-detail techniques.\n\nAlternatively, try to simplify the vertex shader. Look for calculations that could instead be done in advance, on the CPU, and passed in as a shader input.\n\nToo Many Fragment/Pixel Shader Instructions\n\nAs an easy way to detect whether this is a bottleneck in your application, try resizing the window. If the framerate heavily varies with the window size or screen resolution, you're most likely dealing with this problem.\n\nIf your frame rate strongly depends on the window or screen resolution, this may be a hint that your fragment shader has too many instructions. Another problem is if your depth complexity is too high. Try to look at your scene from different angles and positions. If your frame rate varies, then the overdraw from one specific view angle is to high.\n\nTry to minimize the objects Panda3D needs to draw. Use .Lens.set_far(), or fall back to a simpler fragment shaders for objects that are far away. If an object is far away from the viewer it doesn't make sense to apply normal mapping. .LODNode or .FadeLODNode may help.\n\nIf your fragment shader is self-made, then try to offload some work to your vertex shader.\n\nThere is a simple method to test your scene. Replace your whole fragment shader with the following snippet (if using GLSL):\n\ngl_FragColor = vec4(1.0, 0.0, 1.0, 0.0);\n\nOr the following (if using Cg):\n\no_color = float4(1.0, 0.0, 1.0, 0.0);\n\nIf the frame rate doesn't change, then it is the depth complexity. It if changes, it may be the depth complexity or the shader.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/be416a06_too-many-shader-instructions.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/b285911f_be416a06_too-many-shader-instructions.json",
    "doc_id": "doc_492"
  }
}