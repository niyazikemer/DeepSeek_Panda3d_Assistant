{
  "content": "from direct.showbase.DirectObject import DirectObject\nimport Pmw\nimport tkinter as tk\n\n#--------------------------------------------------------------------------\n#--------------------------------------------------------------------------\nDEFAULT_BT_WIDTH = 50.0\n\n#--------------------------------------------------------------------------\n#--------------------------------------------------------------------------\nclass MemoryExplorer(Pmw.MegaWidget, DirectObject):\n\n    #--------------------------------------------------------------------------\n    # Init\n    #--------------------------------------------------------------------------\n    def __init__(self, parent = None, nodePath = None, **kw):\n        if nodePath is None:\n            nodePath = render\n\n        optiondefs = (('menuItems',   [],   Pmw.INITOPT),)\n        self.defineoptions(kw, optiondefs)\n        Pmw.MegaWidget.__init__(self, parent)\n\n        self.nodePath = nodePath\n        self.renderItem = None\n        self.render2dItem = None\n\n        self.buttons = []\n        self.labels = []\n        self.rootItem = None\n\n        self.btWidth = DEFAULT_BT_WIDTH\n\n        self.createScrolledFrame()\n        self.createScale()\n        self.createRefreshBT()\n\n        self.balloon = Pmw.Balloon(self.interior())\n\n    def createScrolledFrame(self):\n        self.frame = Pmw.ScrolledFrame(self.interior(),\n                                       labelpos = 'n',\n                                       label_text = 'ScrolledFrame',\n                                       usehullsize = 1,\n                                       hull_width = 200,\n                                       hull_height = 220,)\n\n        self.frame.pack(padx = 3, pady = 3, fill = tk.BOTH, expand = 1)\n\n    def createScale(self):\n        self.scaleCtrl = tk.Scale(self.interior(),\n                                  label = \"Graph Scale\",\n                                  from_= 0.0,\n                                  to = 20.0,\n                                  resolution = 0.1,\n                                  orient = tk.HORIZONTAL,\n                                  command = self.onScaleUpdate)\n\n        self.scaleCtrl.pack(side = tk.LEFT, fill = tk.BOTH, expand = 1)\n        self.scaleCtrl.set(0.0)\n\n    def createRefreshBT(self):\n        self.refreshBT = tk.Button(self.interior(), text = 'Refresh', command = self.refresh)\n        self.refreshBT.pack(side = tk.LEFT, fill = tk.BOTH, expand = 1)\n\n    #--------------------------------------------------------------------------\n    # Item Ctrls\n    #--------------------------------------------------------------------------\n    def createDefaultCtrls(self):\n        if self.renderItem is None or self.render2dItem is None:\n            return\n\n        totalBytes = self.renderItem.getVertexBytes()+self.render2dItem.getVertexBytes()\n\n        self.addChildCtrl(self.renderItem, totalBytes)\n        self.addChildCtrl(self.render2dItem, totalBytes)\n\n        self.setTitle(\"ALL\", totalBytes)\n\n    def setTitle(self, parent, bytes):\n        self.frame[\"label_text\"] = \"[%s] - %s bytes\" % (parent, bytes)\n\n    def resetCtrls(self):\n        for button in self.buttons:\n            self.balloon.unbind(button)\n            button.destroy()\n        self.buttons = []\n\n        for label in self.labels:\n            label.destroy()\n        self.labels = []\n\n    def getNewButton(self, width, ratio):\n        newBT =  tk.Button(self.frame.interior(),\n                           anchor = tk.W,\n                           width = width)\n\n        if ratio == 0.0:\n            newBT['bg'] = \"grey\"\n            newBT['text'] = \".\"\n        else:\n            newBT['bg'] = Pmw.Color.hue2name(0.0, 1.0-ratio)\n            newBT['text'] = \"%0.2f%%\" % (ratio*100.0)\n\n        return newBT\n\n    def addSelfCtrl(self, item, totalBytes):\n        self.addLabel(\"[self] : %s bytes\" % item.getSelfVertexBytes())\n\n        bt = self.addButton(item.getSelfVertexBytes(),\n                            totalBytes,\n                            self.onSelfButtonLClick,\n                            self.onSelfButtonRClick,\n                            item)\n\n    def addChildCtrl(self, item, totalBytes):\n        self.addLabel(\"%s [+%s] : %s bytes\" % (item.getName(),\n                                                item.getNumChildren(),\n                                                item.getVertexBytes()))\n\n        bt = self.addButton(item.getVertexBytes(),\n                            totalBytes,\n                            self.onChildButtonLClick,\n                            self.onChildButtonRClick,\n                            item)\n\n    def addButton(self, vertexBytes, totalBytes, funcLClick, funcRClick, item):\n        width = self.getBTWidth(vertexBytes, totalBytes)\n\n        if totalBytes == 0:\n            ratio = 0.0\n        else:\n            ratio = vertexBytes/float(totalBytes)\n\n        bt = self.getNewButton(width, ratio)\n\n        def callbackL(event):\n            funcLClick(item)\n\n        def callbackR(event):\n            funcRClick(item)\n\n        bt.bind(\"<Button-1>\", callbackL)\n        bt.bind(\"<Button-3>\", callbackR)\n\n        bt.pack(side = tk.TOP, anchor = tk.NW)\n        self.buttons.append(bt)\n\n        self.balloon.bind(bt, item.getPathName())\n\n        return bt\n\n    def addLabel(self, label):\n        label = tk.Label(self.frame.interior(), text = label)\n        label.pack(side = tk.TOP, anchor = tk.NW,  expand = 0)\n        self.labels.append(label)\n\n    def getBTWidth(self, vertexBytes, totalBytes):\n        if totalBytes == 0:\n            return 1\n\n        width = int(self.btWidth * vertexBytes / totalBytes)\n\n        if width == 0:\n            width = 1\n\n        return width\n\n    #--------------------------------------------------------------------------\n    # Callback\n    #--------------------------------------------------------------------------\n    def onScaleUpdate(self, arg):\n        self.btWidth = DEFAULT_BT_WIDTH +  DEFAULT_BT_WIDTH * float(arg)\n\n        if self.rootItem:\n            self.updateBTWidth()\n        else:\n            self.updateDefaultBTWidth()\n\n    def updateBTWidth(self):\n        self.buttons[0]['width'] = self.getBTWidth(self.rootItem.getSelfVertexBytes(),\n                                                   self.rootItem.getVertexBytes())\n\n        btIndex = 1\n        for item in self.rootItem.getChildren():\n            self.buttons[btIndex]['width'] = self.getBTWidth(item.getVertexBytes(),\n                                                             self.rootItem.getVertexBytes())\n            btIndex += 1\n\n    def updateDefaultBTWidth(self):\n        if self.renderItem is None or self.render2dItem is None:\n            return\n        totalBytes = self.renderItem.getVertexBytes() + self.render2dItem.getVertexBytes()\n        self.buttons[0]['width'] = self.getBTWidth(self.renderItem.getVertexBytes(), totalBytes)\n        self.buttons[1]['width'] = self.getBTWidth(self.render2dItem.getVertexBytes(), totalBytes)\n\n    def onSelfButtonLClick(self, item):\n        pass\n\n    def onSelfButtonRClick(self, item):\n        parentItem = item.getParent()\n        self.resetCtrls()\n        self.addItemCtrls(parentItem)\n\n    def onChildButtonLClick(self, item):\n        if item.getNumChildren() == 0:\n            return\n\n        self.resetCtrls()\n        self.addItemCtrls(item)\n\n    def onChildButtonRClick(self, item):\n        parentItem = item.getParent()\n\n        if parentItem:\n            self.resetCtrls()\n            self.addItemCtrls(parentItem.getParent())\n\n    def addItemCtrls(self, item):\n        self.rootItem = item\n        if item is None:\n            self.createDefaultCtrls()\n        else:\n            self.addSelfCtrl(item, item.getVertexBytes())\n\n            for child in item.getChildren():\n                self.addChildCtrl(child, item.getVertexBytes())\n\n            self.setTitle(item.getPathName(), item.getVertexBytes())\n\n    #--------------------------------------------------------------------------\n    # List & Analyze\n    #--------------------------------------------------------------------------\n    def makeList(self):\n        self.renderItem = MemoryExplorerItem(None, base.render)\n        self.buildList(self.renderItem)\n\n        self.render2dItem = MemoryExplorerItem(None, base.render2d)\n        self.buildList(self.render2dItem)\n\n    def buildList(self, parentItem):\n        for nodePath in parentItem.nodePath.getChildren():\n            item = MemoryExplorerItem(parentItem, nodePath)\n            parentItem.addChild(item)\n            self.buildList(item)\n\n    def analyze(self):\n        self.renderItem.analyze()\n        self.render2dItem.analyze()\n\n    def refresh(self):\n        self.makeList()\n        self.analyze()\n\n        self.resetCtrls()\n        self.createDefaultCtrls()\n\n#--------------------------------------------------------------------------\n#--------------------------------------------------------------------------\nclass MemoryExplorerItem:\n    def __init__(self, parent, nodePath):\n        self.parent = parent\n        self.nodePath = nodePath\n        self.children = []\n\n        self.selfVertexBytes = 0\n        self.childrenVertexBytes = 0\n\n        self.numFaces = 0\n        self.textureBytes = 0\n\n        if parent:\n            self.pathName = parent.pathName + \"/\" +  nodePath.getName()\n        else:\n            self.pathName = nodePath.getName()\n\n    def getParent(self):\n        return self.parent\n\n    def addChild(self, child):\n        self.children.append(child)\n\n    def getNumChildren(self):\n        return len(self.children)\n\n    def getChildren(self):\n        return self.children\n\n    def getName(self):\n        return self.nodePath.getName()\n\n    def getPathName(self):\n        return self.pathName\n\n    def getVertexBytes(self):\n        return self.selfVertexBytes + self.childrenVertexBytes\n\n    def getSelfVertexBytes(self):\n        return self.selfVertexBytes\n\n    def analyze(self):\n        self.selfVertexBytes = 0\n        self.childrenVertexBytes = 0\n\n        self.numFaces = 0\n        self.textureBytes = 0\n\n        self.calcTextureBytes()\n\n        if self.nodePath.node().isGeomNode():\n            geomNode = self.nodePath.node()\n\n            for i in range(geomNode.getNumGeoms()):\n                geom = geomNode.getGeom(i)\n                self.calcVertexBytes(geom)\n                self.calcNumFaces(geom)\n\n        self.analyzeChildren()\n\n    def calcVertexBytes(self, geom):\n        vData = geom.getVertexData()\n        for j in range(vData.getNumArrays()):\n            array = vData.getArray(j)\n            self.selfVertexBytes += array.getDataSizeBytes()\n\n    def calcTextureBytes(self):\n        texCol = self.nodePath.findAllTextures()\n        for i in range(texCol.getNumTextures()):\n            tex = texCol.getTexture(i)\n            self.textureBytes += tex.estimateTextureMemory()\n\n            # what about shared textures by multiple nodes ?\n\n    def calcNumFaces(self, geom):\n        for k in range(geom.getNumPrimitives()):\n            primitive = geom.getPrimitive(k)\n            self.numFaces += primitive.getNumFaces()\n\n    def analyzeChildren(self):\n        for child in self.children:\n            child.analyze()\n            self.childrenVertexBytes += child.getVertexBytes()\n            self.numFaces += child.numFaces\n\n    def ls(self, indent = \"\"):\n        print(indent + self.nodePath.getName() + \" \" + str(self.getVertexBytes()) + \" \" + str(self.numFaces) + \" \" + str(self.textureBytes))\n        indent = indent +  \" \"\n\n        for child in self.children:\n            child.ls(indent)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/tkwidgets/MemoryExplorer.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/1e329885_MemoryExplorer.json",
    "doc_id": "doc_194"
  }
}