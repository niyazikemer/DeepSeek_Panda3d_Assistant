{
  "content": "Frequently Asked Questions\n\nTable of Contents\n\nWhat are the .pz files I am seeing in the samples?\n\nThose are files that are zipped with pzip. Along with punzip, these command-line tools handle compression of files in a format that Panda3D can read; pzip for compressing and punzip for decompressing. Usage:\n\npzip file [file2 file3 ...]\npzip -o dest_file file\n\nUsage:\n\npunzip file.pz [file2.pz file3.pz ...]\npunzip -o dest_file file.pz\n\nWhat are the .pyc files that are created after I run the Python interpreter?\n\n.pyc files are compiled versions of Python sources. Similarly, .pyo files are both compiled and \"optimized\". As an important speed-up of the start-up time for short programs that use a lot of standard modules, if a file called \"spam.pyc\" exists in the directory where \"spam.py\" is found, this is assumed to contain an already-\"byte-compiled\" version of the module spam. The modification time of the version of \"spam.py\" used to create \"spam.pyc\" is recorded in \"spam.pyc\", and the file is ignored if these don't match.\n\nOptimized bytecode (.pyo) is not generated by default, but you may tell the interpreter to generate them instead of the regular .pyc. When '-O' is added to the command, all assert statements are removed before compiling. When '-OO' is added instead of '-O', all __doc__ strings are removed as well before compiling. Note that these optimizations currently do not significantly improve performance. The following illustrates how to do this (replace python with ppython on Windows):\n\npython -O file.py\npython -OO file.py\n\nNote: if you wish to run the Python interpreter without generating compiled bytecode files at all, then add '-B' to the command. The following illustrates how to do this (replace python with ppython on Windows):\n\npython -B file.py\n\nWhy are my animations/intervals sometimes skipped when I run something heavy on the CPU before playing them?\n\nIf you'll run this example code you might not see the position interval.\n\nfrom panda3d.core import *\nimport direct.directbase.DirectStart\nfrom direct.interval.IntervalGlobal import *\n\nenv = loader.loadModel('environment')\nenv.reparentTo(render)\nenv.setZ(-4)\n\ndef func():\n    # something heavy on the CPU\n    for i in range(9999999):\n        pass\n    # run the interval after\n    posival.start()\n\nposival = LerpPosInterval(base.cam, 0.4, (0,base.cam.getY()-12,0), base.cam.getPos())\n\nfunc()\n\nbase.run()\n\nBut you will see the interval being played if you comment out the for-loop. What is going on? It looks like Panda3D had skipped the interval, even though it was after the loop, as if Panda3D had \"lost focus\" when running the loop and even after it had finished it needed some time to start running normally again.\n\nThe problem is that everything that happens within one frame is deemed to happen at the same time. This is the \"frame time\" of the clock object--it is the time as of the start of the frame, and everything you do within that frame is deemed to have happened at the \"frame time\".\n\nThis is usually a good thing, because it makes the simulation internally consistent. Frames are atomic. If you start five animations in a row with five different calls to actor.start(), you want them all to have \"started\" at the exact same time, not within a few milliseconds of each other. If you start an interval, you also want it to have started at the same time as every other atomic operation in that frame.\n\nThe problem is when you have a single really long frame. In this case, anything you do at the end of this long frame is considered to have actually happened at the beginning of the frame, and when the next frame rolls around (after some considerable time has elapsed from the previous frame), Panda has to skip over all of the intervening time to catch up, and you miss seeing some part or all of your interval or animation.\n\nThere are several easy solutions. One is to munge the clock while you're computing your slow frame so that it doesn't actually allow time to advance during this period, by putting this line after your loop, etc.\n\nglobalClock.setFrameTime(globalClock.getRealTime())\n\nThis simply resets the \"frame time\" to whatever the current real time is towards the end of your long frame. This will break the atomic-frame rule for (only) that one frame, but in this case that's what you want to happen.\n\nAnother approach, that doesn't involve explicitly munging the clock, would be simply to wait to start the interval until the next frame, for instance with a doMethodLater().\n\ntaskMgr.doMethodLater(0, lambda task, posival=posival: posival.start(),\n                      'startInterval')\n\nI have a bunch of Maya Animations of one model in different mb files. I used maya2egg to port them into panda, but only one of the animations work.\n\nThe key is to use the -cn <character's name> flag in maya2egg for every file. This ensures that the files work together. Let's say you are making an animated dog. You have the following animations:\n\ndog-walk.mb\ndog-sit.mb\ndog-run.mb\n\nTo convert these into panda, you would call\n\nmaya2egg6 dog-walk.mb -a model -cn dog -o dog-model.egg\n\nNote, we can grab the model from any of the animations, as long as they are all using the exact same rig:\n\nmaya2egg6 dog-walk.mb -a chan -cn dog -o dog-walk.egg\nmaya2egg6 dog-sit.mb -a chan -cn dog -o dog-sit.egg\nmaya2egg6 dog-run.mb -a chan -cn dog -o dog-run.egg\n\nI'm using the lookAt() method on a NodePath to point it at another object. It works fine until I point upwards, and then it starts to spin my object around randomly\n\nlookAt() works as long as you aren't telling it to look in the direction of its up vector. The up vector can be specified as the second argument of lookAt().\n\nlookAt(object, Vec3(0, 0, 1))\n\nI'm building a 3D game, and I have a huge world. When my world starts up, the program hangs for a few seconds the first time I look around. Is there any way to avoid this?\n\nIt can take a while to prepare objects to be rendered.\n\nIdeally, you don't want this to happen the first time you see an object. You can offload the wait time to the beginning by calling:\n\n# self.myWorld is a NodePath that contains a ton of objects\nself.myWorld.prepareScene(base.win.getGsg())\n\nThis will walk through the scene graph, starting at self.myWorld, and prepare each object for rendering.\n\nIs there a way to hide the mouse pointer so that it doesn't show up on my screen?\n\nYou can change to properties of the Panda3D window so that it doesn't show the cursor.\n\nprops = WindowProperties()\nprops.setCursorHidden(True)\nbase.win.requestProperties(props)\n\nIf a model has an animation, then is that animation necessarily represented by an additional .egg file?\n\nNo. A .egg file can either be just geometry, just an animation or a combination of the two. It's often easiest, however, to create a separate egg for every animation and an egg that contains just the model/skeleton information.\n\nI have a model with an animation. When I try to play the animation I get a KeyError. Why?\n\nThe exact error is this:\n\nKeyError: lodRoot\n:display: Closing wglGraphicsWindow\n\nThis often happens when you are trying to load animations onto a model that wasn't exported to have animations. There are two pieces to objects that have animations; their geometry and their skeleton. The geometry is what you see when you load a model, the skeleton is what controls the geometry in an animation. If only the geometry was used to make the egg file, you will have problems when you try to play animations. Look at the manual for more details about exporting models as eggs.\n\nI called setTexture('tex.png') and it didn't change or send an error. Why?\n\nTo override an existing texture, you need to specify a priority. The setTexture() call includes an optional priority parameter, and if the priority is less than 1 the texture will not change.\n\nsetTexture('tex.png', 1)\n\nWhy do I get sometimes get an AssertionError when instantiating Sequence?\n\nSpecifically, I get the following error:\n\nassert(self.validateComponents(self.ivals))\nAssertionError\n\nIt happens at this line of code:\n\nmove = Sequence(obj.setX(5))\n\nSequences and Parallels are a way to combine intervals. You can't put anything inside them that isn't an interval. The following would have the same effect and work:\n\nmove = Sequence(Func(obj.setX, 5))\n\nThis will start the execution of the function, but not wait for it to finish.\n\nDoes Panda3D use degrees or radians?\n\nDegrees, but see also the deg2Rad() and rad2Deg() functions. But note that functions like math.sin(), math.cos(), math.tan() are calculated in radians. Don't forget to convert the values!\n\nWhy do all my flat objects look weird when lit?\n\nFlats don't often have a lot of vertices. Lighting is only calculated at the vertices, and then linearly interpolated between the vertices. If your vertices are very far apart, lighting can look very strange--for instance, a point light in the center of a large polygon might not show up at all. (The light is far from all four vertices, even though it's very near the polygon's center.)\n\nOne solution is to create a model with a lot of polygons to pick up the lighting. It also helps to make a flat surface slightly curved to improve its appearance.\n\nAnother approach might be to create an ambient light that only affects this object. See the manual for more detail about attaching lights to objects in your scene.\n\nTo smooth my animations, I used the \"interpolate-frames 1\" option, but it doesn't work somehow. Why?\n\nInterpolate-frames flag gets set in the PartBundle at the time it is first created, and then baked into the model cache. Thenceforth, later changes to the interpolate-frames variable mean nothing. If you changed interpolate-frames flag, you will also need to empty your modelcache folder.\n\nActually, it is not recommended to use interpolate-frames; it is a global setting. It's better to achieve the same effect via actor.setBlend(frameBlend=True), which is a per-actor setting (and doesn't get baked into the model cache).\n\nI'm trying to redirect the output of some commands like myNode.ls() to a file, but the usual method python >> file, myNode.ls() doesn't work. What's the alternative?\n\nThere are several alternative approaches. One approach using StringStream is this:\n\nstrm = StringStream()\nrender.ls(strm)\nopen('out.txt', 'w').write(strm.getData())\n\nThe following is another approach using StringStream:\n\nstrm = StringStream()\ncvMgr.write(strm)\nopen('out.txt', 'w').write(strm.getData())\n\nIf you don't want to use a StringStream you can do this:\n\nstrm = MultiplexStream()\nstrm.addFile(Filename('out.txt'))\nrender.ls(strm)\n\nThere is also a way to specify the output file in the config file.\n\nnotify-output out.txt\n\nHow do I create a node from a string containing a .egg source?\n\nUse the EggData class.\n\negg = EggData()\negg.read(StringStream(eggText))\nmodel = NodePath(loadEggData(egg))\n\nHow can I know which letter is below the pointer when I click on a TextNode?\n\nUse the TextAssembler class.\n\ntn = TextNode('tn')\ntn.setText('abcdef\\nghi')\nta = TextAssembler(tn)\nta.setWtext(tn.getWtext())\nfor ri in range(ta.getNumRows()):\n    for ci in range(ta.getNumCols(ri)):\n        print(\"ri = %s, ci = %s, char = %s, pos = %s, %s\" %\n              (ri, ci, chr(ta.getCharacter(ri, ci)),\n                           ta.getXpos(ri, ci),\n                           ta.getYpos(ri, ci)))",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/01b9b4da_faq.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/ee381fc4_01b9b4da_faq.json",
    "doc_id": "doc_459"
  }
}