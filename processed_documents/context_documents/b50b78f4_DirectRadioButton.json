{
  "content": "\"\"\"A DirectRadioButton is a type of button that, similar to a\nDirectCheckButton, has a separate indicator and can be toggled between\ntwo states.  However, only one DirectRadioButton in a group can be enabled\nat a particular time.\n\nSee the :ref:`directradiobutton` page in the programming manual for a more\nin-depth explanation and an example of how to use this class.\n\"\"\"\n\n__all__ = ['DirectRadioButton']\n\nfrom panda3d.core import PGFrameStyle, VBase4\nfrom . import DirectGuiGlobals as DGG\nfrom .DirectButton import DirectButton\nfrom .DirectLabel import DirectLabel\n\n\nclass DirectRadioButton(DirectButton):\n    \"\"\"\n    DirectRadioButton(parent) - Create a DirectGuiWidget which responds\n    to mouse clicks by setting given value to given variable and\n    execute a callback function (passing that state through) if defined\n    \"\"\"\n\n    def __init__(self, parent = None, **kw):\n        # Inherits from DirectButton\n        # A Direct Frame can have:\n        # - A background texture (pass in path to image, or Texture Card)\n        # - A midground geometry item (pass in geometry)\n        # - A foreground text Node (pass in text string or Onscreen Text)\n        # For a direct button:\n        # Each button has 4 states (ready, press, rollover, disabled)\n        # The same image/geom/text can be used for all four states or each\n        # state can have a different text/geom/image\n        # State transitions happen automatically based upon mouse interaction\n        # Responds to click event and calls command if None\n\n        self.colors = None\n        optiondefs = (\n            ('indicatorValue', 0, self.setIndicatorValue),\n            # variable is a list whose value will be set by this radio button\n            ('variable', [], None),\n            # value is the value to be set when this radio button is selected\n            ('value', [], None),\n            # others is a list of other radio buttons sharing same variable\n            ('others', [], None),\n            # boxBorder defines the space created around the check box\n            ('boxBorder', 0, None),\n            # boxPlacement maps left, above, right, below\n            ('boxPlacement', 'left', None),\n            # boxGeom defines geom to indicate current radio button is selected or not\n            ('boxGeom', None, None),\n            ('boxGeomColor', None, None),\n            ('boxGeomScale', 1.0, None),\n            ('boxImage', None, None),\n            ('boxImageScale', 1.0, None),\n            ('boxImageColor', VBase4(1, 1, 1, 1), None),\n            ('boxRelief', None, None),\n        )\n        # Merge keyword options with default options\n        self.defineoptions(kw, optiondefs)\n        # Initialize superclasses\n        DirectButton.__init__(self, parent)\n        self.indicator = self.createcomponent(\"indicator\", (), None,\n                                              DirectLabel, (self,),\n                                              numStates = 2,\n                                              image = self['boxImage'],\n                                              image_scale = self['boxImageScale'],\n                                              image_color = self['boxImageColor'],\n                                              geom = self['boxGeom'],\n                                              geom_scale = self['boxGeomScale'],\n                                              geom_color = self['boxGeomColor'],\n                                              state = 'disabled',\n                                              text = ('X', 'X'),\n                                              relief = self['boxRelief'],\n                                              )\n\n        # Call option initialization functions\n        self.initialiseoptions(DirectRadioButton)\n        # After initialization with X giving it the correct size, put back space\n        if self['boxGeom'] is None:\n            if 'boxRelief' not in kw and self['boxImage'] is None:\n                self.indicator['relief'] = DGG.SUNKEN\n            self.indicator['text'] = (' ', '*')\n            self.indicator['text_pos'] = (0, -.25)\n        else:\n            self.indicator['text'] = (' ', ' ')\n\n        if self['boxGeomColor'] is not None and self['boxGeom'] is not None:\n            self.colors = [VBase4(1, 1, 1, 0), self['boxGeomColor']]\n            self.component('indicator')['geom_color'] = VBase4(1, 1, 1, 0)\n\n        needToCheck = True\n        if len(self['value']) == len(self['variable']) != 0:\n            for i in range(len(self['value'])):\n                if self['variable'][i] != self['value'][i]:\n                    needToCheck = False\n                    break\n\n        if needToCheck:\n            self.check()\n\n    # Override the resetFrameSize of DirectGuiWidget inorder to provide space for label\n    def resetFrameSize(self):\n        self.setFrameSize(fClearFrame = 1)\n\n    def setFrameSize(self, fClearFrame = 0):\n\n        if self['frameSize']:\n            # Use user specified bounds\n            self.bounds = self['frameSize']\n            frameType = self.frameStyle[0].getType()\n            ibw = self.indicator['borderWidth']\n        else:\n            # Use ready state to compute bounds\n            frameType = self.frameStyle[0].getType()\n            if fClearFrame and (frameType != PGFrameStyle.TNone):\n                self.frameStyle[0].setType(PGFrameStyle.TNone)\n                self.guiItem.setFrameStyle(0, self.frameStyle[0])\n                # To force an update of the button\n                self.guiItem.getStateDef(0)\n            # Clear out frame before computing bounds\n            self.getBounds()\n            # Restore frame style if necessary\n            if frameType != PGFrameStyle.TNone:\n                self.frameStyle[0].setType(frameType)\n                self.guiItem.setFrameStyle(0, self.frameStyle[0])\n\n            # Ok, they didn't set specific bounds,\n            #  let's add room for the label indicator\n            #  get the difference in height\n\n            ibw = self.indicator['borderWidth']\n            indicatorWidth = (self.indicator.getWidth() + (2*ibw[0]))\n            indicatorHeight = (self.indicator.getHeight() + (2*ibw[1]))\n            diff = (indicatorHeight + (2*self['boxBorder']) -\n                    (self.bounds[3] - self.bounds[2]))\n            # If background is smaller then indicator, enlarge background\n            if diff > 0:\n                if self['boxPlacement'] == 'left':            #left\n                    self.bounds[0] += -(indicatorWidth + (2*self['boxBorder']))\n                    self.bounds[3] += diff/2\n                    self.bounds[2] -= diff/2\n                elif self['boxPlacement'] == 'below':          #below\n                    self.bounds[2] += -(indicatorHeight+(2*self['boxBorder']))\n                elif self['boxPlacement'] == 'right':          #right\n                    self.bounds[1] += indicatorWidth + (2*self['boxBorder'])\n                    self.bounds[3] += diff/2\n                    self.bounds[2] -= diff/2\n                else:                                    #above\n                    self.bounds[3] += indicatorHeight + (2*self['boxBorder'])\n\n            # Else make space on correct side for indicator\n            else:\n                if self['boxPlacement'] == 'left':            #left\n                    self.bounds[0] += -(indicatorWidth + (2*self['boxBorder']))\n                elif self['boxPlacement'] == 'below':          #below\n                    self.bounds[2] += -(indicatorHeight + (2*self['boxBorder']))\n                elif self['boxPlacement'] == 'right':          #right\n                    self.bounds[1] += indicatorWidth + (2*self['boxBorder'])\n                else:                                    #above\n                    self.bounds[3] += indicatorHeight + (2*self['boxBorder'])\n\n        # Set frame to new dimensions\n        if frameType != PGFrameStyle.TNone and frameType != PGFrameStyle.TFlat:\n            bw = self['borderWidth']\n        else:\n            bw = (0, 0)\n        # Set frame to new dimensions\n        self.guiItem.setFrame(\n            self.bounds[0] - bw[0],\n            self.bounds[1] + bw[0],\n            self.bounds[2] - bw[1],\n            self.bounds[3] + bw[1])\n\n        # If they didn't specify a position, put it in the center of new area\n        if not self.indicator['pos']:\n            bbounds = self.bounds\n            lbounds = self.indicator.bounds\n            newpos = [0, 0, 0]\n\n            if self['boxPlacement'] == 'left':            #left\n                newpos[0] += bbounds[0]-lbounds[0] + self['boxBorder'] + ibw[0]\n                dropValue = (bbounds[3]-bbounds[2]-lbounds[3]+lbounds[2])/2 + self['boxBorder']\n                newpos[2] += (bbounds[3]-lbounds[3] + self['boxBorder'] -\n                              dropValue)\n            elif self['boxPlacement'] == 'right':            #right\n                newpos[0] += bbounds[1]-lbounds[1] - self['boxBorder'] - ibw[0]\n                dropValue = (bbounds[3]-bbounds[2]-lbounds[3]+lbounds[2])/2 + self['boxBorder']\n                newpos[2] += (bbounds[3]-lbounds[3] + self['boxBorder']\n                              - dropValue)\n            elif self['boxPlacement'] == 'above':            #above\n                newpos[2] += bbounds[3]-lbounds[3] - self['boxBorder'] - ibw[1]\n            else:                                      #below\n                newpos[2] += bbounds[2]-lbounds[2] + self['boxBorder'] + ibw[1]\n\n            self.indicator.setPos(newpos[0], newpos[1], newpos[2])\n\n    def commandFunc(self, event):\n        if len(self['value']) == len(self['variable']) != 0:\n            for i in range(len(self['value'])):\n                self['variable'][i] = self['value'][i]\n        self.check()\n\n    def check(self):\n        self['indicatorValue'] = 1\n        self.setIndicatorValue()\n\n        for other in self['others']:\n            if other != self:\n                other.uncheck()\n\n        if self['command']:\n            # Pass any extra args to command\n            self['command'](*self['extraArgs'])\n\n    def setOthers(self, others):\n        self['others'] = others\n\n    def uncheck(self):\n        self['indicatorValue'] = 0\n        if self.colors is not None:\n            self.component('indicator')['geom_color'] = self.colors[self['indicatorValue']]\n\n    def setIndicatorValue(self):\n        self.component('indicator').guiItem.setState(self['indicatorValue'])\n        if self.colors is not None:\n            self.component('indicator')['geom_color'] = self.colors[self['indicatorValue']]\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/gui/DirectRadioButton.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/b50b78f4_DirectRadioButton.json",
    "doc_id": "doc_80"
  }
}