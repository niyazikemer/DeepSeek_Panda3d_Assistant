{
  "content": "from __future__ import annotations\n\nfrom panda3d.core import NodePath\n\n#\n# GridParent.py\n# Any object that can be parented to the ocean grid\n# (or any grid whose size is too large to represent in 16 bits),\n# should derive from GridParent.  Can be used on client and AI code.\n\n# GridParent will put a node inbetween the object and the grid so\n# that the object is broadcasting its position relative to the gridCell\n# it lies in.\n\nclass GridParent:\n\n    # this lets GridParents share CellOrigins\n    GridZone2CellOrigin: dict[tuple, NodePath] = {}\n    GridZone2count: dict[tuple, int] = {}\n    @staticmethod\n    def getCellOrigin(grid, zoneId):\n        tup = (grid, zoneId)\n        if tup not in GridParent.GridZone2count:\n            GridParent.GridZone2count[tup] = 0\n            # For readability when debugging, append the zone to the name\n            GridParent.GridZone2CellOrigin[tup] = grid.attachNewNode(\"cellOrigin-%s\" % zoneId)\n            # Get grid cell origin\n            cellPos = grid.getZoneCellOrigin(zoneId)\n            # Set the gridNode's position\n            GridParent.GridZone2CellOrigin[tup].setPos(*cellPos)\n        GridParent.GridZone2count[tup] += 1\n        return GridParent.GridZone2CellOrigin[tup]\n    @staticmethod\n    def releaseCellOrigin(grid, zoneId):\n        tup = (grid, zoneId)\n        GridParent.GridZone2count[tup] -= 1\n        if GridParent.GridZone2count[tup] == 0:\n            del GridParent.GridZone2count[tup]\n            GridParent.GridZone2CellOrigin[tup].removeNode()\n            del GridParent.GridZone2CellOrigin[tup]\n\n    def __init__(self, av):\n        # The object on the grid will need to broadcast his position relative to\n        # his current grid cell in order to use 16 bit\n        # telemetry.  To do this, we will have a node attached to the\n        # grid cell origin, and the object will wrtReparent himself to it when\n        # crossing into that grid cell.  We don't need to create a node for each\n        # cell origin.  We just need two nodes:  one that we are currently parented\n        # to, and the other that we will wrtReparentTo.  Just before wrtReparenting\n        # to the new node, set it's position to the new grid cell origin.\n        self.av = av\n        self.grid = None\n        # NOTE: this node gets renamed when it is put on a zone, so if you\n        # are looking for it by name, try cellOrigin*.\n        self.ownCellOrigin = NodePath(\"cellOrigin\")\n        self.cellOrigin = self.ownCellOrigin\n\n    def delete(self):\n        if self.av:\n            if self.av.getParent() == self.cellOrigin:\n                self.av.detachNode()\n            del self.av\n            self.av = None\n        # Remove the gridNodes\n        if self.ownCellOrigin is not None:\n            self.ownCellOrigin.removeNode()\n            self.ownCellOrigin = None\n        if self.grid is not None:\n            self.releaseCellOrigin(self.grid, self.zoneId)\n            self.grid = None\n            self.zoneId = None\n\n    def setGridParent(self, grid, zoneId, teleport=0):\n        # If teleport=0, preserve the avatar's absolute position.  If teleport=1\n        # the avatars previous world position is invalid, so don't wrtReparent,\n        # just do a regular reparent, and let the cellOrigin give us our new position\n\n        # Also, if the avatar has no parent, then force teleport=1\n        if self.av.getParent().isEmpty():\n            teleport = 1\n\n        if not teleport:\n            # Stick the avatar under hidden while we move the cellOrigin into\n            # position so we do not lose the avatars absolute position.\n            self.av.wrtReparentTo(hidden)\n\n        if self.grid is not None:\n            self.releaseCellOrigin(self.grid, self.zoneId)\n        self.grid = grid\n        self.zoneId = zoneId\n        self.cellOrigin = self.getCellOrigin(self.grid, self.zoneId)\n\n        # Reparent our avatar to this node\n        if not teleport:\n            self.av.wrtReparentTo(self.cellOrigin)\n        else:\n            self.av.reparentTo(self.cellOrigin)\n\n        #print(\"gridParent: reparent to %s\" % self.av)\n        #print(\"gridParent: pos = %s, %s\" % (self.av.getPos(), self.av.getParent().getPos()))\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/GridParent.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/ac8cc70f_GridParent.json",
    "doc_id": "doc_322"
  }
}