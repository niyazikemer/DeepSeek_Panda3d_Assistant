{
  "content": "Controlling the Camera\n\nDefault Camera Control System\n\nBy default, Panda3D runs a task that allows you to move the camera using the mouse.\n\ncpp\n\nTo enable it, use the following command:\n\nwindow->setup_trackball();\n\nThe keys to navigate are:\n\nMouse Button Action Left Button Pan left and right. Right Button Move forwards and backwards. Middle Button Rotate around the origin of the application. Right and Middle Buttons Roll the point of view around the view axis.\n\nGo ahead and try this camera control system. The problem with it is that it is sometimes awkward. It is not always easy to get the camera pointed in the direction we want.\n\nTasks <tasks>\n\nUpdate the Code\n\nInstead, we are going to write a task that controls the camera's position explicitly. A task is nothing but a procedure that gets called every frame. Update your code as follows:\n\npython\n\ncontrolling-the-camera.py\n\ncpp\n\ncontrolling-the-camera.cxx\n\npython\n\nThe procedure taskMgr.add() tells Panda3D's task manager to call the procedure spinCameraTask() every frame. This is a procedure that we have written to control the camera. As long as the procedure spinCameraTask() returns the constant Task.cont, the task manager will continue to call it every frame.\n\ncpp\n\nThe procedure taskMgr->add() <.AsyncTaskManager.add> tells Panda3D's task manager to call the procedure spinCameraTask() every frame. This is a procedure that we have written to control the camera. As long as the procedure spinCameraTask() returns the constant AsyncTask.DS_cont, the task manager will continue to call it every frame.\n\nThe object passed to taskMgr->add() <.AsyncTaskManager.add> is an .AsyncTask object. We can use GenericAsyncTask to wrap a global function or static method around a task. We can also pass an additional void* parameter that we can cast into a pointer of any data type we like, which is passed as argument to the task function. A GenericAsyncTask function must look like the following:\n\nAsyncTask::DoneStatus your_task(GenericAsyncTask *task, void *data) {\n  // Do your stuff here.\n\n  // Tell the task manager to continue this task the next frame.\n  // You can also pass DS_done if this task should not be run again.\n  return AsyncTask::DS_cont;\n}\n\nFor more advanced usage, you can subclass AsyncTask and override the do_task method to make it do what you want.\n\nIn our code, the procedure spinCameraTask() calculates the desired position of the camera based on how much time has elapsed. The camera rotates 6 degrees every second. The first two lines compute the desired orientation of the camera; first in degrees, and then in radians. The ~.NodePath.set_pos() call actually sets the position of the camera. (Remember that Y is horizontal and Z is vertical, so the position is changed by animating X and Y while Z is left fixed at 3 units above ground level.) The ~.NodePath.set_hpr() call actually sets the orientation.\n\nRun the Program\n\nThe camera should no longer be underground; and furthermore, it should now be rotating about the clearing:",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/bdbb3389_controlling-the-camera.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/b65a5ded_bdbb3389_controlling-the-camera.json",
    "doc_id": "doc_573"
  }
}