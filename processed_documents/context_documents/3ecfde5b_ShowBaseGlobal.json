{
  "content": "\"\"\"This module serves as a container to hold the global\n:class:`~.ShowBase.ShowBase` instance, as an alternative to using the builtin\nscope.\n\nMany of the variables contained in this module are also automatically written\nto the :mod:`builtins` module when ShowBase is instantiated, making them\navailable to any Python code.  Importing them from this module instead can make\nit easier to see where these variables are coming from.\n\nNote that you cannot directly import :data:`~builtins.base` from this module\nsince ShowBase may not have been created yet; instead, ShowBase dynamically\nadds itself to this module's scope when instantiated.\"\"\"\n\n__all__ = ()\n\nfrom .ShowBase import ShowBase, WindowControls # pylint: disable=unused-import\nfrom direct.directnotify.DirectNotifyGlobal import directNotify, giveNotify # pylint: disable=unused-import\nfrom panda3d.core import VirtualFileSystem, Notify, ClockObject, PandaSystem\nfrom panda3d.core import ConfigPageManager, ConfigVariableManager, ConfigVariableBool\nfrom panda3d.core import NodePath, PGTop\nfrom . import DConfig as config # pylint: disable=unused-import\nfrom .Loader import Loader\nimport warnings\n\n__dev__: bool = ConfigVariableBool('want-dev', __debug__).value\n\nbase: ShowBase\n\n#: The global instance of the :ref:`virtual-file-system`, as obtained using\n#: :meth:`panda3d.core.VirtualFileSystem.getGlobalPtr()`.\nvfs = VirtualFileSystem.getGlobalPtr()\n\n#: The default Panda3D output stream for notifications and logging, as\n#: obtained using :meth:`panda3d.core.Notify.out()`.\nostream = Notify.out()\n\n#: The clock object used by default for rendering and animation, obtained using\n#: :meth:`panda3d.core.ClockObject.getGlobalClock()`.\n#: @deprecated Use `base.clock` instead.\nglobalClock = ClockObject.getGlobalClock()\n\n#: See :meth:`panda3d.core.ConfigPageManager.getGlobalPtr()`.\ncpMgr = ConfigPageManager.getGlobalPtr()\n\n#: See :meth:`panda3d.core.ConfigVariableManager.getGlobalPtr()`.\ncvMgr = ConfigVariableManager.getGlobalPtr()\n\n#: See :meth:`panda3d.core.PandaSystem.getGlobalPtr()`.\npandaSystem = PandaSystem.getGlobalPtr()\n\n#: The root of the 2-D scene graph.  The coordinate system of this node runs\n#: from -1 to 1, with the X axis running from left to right and the Z axis from\n#: bottom to top.\nrender2d = NodePath(\"render2d\")\n\n#: The root of the 2-D scene graph used for GUI rendering.  Unlike render2d,\n#: which may result in elements being stretched in windows that do not have a\n#: square aspect ratio, this node is scaled automatically to ensure that nodes\n#: parented to it do not appear stretched.\naspect2d = render2d.attachNewNode(PGTop(\"aspect2d\"))\n\n#: A dummy scene graph that is not being rendered by anything.\nhidden = NodePath(\"hidden\")\n\n#: The global Loader instance for models, textures, etc.\nloader = Loader()\n\n# Set direct notify categories now that we have config\ndirectNotify.setDconfigLevels()\n\n\ndef run():\n    \"\"\"Deprecated alias for :meth:`base.run() <.ShowBase.run>`.\"\"\"\n    if __debug__:\n        warnings.warn(\"run() is deprecated, use base.run() instead\", DeprecationWarning, stacklevel=2)\n    base.run()\n\n\ndef inspect(anObject):\n    \"\"\"Opens up a :mod:`direct.tkpanels.Inspector` GUI panel for inspecting an\n    object.\"\"\"\n    # Don't use a regular import, to prevent ModuleFinder from picking\n    # it up as a dependency when building a .p3d package.\n    import importlib\n    Inspector = importlib.import_module('direct.tkpanels.Inspector')\n    return Inspector.inspect(anObject)\n\n\nimport builtins\nbuiltins.inspect = inspect  # type: ignore[attr-defined]\n\n# this also appears in AIBaseGlobal\nif (not __debug__) and __dev__:\n    ShowBase.notify.error(\"You must set 'want-dev' to false in non-debug mode.\")\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/ShowBaseGlobal.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/3ecfde5b_ShowBaseGlobal.json",
    "doc_id": "doc_254"
  }
}