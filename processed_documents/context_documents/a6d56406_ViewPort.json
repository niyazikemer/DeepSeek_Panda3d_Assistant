{
  "content": "\"\"\"\nContains classes useful for 3D viewports.\n\nOriginally written by pro-rsoft,\nModified by gjeon.\nModified by Summer 2010 Carnegie Mellon University ETC PandaLE team: fixed a bug in Viewport.Close\n\"\"\"\n\nfrom __future__ import annotations\n\n__all__ = [\"Viewport\", \"ViewportManager\"]\n\nfrom panda3d.core import (\n    BitMask32,\n    CollisionNode,\n    CollisionPlane,\n    NodePath,\n    OrthographicLens,\n    Plane,\n    Point3,\n)\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.directtools.DirectGrid import DirectGrid\nfrom direct.showbase.ShowBase import WindowControls\nfrom direct.directtools.DirectGlobals import LE_CAM_MASKS, LE_showInOneCam\nfrom .WxPandaWindow import WxPandaWindow\nimport wx\n\n\nHORIZONTAL = wx.SPLIT_HORIZONTAL\nVERTICAL   = wx.SPLIT_VERTICAL\nCREATENEW  = 99\nVPLEFT     = 10\nVPFRONT    = 11\nVPTOP      = 12\nVPPERSPECTIVE = 13\n\n\nclass ViewportManager:\n    \"\"\"Manages the global viewport stuff.\"\"\"\n    viewports: list[Viewport] = []\n    gsg = None\n\n    @staticmethod\n    def initializeAll(*args, **kwargs):\n        \"\"\"Calls initialize() on all the viewports.\"\"\"\n        for v in ViewportManager.viewports:\n            v.initialize(*args, **kwargs)\n\n    @staticmethod\n    def updateAll(*args, **kwargs):\n        \"\"\"Calls Update() on all the viewports.\"\"\"\n        for v in ViewportManager.viewports:\n            v.Update(*args, **kwargs)\n\n    @staticmethod\n    def layoutAll(*args, **kwargs):\n        \"\"\"Calls Layout() on all the viewports.\"\"\"\n        for v in ViewportManager.viewports:\n            v.Layout(*args, **kwargs)\n\n\nclass Viewport(WxPandaWindow, DirectObject):  # type: ignore[misc, valid-type]\n    \"\"\"Class representing a 3D Viewport.\"\"\"\n    CREATENEW  = CREATENEW\n    VPLEFT     = VPLEFT\n    VPFRONT    = VPFRONT\n    VPTOP      = VPTOP\n    VPPERSPECTIVE = VPPERSPECTIVE\n    def __init__(self, name, *args, **kwargs):\n        self.name = name\n        DirectObject.__init__(self)\n\n        kwargs['gsg'] = ViewportManager.gsg\n        WxPandaWindow.__init__(self, *args, **kwargs)\n\n        ViewportManager.viewports.append(self)\n        if ViewportManager.gsg is None:\n            ViewportManager.gsg = self.win.getGsg()\n\n        self.camera = None\n        self.lens = None\n        self.camPos = None\n        self.camLookAt = None\n        self.initialized = False\n        self.grid = None\n        self.collPlane = None\n\n    def initialize(self):\n        self.Update()\n        if self.win:\n            self.cam2d = base.makeCamera2d(self.win)\n            self.cam2d.node().setCameraMask(LE_CAM_MASKS[self.name])\n\n        self.cam = base.camList[-1]\n        self.camera = render.attachNewNode(self.name)\n        #self.camera.setName(self.name)\n        #self.camera.reparentTo(render)\n        self.cam.reparentTo(self.camera)\n        self.camNode = self.cam.node()\n\n        self.camNode.setCameraMask(LE_CAM_MASKS[self.name])\n\n        self.bt = base.setupMouse(self.win, True)\n        self.bt.node().setPrefix('_le_%s_'%self.name[:3])\n        mw = self.bt.getParent()\n        mk = mw.getParent()\n        winCtrl = WindowControls(\n                                self.win, mouseWatcher=mw,\n                                cam=self.camera,\n                                camNode = self.camNode,\n                                cam2d=None,\n                                mouseKeyboard =mk,\n                                grid = self.grid)\n        base.setupWindowControls(winCtrl)\n\n        self.initialized = True\n        if self.lens is not None:\n            self.cam.node().setLens(self.lens)\n        if self.camPos is not None:\n            self.camera.setPos(self.camPos)\n        if self.camLookAt is not None:\n            self.camera.lookAt(self.camLookAt)\n\n        self.camLens = self.camNode.getLens()\n\n        if self.name in ['top', 'front', 'left']:\n            x = self.ClientSize.GetWidth() * 0.1\n            y = self.ClientSize.GetHeight() * 0.1\n            self.camLens.setFilmSize(x, y)\n\n        self.Bind(wx.EVT_SIZE, self.onSize)\n\n##     self.accept(\"wheel_down\", self.zoomOut)\n##     self.accept(\"wheel_up\", self.zoomIn)\n##     self.accept(\"page_down\", self.zoomOut)\n##     self.accept(\"page_down-repeat\", self.zoomOut)\n##     self.accept(\"page_up\", self.zoomIn)\n##     self.accept(\"page_up-repeat\", self.zoomIn)\n        #self.accept(\"mouse3\", self.onRightDown)\n\n    def Close(self):\n        \"\"\"Closes the viewport.\"\"\"\n        if self.initialized:\n            wx.Window.Close(self)\n        #base.closeWindow(self.win)\n        ViewportManager.viewports.remove(self)\n\n    def onSize(self, evt):\n        \"\"\"Invoked when the viewport is resized.\"\"\"\n        WxPandaWindow.onSize(self, evt)\n\n        if self.win is not None:\n            newWidth = self.ClientSize.GetWidth()\n            newHeight = self.ClientSize.GetHeight()\n\n            if hasattr(base, \"direct\") and base.direct:\n                for dr in base.direct.drList:\n                    if dr.camNode == self.camNode:\n                        dr.updateFilmSize(newWidth, newHeight)\n                        break\n\n    def onRightDown(self, evt = None):\n        \"\"\"Invoked when the viewport is right-clicked.\"\"\"\n        if evt is None:\n            mpos = wx.GetMouseState()\n            mpos = self.ScreenToClient((mpos.x, mpos.y))\n        else:\n            mpos = evt.GetPosition()\n        self.Update()\n        #self.PopupMenu(self.menu, mpos)\n        #self.menu.Destroy()\n\n    @staticmethod\n    def make(parent, vpType = None):\n        \"\"\"Safe constructor that also takes CREATENEW, VPLEFT, VPTOP, etc.\"\"\"\n        if vpType is None or vpType == CREATENEW:\n            return Viewport(parent)\n        if isinstance(vpType, Viewport):\n            return vpType\n        if vpType == VPLEFT:\n            return Viewport.makeLeft(parent)\n        if vpType == VPFRONT:\n            return Viewport.makeFront(parent)\n        if vpType == VPTOP:\n            return Viewport.makeTop(parent)\n        if vpType == VPPERSPECTIVE:\n            return Viewport.makePerspective(parent)\n        raise TypeError(\"Unknown viewport type: %s\" % vpType)\n\n    @staticmethod\n    def makeOrthographic(parent, name, campos):\n        v = Viewport(name, parent)\n        v.lens = OrthographicLens()\n        v.lens.setFilmSize(30)\n        v.camPos = campos\n        v.camLookAt = Point3(0, 0, 0)\n        v.grid = DirectGrid(parent=render)\n        if name == 'left':\n            v.grid.setHpr(0, 0, 90)\n            collPlane = CollisionNode('LeftGridCol')\n            collPlane.addSolid(CollisionPlane(Plane(1, 0, 0, 0)))\n            collPlane.setIntoCollideMask(BitMask32.bit(21))\n            v.collPlane = NodePath(collPlane)\n            v.collPlane.wrtReparentTo(v.grid)\n            #v.grid.gridBack.findAllMatches(\"**/+GeomNode\")[0].setName(\"_leftViewGridBack\")\n            LE_showInOneCam(v.grid, name)\n        elif name == 'front':\n            v.grid.setHpr(90, 0, 90)\n            collPlane = CollisionNode('FrontGridCol')\n            collPlane.addSolid(CollisionPlane(Plane(0, -1, 0, 0)))\n            collPlane.setIntoCollideMask(BitMask32.bit(21))\n            v.collPlane = NodePath(collPlane)\n            v.collPlane.wrtReparentTo(v.grid)\n            #v.grid.gridBack.findAllMatches(\"**/+GeomNode\")[0].setName(\"_frontViewGridBack\")\n            LE_showInOneCam(v.grid, name)\n        else:\n            collPlane = CollisionNode('TopGridCol')\n            collPlane.addSolid(CollisionPlane(Plane(0, 0, 1, 0)))\n            collPlane.setIntoCollideMask(BitMask32.bit(21))\n            v.collPlane = NodePath(collPlane)\n            v.collPlane.reparentTo(v.grid)\n            #v.grid.gridBack.findAllMatches(\"**/+GeomNode\")[0].setName(\"_topViewGridBack\")\n            LE_showInOneCam(v.grid, name)\n        return v\n\n    @staticmethod\n    def makePerspective(parent):\n        v = Viewport('persp', parent)\n        v.camPos = Point3(-19, -19, 19)\n        v.camLookAt = Point3(0, 0, 0)\n\n        v.grid = DirectGrid(parent=render)\n        collPlane = CollisionNode('PerspGridCol')\n        collPlane.addSolid(CollisionPlane(Plane(0, 0, 1, 0)))\n        #oldBitmask = collPlane.getIntoCollideMask()\n        #collPlane.setIntoCollideMask(BitMask32.bit(21)|oldBitmask)\n        collPlane.setIntoCollideMask(BitMask32.bit(21))\n        v.collPlane = NodePath(collPlane)\n        v.collPlane.reparentTo(v.grid)\n\n        collPlane2 = CollisionNode('PerspGridCol2')\n        collPlane2.addSolid(CollisionPlane(Plane(0, 0, -1, 0)))\n        #oldBitmask = collPlane2.getIntoCollideMask()\n        #collPlane2.setIntoCollideMask(BitMask32.bit(21)|oldBitmask)\n        collPlane2.setIntoCollideMask(BitMask32.bit(21))\n        v.collPlane2 = NodePath(collPlane2)\n        v.collPlane2.reparentTo(v.grid)\n\n        #v.grid.gridBack.findAllMatches(\"**/+GeomNode\")[0].setName(\"_perspViewGridBack\")\n        LE_showInOneCam(v.grid, 'persp')\n        return v\n\n    @staticmethod\n    def makeLeft(parent):\n        return Viewport.makeOrthographic(parent, 'left', Point3(600, 0, 0))\n\n    @staticmethod\n    def makeFront(parent):\n        return Viewport.makeOrthographic(parent, 'front', Point3(0, -600, 0))\n\n    @staticmethod\n    def makeTop(parent):\n        return Viewport.makeOrthographic(parent, 'top', Point3(0, 0, 600))\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/wxwidgets/ViewPort.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/a6d56406_ViewPort.json",
    "doc_id": "doc_17"
  }
}