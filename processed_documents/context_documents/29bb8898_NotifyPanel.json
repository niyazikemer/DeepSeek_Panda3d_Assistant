{
  "content": "\"\"\"Contains the NotifyPanel class.\"\"\"\n\n__all__ = ['NotifyPanel']\n\n\nclass NotifyPanel:\n    \"\"\"NotifyPanel class: this class contains methods for creating\n    a panel to control direct/panda notify categories.\"\"\"\n\n    def __init__(self, directNotify, tl = None):\n        \"\"\"\n        NotifyPanel class pops up a control panel to view/set\n        notify levels for all available DIRECT and PANDA notify categories\n        \"\"\"\n        # Make sure TK mainloop is running\n        from direct.showbase.TkGlobal import Pmw\n        from tkinter import Toplevel, Frame, Label, Radiobutton, IntVar\n        from tkinter import HORIZONTAL, X, W, NW, BOTH, LEFT, RIGHT\n        # To get severity levels\n        from panda3d.core import NSFatal, NSError, NSWarning, NSInfo, NSDebug, NSSpam\n\n        if tl is None:\n            tl = Toplevel()\n            tl.title('Notify Controls')\n            tl.geometry('300x400')\n        # Init active category\n        self.activeCategory = None\n        # Create widgets\n        mainFrame = Frame(tl)\n        # Paned widget for dividing two halves\n        framePane = Pmw.PanedWidget(mainFrame,\n                                    orient = HORIZONTAL)\n        categoryFrame = framePane.add('categories', size = 200)\n        severityFrame = framePane.add('severities', size = 50)\n        # Category frame\n        # Assemble PANDA categories\n        categories = self.getPandaCategoriesAsList()\n        self.__categories = {}\n        categoryNames = []\n        for category in categories:\n            name = category.getBasename()\n            self.__categories[name] = category\n            categoryNames.append(name)\n        # Assemble DIRECT categories\n        for name in directNotify.getCategories():\n            category = directNotify.getCategory(name)\n            self.__categories[name] = category\n            categoryNames.append(name)\n        # Sort resulting list of names\n        categoryNames.sort()\n        # Create a listbox\n        self.categoryList = Pmw.ScrolledListBox(\n            categoryFrame,\n            labelpos = NW, label_text = 'Categories:',\n            label_font=('MSSansSerif', 10, 'bold'),\n            listbox_takefocus = 1,\n            items = categoryNames,\n            selectioncommand = self.setActivePandaCategory)\n        self.categoryList.pack(expand = 1, fill = BOTH)\n\n        # Severity frame\n        Label(severityFrame, text = 'Severity:',\n              font=('MSSansSerif', 10, 'bold'),\n              justify = RIGHT, anchor = W).pack(fill = X, padx = 5)\n        self.severity = IntVar()\n        self.severity.set(0)\n        self.fatalSeverity = Radiobutton(severityFrame, text = 'Fatal',\n                                         justify = LEFT, anchor = W,\n                                         value = NSFatal,\n                                         variable = self.severity,\n                                         command = self.setActiveSeverity)\n        self.fatalSeverity.pack(fill = X)\n        self.errorSeverity = Radiobutton(severityFrame, text = 'Error',\n                                         justify = LEFT, anchor = W,\n                                         value = NSError,\n                                         variable = self.severity,\n                                         command = self.setActiveSeverity)\n        self.errorSeverity.pack(fill = X)\n        self.warningSeverity = Radiobutton(severityFrame, text = 'Warning',\n                                           justify = LEFT, anchor = W,\n                                           value = NSWarning,\n                                           variable = self.severity,\n                                           command = self.setActiveSeverity)\n        self.warningSeverity.pack(fill = X)\n        self.infoSeverity = Radiobutton(severityFrame, text = 'Info',\n                                        justify = LEFT, anchor = W,\n                                        value = NSInfo,\n                                        variable = self.severity,\n                                        command = self.setActiveSeverity)\n        self.infoSeverity.pack(fill = X)\n        self.debugSeverity = Radiobutton(severityFrame, text = 'Debug',\n                                         justify = LEFT, anchor = W,\n                                         value = NSDebug,\n                                         variable = self.severity,\n                                         command = self.setActiveSeverity)\n        self.debugSeverity.pack(fill = X)\n        self.spamSeverity = Radiobutton(severityFrame, text = 'Spam',\n                                        justify = LEFT, anchor = W,\n                                        value = NSSpam,\n                                        variable = self.severity,\n                                        command = self.setActiveSeverity)\n        self.spamSeverity.pack(fill = X)\n        # Pack frames\n        framePane.pack(expand = 1, fill = BOTH)\n        mainFrame.pack(expand = 1, fill = BOTH)\n        # Get listbox\n        listbox = self.categoryList.component('listbox')\n        # Bind updates to arrow buttons\n        listbox.bind('<KeyRelease-Up>', self.setActivePandaCategory)\n        listbox.bind('<KeyRelease-Down>', self.setActivePandaCategory)\n        # And grab focus (to allow keyboard navigation)\n        listbox.focus_set()\n        # And set active index (so keypresses will start with index 0)\n        listbox.activate(0)\n        # Select first item\n        self.categoryList.select_set(0)\n        self.setActivePandaCategory()\n\n    def _getPandaCategories(self, category):\n        categories = [category]\n        for i in range(category.getNumChildren()):\n            child = category.getChild(i)\n            categories.append(self._getPandaCategories(child))\n        return categories\n\n    def getPandaCategories(self):\n        from panda3d.core import Notify\n        topCategory = Notify.ptr().getTopCategory()\n        return self._getPandaCategories(topCategory)\n\n    def _getPandaCategoriesAsList(self, pc, catList):\n        for item in pc:\n            if isinstance(item, list):\n                self._getPandaCategoriesAsList(item, catList)\n            else:\n                catList.append(item)\n\n    def getPandaCategoriesAsList(self):\n        pc = self.getPandaCategories()\n        pcList = []\n        self._getPandaCategoriesAsList(pc, pcList)\n        return pcList[1:]\n\n    def setActivePandaCategory(self, event = None):\n        categoryName = self.categoryList.getcurselection()[0]\n        self.activeCategory = self.__categories.get(categoryName, None)\n        if self.activeCategory:\n            self.severity.set(self.activeCategory.getSeverity())\n\n    def setActiveSeverity(self):\n        if self.activeCategory:\n            self.activeCategory.setSeverity(self.severity.get())\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/tkpanels/NotifyPanel.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/29bb8898_NotifyPanel.json",
    "doc_id": "doc_58"
  }
}