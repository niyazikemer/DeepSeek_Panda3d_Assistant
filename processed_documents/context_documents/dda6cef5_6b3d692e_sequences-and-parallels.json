{
  "content": "Sequences and Parallels\n\nYou will need to have this import statement to use Sequences and Parallels.\n\nfrom direct.interval.IntervalGlobal import *\n\nSequences and Parallels can control when intervals are played. Sequences play intervals one after the other, effectively a \u201cdo in order\u201d command. Parallels are a \u201cdo together,\u201d playing all intervals at the same time. Both have simple formats, and every kind of interval may be used.\n\nmySequence = Sequence(myInterval1, ..., myIntervaln, name=\"Sequence Name\")\nmyParallel = Parallel(myInterval1, ..., myIntervaln, name=\"Parallel Name\")\n\nTo add to sequences or parallels after creating them, use the append method.\n\nmySequence.append(myInterval)\nmyParallel.append(myInterval)\n\nSequences and Parallels may also be combined for even greater control. Also, there is a wait interval that can add a delay to Sequences. While it can be defined beforehand, it does not have to be.\n\ndelay = Wait(2.5)\npandaWalkSeq =\n    Sequence(\n        Parallel(pandaWalk, pandaWalkAnim),\n        delay,\n        Parallel(pandaWalkBack, pandaWalkAnim),\n        Wait(1.0),\n        Func(myFunction, arg1)\n    )\n\nIn the above example, a wait interval is generated. After that, a Sequence is made that uses a Parallel, the defined wait interval, another Parallel, and a wait interval, and a call to the function function myFunction is generated in the Sequence. Such Sequences can get very long very quick, so it may be prudent to define the internal Parallels and Sequences before creating the master Sequence.\n\nOne can do very powerful things with Sequences and Parallels. Examine this Sequence:\n\ns = OnscreenImage('wav_is_playing.png')\ns.reparentTo(aspect2d)\ns.setTransparency(1)\nfadeIn = s.colorScaleInterval(3, (1, 1, 1, 1), (1, 1, 1, 0))\nfadeOut = s.colorScaleInterval(3, (1, 1, 1, 0))\nsound = loader.loadSfx('sound.wav')\n\nSequence(\n    fadeIn,\n    SoundInterval(sound),\n    fadeOut\n).start()\n\nbase.run()\n\nIt fades an image in, plays a sound, waits till sounds stops and then fades the image out. Doing this conventional way would require a class to store state, a task to check timings, and produce messy code.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/6b3d692e_sequences-and-parallels.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/dda6cef5_6b3d692e_sequences-and-parallels.json",
    "doc_id": "doc_480"
  }
}