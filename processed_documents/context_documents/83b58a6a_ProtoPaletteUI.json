{
  "content": "\"\"\"\nDefines ProtoPalette tree UI\n\"\"\"\nimport wx\nimport os\nfrom panda3d.core import Filename\nfrom .ObjectPaletteBase import ObjectBase\nfrom .PaletteTreeCtrl import PaletteTreeCtrl\n\n\nclass UniversalDropTarget(wx.DropTarget):\n    \"\"\"Implements drop target functionality to receive files, bitmaps and text\"\"\"\n    def __init__(self, editor):\n        wx.DropTarget.__init__(self)\n        self.editor = editor\n        self.do = wx.DataObjectComposite()  # the dataobject that gets filled with the appropriate data\n        self.filedo = wx.FileDataObject()\n        self.textdo = wx.TextDataObject()\n        self.bmpdo = wx.BitmapDataObject()\n        self.do.Add(self.filedo)\n        self.do.Add(self.bmpdo)\n        self.do.Add(self.textdo)\n        self.SetDataObject(self.do)\n\n    def OnData(self, x, y, d):\n        \"\"\"\n        Handles drag/dropping files/text or a bitmap\n        \"\"\"\n        if self.GetData():\n            df = self.do.GetReceivedFormat().GetType()\n            if df in [wx.DF_UNICODETEXT, wx.DF_TEXT]:\n                text = self.textdo.GetText()\n                self.editor.ui.protoPaletteUI.tree.ChangeHierarchy(text, x, y)\n\n            elif df == wx.DF_FILENAME:\n                for name in self.filedo.GetFilenames():\n                    self.editor.ui.protoPaletteUI.AquireFile(name)\n\n            elif df == wx.DF_BITMAP:\n                bmp = self.bmpdo.GetBitmap()\n\n        return d  # you must return this\n\nclass ProtoPaletteUI(wx.Panel):\n    def __init__(self, parent, editor):\n        wx.Panel.__init__(self, parent)\n\n        self.editor = editor\n        self.palette = self.editor.protoPalette\n        self.tree = PaletteTreeCtrl(self, treeStyle=wx.TR_EDIT_LABELS|wx.TR_DEFAULT_STYLE, rootName=\"Proto Objects\")\n\n        self.editorTxt = \"Proto Objects Editor\"\n\n        self.opSortAlpha = \"Sort Alphabetical Order\"\n        self.opSortOrig  = \"Sort Original Order\"\n        self.opSort = self.opSortOrig\n\n        self.opAdd    = \"Add Group\"\n        self.opDelete = \"Delete\"\n\n        self.menuItemsGen = list()\n        self.menuItemsGen.append(self.opSortAlpha)\n        self.menuItemsGen.append(self.opSortOrig)\n        self.menuItemsGen.append(self.opAdd)\n\n        self.menuItemsSel = list()\n        self.menuItemsSel.append(self.opSortAlpha)\n        self.menuItemsSel.append(self.opSortOrig)\n        self.menuItemsSel.append(self.opAdd)\n        self.menuItemsSel.append(self.opDelete)\n\n        self.popupmenu = wx.Menu()\n        for item in self.menuItemsGen:\n            menuItem = self.popupmenu.Append(-1, item)\n            self.Bind(wx.EVT_MENU, self.onPopupItemSelected, menuItem)\n\n        self.Bind(wx.EVT_CONTEXT_MENU, self.onShowPopup)\n\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.tree, 1, wx.EXPAND, 0)\n        self.SetSizer(sizer)\n        self.Layout()\n\n        parentSizer = wx.BoxSizer(wx.VERTICAL)\n        parentSizer.Add(self, 1, wx.EXPAND, 0)\n        parent.SetSizer(parentSizer)\n        parent.Layout()\n\n        self.tree.Bind(wx.EVT_TREE_BEGIN_LABEL_EDIT, self.OnBeginLabelEdit)\n        self.tree.Bind(wx.EVT_TREE_END_LABEL_EDIT, self.OnEndLabelEdit)\n\n        self.SetDropTarget(UniversalDropTarget(self.editor))\n\n    def populate(self):\n        dataStructKeys = list(self.palette.dataStruct.keys())\n        self.tree.addTreeNodes(self.tree.GetRootItem(), self.palette.rootName, self.palette.dataStruct, dataStructKeys)\n\n    def OnBeginLabelEdit(self, event):\n        self.editor.ui.bindKeyEvents(False)\n\n    def OnEndLabelEdit(self, event):\n        #import pdb;set_trace()\n        item = event.GetItem()\n        if item != self.tree.GetRootItem():\n            newLabel = event.GetLabel()\n            if self.tree.traverse(self.tree.GetRootItem(), newLabel) is None:\n                oldLabel = self.tree.GetItemText(item)\n                if isinstance(self.editor.protoPalette.findItem(oldLabel), ObjectBase):\n                    event.Veto()\n                    wx.MessageBox(\"Only groups allowed to be renamed\", self.editorTxt, wx.OK|wx.ICON_EXCLAMATION)\n                elif not self.editor.protoPalette.rename(oldLabel, newLabel):\n                    event.Veto()\n                    wx.MessageBox(\"Label '%s' is not allowed\" % newLabel, self.editorTxt, wx.OK|wx.ICON_EXCLAMATION)\n            else:\n                event.Veto()\n                wx.MessageBox(\"There is already an item labled '%s'\" % newLabel, self.editorTxt, wx.OK|wx.ICON_EXCLAMATION)\n        else:\n            event.Veto()\n            wx.MessageBox(\"'%s' renaming is not allowed\" % self.tree.rootName, self.editorTxt, wx.OK|wx.ICON_EXCLAMATION)\n        self.editor.ui.bindKeyEvents(True)\n\n\n    def menuAppendGenItems(self):\n        for item in self.menuItemsGen:\n            menuItem = self.popupmenu.Append(-1, item)\n            self.Bind(wx.EVT_MENU, self.onPopupItemSelected, menuItem)\n\n    def menuAppendSelItems(self):\n        for item in self.menuItemsSel:\n            menuItem = self.popupmenu.Append(-1, item)\n            self.Bind(wx.EVT_MENU, self.onPopupItemSelected, menuItem)\n\n    def onShowPopup(self, event):\n        pos = event.GetPosition()\n        pos = self.ScreenToClient(pos)\n\n        for menuItem in self.popupmenu.GetMenuItems():\n            self.popupmenu.RemoveItem(menuItem)\n\n        hitItem, flags = self.tree.HitTest(pos)\n        if hitItem.IsOk():\n            itemText = self.tree.GetItemText(hitItem)\n            if itemText != self.tree.rootName:\n                self.menuAppendSelItems()\n            else:\n                self.menuAppendGenItems()\n        else:\n            self.menuAppendGenItems()\n\n        self.PopupMenu(self.popupmenu, pos)\n\n    def onPopupItemSelected(self, event):\n        menuItem = self.popupmenu.FindItemById(event.GetId())\n        text = menuItem.GetText()\n        if text == self.opAdd:\n            self.tree.AddGroup()\n        elif text == self.opDelete:\n            self.tree.DeleteSelected()\n        elif text == self.opSortAlpha:\n            self.opSort = self.opSortAlpha\n            self.tree.SortTreeNodes(self.tree.GetRootItem())\n        elif text == self.opSortOrig:\n            self.opSort = self.opSortOrig\n            self.tree.SortTreeNodes(self.tree.GetRootItem())\n\n    def AquireFile(self, filename):\n        name = os.path.basename(filename)\n\n        if self.editor.protoPalette.findItem(name):\n            item = self.tree.traverse(self.tree.root, name)\n            if item:\n                self.tree.DeleteItem(item)\n\n        modelname = Filename.fromOsSpecific(filename).getFullpath()\n        if modelname.endswith('.mb') or\\\n           modelname.endswith('.ma'):\n            self.editor.convertMaya(modelname, self.addNewItem)\n            return\n\n        itemData = ObjectBase(name=name, model=modelname, actor=True)\n        self.editor.protoPalette.add(itemData)\n\n        newItem = self.tree.AppendItem(self.editor.ui.protoPaletteUI.tree.root, name)\n        self.tree.SetItemPyData(newItem, itemData)\n        self.tree.ScrollTo(newItem)\n\n    def addNewItem(self, result):\n        if len(result) == 2:\n            itemData = ObjectBase(name=result[0], model=result[1], actor=False)\n        elif len(result) == 3:\n            itemData = ObjectBase(name=result[0], model=result[1], anims=[result[2]], actor=True)\n        else:\n            return\n        self.palette.add(itemData)\n        newItem = self.tree.AppendItem(self.tree.root, itemData.name)\n        self.tree.SetItemPyData(newItem, itemData)\n        self.tree.ScrollTo(newItem)\n\n    def compareItems(self, item1, item2):\n        data1 = self.tree.GetItemText(item1)\n        data2 = self.tree.GetItemText(item2)\n        if self.opSort == self.opSortAlpha:\n            return (data1 > data2) - (data1 < data2)\n        else:\n            items = list(self.palette.data.keys())\n            index1 = items.index(data1)\n            index2 = items.index(data2)\n            return (index1 > index2) - (index1 < index2)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/ProtoPaletteUI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/83b58a6a_ProtoPaletteUI.json",
    "doc_id": "doc_38"
  }
}