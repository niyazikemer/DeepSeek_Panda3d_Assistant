{
  "content": "Materials\n\nMaterials\n\nMaterials affect how the surfaces of models appear when lights are enabled in Panda. These have various effects such as how shiny an object appears, the brightness of its colors etc. Material properties are combined with textures and lighting to get the final look of an object.\n\nIt must be emphasized that materials only work when lights are applied to an object. Otherwise, materials have no effect.\n\nExplanation of Lighting\n\nWhen light strikes a 3D model, light reflects off the model. If there were no light reflecting off the model, the model would appear pitch black. The light reflecting off the model is what causes it to have a non-black color onscreen. In the real world, light is incredibly complicated --- so complicated, that it is infeasible to do realistic calculations. Instead, Panda3D leaves it in your hands, giving you some basic tools to express how much light you want reflecting from each surface.\n\nThe tools provided are lights and materials. Lights are used to express how much light is striking the model. Materials are used to express how much of the light striking the model is reflected.\n\nPanda3D separates the light striking the model into two general categories: nondirectional, and directional. Directional light is light that comes straight from a particular lamp. Because we know where it's coming from, we also know what direction it is coming from. Nondirectional light is light that maybe came from somewhere, bounced around a bit, and then eventually hit the model. Because we don't know exactly where it came from, we don't know what direction it is coming from. Panda3D handles nondirectional and directional light separately.\n\nThere are four kinds of lights in Panda3D: ambient, point, diffuse, and directional. The ambient light only creates nondirectional light. The other three create directional light.\n\nWhen light strikes the surface of the model, it is the Material that governs how much of it reflects. The Material consists of four values:\n\nDefault Behavior and Explicit Behavior\n\nIf the model does not have an explicit material, does not have a flat color, and does not have vertex colors, the behavior is this:\n\nAll nondirectional light is reflected without being tinted.\n\nAll directional light is scattered without being tinted.\n\nNo specular reflection occurs.\n\nNo emissivity occurs.\n\nIf the model does not have an explicit material, but it does have a flat color or a vertex color, the behavior is this:\n\nAll nondirectional light is reflected after being modulated by the model's color.\n\nAll directional light is scattered after being modulated by the model's color.\n\nNo specular reflection occurs.\n\nNo emissivity occurs.\n\nWhen you set an explicit material on an object, the behavior is as follows:\n\nAll nondirectional light is reflected after being modulated by the explicit ambient color.\n\nAll directional light is scattered after being modulated by the explicit diffuse color.\n\nAll directional light is reflected specularly after being modulated by the explicit specular color.\n\nThe explicit emissive color is added to the light.\n\nIt is possible to mix-and-match explicit with default behavior. For example, you can specify an explicit specular color, but not specify an explicit ambient, diffuse, or emissive color. If you do that, the behavior would be:\n\nAll nondirectional light is reflected after being modulated by the model's color.\n\nAll directional light is scattered after being modulated by the model's color.\n\nAll directional light is reflected specularly after being modulated by the explicit specular color.\n\nNo emissivity occurs.\n\nCreating and Using Materials\n\nTo use explicit materials, import the Materials module when you first begin your script. Then creating Materials is a matter of creating instances of the .Material class and setting the relevant properties:\n\npython\n\nimport direct.directbase.DirectStart\nfrom panda3d.core import Material\n\nmyMaterial = Material()\nmyMaterial.setShininess(5.0) # Make this material shiny\nmyMaterial.setAmbient((0, 0, 1, 1)) # Make this material blue\n\nmyNode = loader.loadModel(\"panda\") # Load the model to apply the material to\nmyNode.setMaterial(myMaterial) # Apply the material to this nodePath\n\ncpp\n\nPT(Material) mat = new Material;\nmat->set_shininess(5.0); // Make this material shiny\nmat->set_ambient(LColor(0, 0, 1, 1)); // Make this material blue\n\nNodePath model = window->load_model(window->get_render(), \"panda\"); // Load the model to apply the material to\nmodel.set_material(mat); // Apply the material to this nodePath\n\nMaterial Properties\n\nThe following table details the properties available in a material, its effects as well as the relevant setter method. Most of these properties have additional get and clear methods as well.\n\nProperty Effects Setter Method Ambient This is the color of the object as it appears in the absence of\ndirect light. This will be multiplied by any ambient lights in effect on\nthe material to set its base color. material.set_ambient((R,G,B,A)) <.Material.set_ambient> Diffuse This is the primary color of an object; the color of the object as\nit appears in direct light, in the absence of highlights. This will be\nmultiplied by any lights in effect on the material to get the color in\nthe parts of the object illuminated by the lights. material.set_diffuse((R,G,B,A)) <.Material.set_diffuse> Emission This is the color of the object as it appears in the absence of any\nlight whatsoever, including ambient light. It is as if the object is\nglowing by this color (although of course it will not illuminate\nneighboring objects) material.set_emission((R,G,B,A)) <.Material.set_emission> Shininess This controls the size of the specular highlight spot. In general,\nlarger numbers produce a smaller specular highlight, which makes the\nobject appear shinier. Smaller numbers produce a larger highlight, which\nmakes the object appear less shiny. material.set_shininess(0..128) <.Material.set_shininess> Specular This is the highlight color of an object: the color of small\nhighlight reflections. material.set_specular((R,G,B,A)) <.Material.set_specular>\n\nOther Material Methods\n\nBesides the setter methods covered above, you can also get material properties using their get methods, such as ~.Material.get_shininess(), ~.Material.get_diffuse(), etc.\n\nProperties can also be reset by using the clear methods: ~.Material.clear_ambient(), ~.Material.clear_specular(), etc. Shininess does not have a clear method.\n\nAdditionally you can check if a material has a property with the has methods: ~.Material.has_ambient(), ~.Material.has_emission(), etc.\n\nMaterials have two other methods that have not been covered yet, set_local(bool) <.Material.set_local> and set_twoside(bool) <.Material.set_twoside>. The former controls whether to use camera-relative specular highlights or orthogonal specular highlights. This should be set to True unless an orthogonal projection camera is in use. The latter controls if lighting should appear on both sides of a polygon. Both these methods have equivalent get methods.\n\nInspecting and Replacing Materials\n\nWhen loading a model from a file, it may be useful to dynamically inspect which materials are present. This is possible using methods provided on the NodePath object that represents the model to which the materials are applied.\n\npython\n\n# Find all materials\nmats = car.findAllMaterials()\n\n# Find a specific material by name (wildcards allowed)\nblue = car.findMaterial(\"blueMetal\")\n\n# Find all materials whose name end in Metal\ncoloredMetals = car.findAllMaterials(\"*Metal\")\n\ncpp\n\n// Find all materials\nMaterialCollection mats = car.find_all_materials();\n\n// Find a specific material by name (wildcards allowed)\nPT(Material) blue = car.find_material(\"blueMetal\");\n\n// Find all materials whose name end in Metal\nMaterialCollection colored_metals = car.find_all_materials(\"*Metal\");\n\nIn some cases, you may want to replace a material with a different one. An easy way to set the material for a node is just to apply it with an override value, meaning it takes precedence over a material applied to any node below it:\n\npython\n\nred = Material()\n#...set up red material\ncar.setMaterial(red, 1)\n\ncpp\n\nPT(Material) red = new Material;\n//...set up red material\ncar.set_material(red, 1);\n\nHowever, this will set the material on all parts of the model. In this case, it will also give the wheels the same red metal look! As of Panda3D 1.10, there is an easy way to replace all instances of a specific material only:\n\npython\n\nblue = car.findMaterial(\"blueMetal\")\nred = Material()\n#...set up red material\n\ncar.replaceMaterial(blue, red)\n\ncpp\n\nPT(Material) blue = car.find_material(\"blueMetal\");\nPT(Material) red = new Material;\n//...set up red material\n\ncar.replace_material(blue, red);\n\nRelated Classes\n\npanda3d.core.Material\n\npanda3d.core.MaterialCollection",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/bf37414e_materials.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/d6e133e8_bf37414e_materials.json",
    "doc_id": "doc_549"
  }
}