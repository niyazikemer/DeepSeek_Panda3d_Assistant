{
  "content": "Starting Panda3D\n\npython\n\nCreating a New Panda3D Application\n\nShowBase\n\nTo start Panda3D, create a text file and save it with the .py extension. PYPE, SPE and IDLE are Python-specific text-editors, but any text editor will work. Enter the following text into your Python file:\n\nfrom direct.showbase.ShowBase import ShowBase\n\n\nclass MyApp(ShowBase):\n\n    def __init__(self):\n        ShowBase.__init__(self)\n\n\napp = MyApp()\napp.run()\n\nHere we made our main class inherit from ~direct.showbase.ShowBase.ShowBase. This class loads most of the other Panda3D modules, and causes the 3D window to appear. The ~direct.showbase.ShowBase.ShowBase.run() method contains the Panda3D main loop. It renders a frame, handles the background tasks, and then repeats. It does not normally return, so it needs to be called only once and must be the last line in your script. In this particular example, there will be nothing to render, so you should expect a window containing an empty grey area.\n\nRunning the Program\n\nOn Windows, Python is already included with Panda3D. To run your program, enter the following in a terminal (command prompt):\n\nppython filename.py\n\nTo run it on GNU/Linux or macOS, enter the following in a terminal:\n\npython filename.py\n\nIf Panda3D has been installed properly, a grey window titled Panda appears. There is nothing we can do with this window, but that will change shortly.\n\ncpp\n\nCreating a New Panda3D Application\n\nTo start Panda3D, create a text file and save it with a .cxx extension. Any text editor will work. Enter the following text into your C++ file:\n\n#include \"pandaFramework.h\"\n#include \"pandaSystem.h\"\n\nint main(int argc, char *argv[]) {\n  // Open a new window framework\n  PandaFramework framework;\n  framework.open_framework(argc, argv);\n\n  // Set the window title and open the window\n  framework.set_window_title(\"My Panda3D Window\");\n  WindowFramework *window = framework.open_window();\n\n  // Here is room for your own code\n\n  // Do the main loop, equal to run() in python\n  framework.main_loop();\n  framework.close_framework();\n  return (0);\n}\n\nFor information about the Window Framework to open a window, click here <the-window-framework>.\n\npandaFramework.h and pandaSystem.h load most of the Panda3D modules. The main_loop() subroutine contains the Panda3D main loop. It renders a frame, handles the background tasks, and then repeats. It does not normally return, so it needs to be called only once and must be the last line in your script. In this particular example, there will be nothing to render, so you should expect a window containing an empty grey area.\n\nRunning the Program\n\nThe steps required to build and run your program were already explained in a previous page <running-your-program>.\n\nIf Panda3D has been installed properly, a gray window titled My Panda3D Window will appear when you run your program. There is nothing we can do with this window, but that will change shortly.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/47c154ed_starting-panda3d.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/34c5e38a_47c154ed_starting-panda3d.json",
    "doc_id": "doc_395"
  }
}