{
  "content": "Worlds, Bodies and Masses\n\nWorlds\n\nTo use the ODE physics system, you need to have an OdeWorld. A world is an essential component in the physics structure, it holds all your rigid bodies and joints, and controls global parameters, such as gravity, for the scene.\n\npython\n\nfrom panda3d.ode import OdeWorld\nmyWorld = OdeWorld()\nmyWorld.setGravity(0, 0, -9.81)\n\ncpp\n\n#include \"odeWorld.h\"\n\nOdeWorld myWorld;\nmyWorld.set_gravity(0, 0, -9.81);\n\nAs you can see, the gravity is set to a downward vector with length 9.81. This value is the average gravity acceleration on Earth. If you want objects to fall faster or slower, (e.g. if your game plays on the Moon, where the gravity acceleration is 1.62 m/s\u00b2) you need to change this value, but in most cases you want to leave it around 9.81 m/s\u00b2.\n\nBodies and masses\n\nIn physics space, the objects that matter are called bodies. In order to have something affected by physics, you need to create an OdeBody, and set an OdeMass on it.\n\nAn OdeMass does not just define how much an object weighs. You roughly have to specify a shape so ODE will know how the mass is divided over the body. Also, ODE will have to know either the density of the object or the mass.\n\nIn the following example the geometry is assumed to be a box-shaped object made of lead, and the box has a width, length and height of 1 meter.\n\npython\n\nfrom panda3d.ode import OdeBody, OdeMass\nmyBody = OdeBody(myWorld)\nmyBody.setPosition(somePandaObject.getPos(render))\nmyBody.setQuaternion(somePandaObject.getQuat(render))\nmyMass = OdeMass()\nmyMass.setBox(11340, 1, 1, 1)\nmyBody.setMass(myMass)\n\ncpp\n\n#include \"odeBody.h\"\n#include \"odeMass.h\"\n\nOdeBody myBody (myWorld);\nmyBody.set_position(somePandaObject.get_pos(render));\nmyBody.set_quaternion(somePandaObject.get_quat(render));\nOdeMass myMass;\nmyMass.set_box(11340, 1, 1, 1);\nmyBody.set_mass(myMass);\n\nFirst, the position and quaternion are set of the body, this is directly copied from the NodePath's pos and quat; do note that when using getPos and getQuat, you need to get them in global coordinate space, this is done here by specifying render as first argument.\n\nThen, a mass is set for the body. The first argument specified in the setBox call is the density of the object, the second is the dimensions (lx, ly, lz) of the box. Each material has it's own density, for example, water has a density of 1000 kg/m\u00b3, copper usually between 8920 and 8960 kg/m\u00b3. The value shown in the example above is the density for lead.\n\nThere are of course cases where you don't know the density (although it is easy to calculate), or when the object is not easy to fit in a box shape. OdeMass provides the following methods:\n\npanda3d.core\n\nMore methods are listed on the ~panda3d.ode.OdeMass page in the API Reference.\n\nFor more complex shapes, you might want to decompose the object into several simple ones, and use the add(other) method to add the masses together. If that still isn't enough, you might want to set the individual parameters of the mass using setParameters, which is not explained here because it that goes beyond the scope of this manual page. Note that the shape you set is not actually used for collisions: it's just used to roughly determine how the mass is divided in the object.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/c8821add_worlds-bodies-masses.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/38bb6ad4_c8821add_worlds-bodies-masses.json",
    "doc_id": "doc_682"
  }
}