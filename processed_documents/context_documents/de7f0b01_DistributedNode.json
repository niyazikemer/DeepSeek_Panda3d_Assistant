{
  "content": "\"\"\"DistributedNode module: contains the DistributedNode class\"\"\"\n\nfrom panda3d.core import NodePath\nfrom . import GridParent\nfrom . import DistributedObject\n\n\nclass DistributedNode(DistributedObject.DistributedObject, NodePath):\n    \"\"\"Distributed Node class:\"\"\"\n\n    def __init__(self, cr):\n        if not hasattr(self, 'DistributedNode_initialized'):\n            self.DistributedNode_initialized = 1\n            self.gotStringParentToken = 0\n            DistributedObject.DistributedObject.__init__(self, cr)\n            if not self.this:\n                NodePath.__init__(self, \"DistributedNode\")\n\n            # initialize gridParent\n            self.gridParent = None\n\n    def disable(self):\n        if self.activeState != DistributedObject.ESDisabled:\n            if not self.isEmpty():\n                self.reparentTo(hidden)\n            DistributedObject.DistributedObject.disable(self)\n\n    def delete(self):\n        if not hasattr(self, 'DistributedNode_deleted'):\n            self.DistributedNode_deleted = 1\n            if not self.isEmpty():\n                self.removeNode()\n            if self.gridParent:\n                self.gridParent.delete()\n            DistributedObject.DistributedObject.delete(self)\n\n    def generate(self):\n        DistributedObject.DistributedObject.generate(self)\n        self.gotStringParentToken = 0\n\n    def setLocation(self, parentId, zoneId, teleport=0):\n        # Redefine DistributedObject setLocation, so that when\n        # location is set to the ocean grid, we can update our parenting\n        # under gridParent\n        DistributedObject.DistributedObject.setLocation(self, parentId, zoneId)\n        parentObj = self.cr.doId2do.get(parentId)\n        if parentObj:\n            # Make sure you in a zone that is in the grid before making a GridParent\n            if (parentObj.isGridParent() and (zoneId >= parentObj.startingZone)):\n                if not self.gridParent:\n                    self.gridParent = GridParent.GridParent(self)\n                self.gridParent.setGridParent(parentObj, zoneId, teleport)\n            else:\n                if self.gridParent:\n                    self.gridParent.delete()\n                    self.gridParent = None\n        else:\n            if self.gridParent:\n                self.gridParent.delete()\n                self.gridParent = None\n\n    def __cmp__(self, other):\n        # DistributedNode inherits from NodePath, which inherits a\n        # definition of __cmp__ from FFIExternalObject that uses the\n        # NodePath's compareTo() method to compare different\n        # NodePaths.  But we don't want this behavior for\n        # DistributedNodes; DistributedNodes should only be compared\n        # pointerwise.\n        if self is other:\n            return 0\n        else:\n            return 1\n\n    ### setParent ###\n\n    def b_setParent(self, parentToken):\n        if isinstance(parentToken, str):\n            self.setParentStr(parentToken)\n        else:\n            self.setParent(parentToken)\n        # it's important to call the local setParent first.\n        self.d_setParent(parentToken)\n\n    def d_setParent(self, parentToken):\n        if isinstance(parentToken, str):\n            self.sendUpdate(\"setParentStr\", [parentToken])\n        else:\n            self.sendUpdate(\"setParent\", [parentToken])\n\n    def setParentStr(self, parentTokenStr):\n        assert self.notify.debug('setParentStr: %s' % parentTokenStr)\n        assert self.notify.debug('isGenerated: %s' % self.isGenerated())\n        if len(parentTokenStr) > 0:\n            self.do_setParent(parentTokenStr)\n            self.gotStringParentToken = 1\n\n    def setParent(self, parentToken):\n        assert self.notify.debug('setParent: %s' % parentToken)\n        assert self.notify.debug('isGenerated: %s' % self.isGenerated())\n        # if we are not yet generated and we just got a parent token\n        # as a string, ignore whatever value comes in here\n        justGotRequiredParentAsStr = ((not self.isGenerated()) and\n                                      self.gotStringParentToken)\n        if not justGotRequiredParentAsStr:\n            if parentToken != 0:\n                self.do_setParent(parentToken)\n        self.gotStringParentToken = 0\n\n    def do_setParent(self, parentToken):\n        \"\"\"do_setParent(self, int parentToken)\n\n        This function is defined simply to allow a derived class (like\n        DistributedAvatar) to override the behavior of setParent if\n        desired.\n        \"\"\"\n        if not self.isDisabled():\n            self.cr.parentMgr.requestReparent(self, parentToken)\n\n    ###### set pos and hpr functions #######\n\n    # setX provided by NodePath\n    def d_setX(self, x):\n        self.sendUpdate(\"setX\", [x])\n\n    # setY provided by NodePath\n    def d_setY(self, y):\n        self.sendUpdate(\"setY\", [y])\n\n    # setZ provided by NodePath\n    def d_setZ(self, z):\n        self.sendUpdate(\"setZ\", [z])\n\n    # setH provided by NodePath\n    def d_setH(self, h):\n        self.sendUpdate(\"setH\", [h])\n\n    # setP provided by NodePath\n    def d_setP(self, p):\n        self.sendUpdate(\"setP\", [p])\n\n    # setR provided by NodePath\n    def d_setR(self, r):\n        self.sendUpdate(\"setR\", [r])\n\n    def setXY(self, x, y):\n        self.setX(x)\n        self.setY(y)\n    def d_setXY(self, x, y):\n        self.sendUpdate(\"setXY\", [x, y])\n\n    def setXZ(self, x, z):\n        self.setX(x)\n        self.setZ(z)\n    def d_setXZ(self, x, z):\n        self.sendUpdate(\"setXZ\", [x, z])\n\n    # setPos provided by NodePath\n    def d_setPos(self, x, y, z):\n        self.sendUpdate(\"setPos\", [x, y, z])\n\n    # setHpr provided by NodePath\n    def d_setHpr(self, h, p, r):\n        self.sendUpdate(\"setHpr\", [h, p, r])\n\n    def setXYH(self, x, y, h):\n        self.setX(x)\n        self.setY(y)\n        self.setH(h)\n    def d_setXYH(self, x, y, h):\n        self.sendUpdate(\"setXYH\", [x, y, h])\n\n    def setXYZH(self, x, y, z, h):\n        self.setPos(x, y, z)\n        self.setH(h)\n    def d_setXYZH(self, x, y, z, h):\n        self.sendUpdate(\"setXYZH\", [x, y, z, h])\n\n    # setPosHpr provided by NodePath\n    def d_setPosHpr(self, x, y, z, h, p, r):\n        self.sendUpdate(\"setPosHpr\", [x, y, z, h, p, r])\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/DistributedNode.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/de7f0b01_DistributedNode.json",
    "doc_id": "doc_292"
  }
}