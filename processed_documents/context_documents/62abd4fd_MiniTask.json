{
  "content": "\"\"\"This module implements a minimum task manager.  It is similar in\nprinciple to the full-featured task manager implemented in Task.py,\nbut it has a sharply reduced feature set--completely bare-bones, in\nfact--and it is designed to be a pure-python implementation that does\nnot require any C++ Panda support, so that it can be loaded before\nPanda has been fully downloaded. \"\"\"\n\n__all__ = ['MiniTask', 'MiniTaskManager']\n\n\nclass MiniTask:\n    done = 0\n    cont = 1\n\n    name: str\n\n    def __init__(self, callback):\n        self.__call__ = callback\n\n\nclass MiniTaskManager:\n\n    def __init__(self):\n        self.taskList = []\n        self.running = 0\n\n    def add(self, task, name):\n        assert isinstance(task, MiniTask)\n        task.name = name\n        self.taskList.append(task)\n\n    def remove(self, task):\n        try:\n            self.taskList.remove(task)\n        except ValueError:\n            pass\n\n    def step(self):\n        i = 0\n        while i < len(self.taskList):\n            task = self.taskList[i]\n            ret = task(task)\n\n            # See if the task is done\n            if ret == task.cont:\n                # Leave it for next frame, its not done yet\n                pass\n\n            else:\n                # Remove the task\n                try:\n                    self.taskList.remove(task)\n                except ValueError:\n                    pass\n                # Do not increment the iterator\n                continue\n\n            # Move to the next element\n            i += 1\n\n    def run(self):\n        self.running = 1\n        while self.running:\n            self.step()\n\n    def stop(self):\n        # Set a flag so we will stop before beginning next frame\n        self.running = 0\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/task/MiniTask.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/62abd4fd_MiniTask.json",
    "doc_id": "doc_212"
  }
}