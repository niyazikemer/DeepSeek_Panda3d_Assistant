{
  "content": "from direct.showbase.DirectObject import DirectObject\nfrom direct.showbase.PythonUtil import ScratchPad, SerialNumGen\n\nif __debug__:\n    from panda3d.core import PStatCollector\n\n\nclass Job(DirectObject):\n    \"\"\"Base class for cpu-intensive or non-time-critical operations that\n    are run through the :class:`.JobManager`.\n\n    To use, subclass and override the `run()` method.\n    \"\"\"\n\n    #: Yielded from the `run()` generator method when the job is done.\n    Done = object()\n\n    #: ``yield None`` is acceptable in place of ``yield Job.Continue``\n    Continue = None\n\n    #: Yield any remaining time for this job until next frame.\n    Sleep = object()\n\n    # These priorities determine how many timeslices a job gets relative to other\n    # jobs. A job with priority of 1000 will run 10 times more often than a job\n    # with priority of 100.\n    Priorities = ScratchPad(Min=1, Low=100, Normal=1000, High=10000)\n    _SerialGen = SerialNumGen()\n\n    def __init__(self, name):\n        self._name = name\n        self._generator = None\n        self._id = Job._SerialGen.next()\n        self._printing = False\n        self._priority = Job.Priorities.Normal\n        self._finished = False\n        if __debug__:\n            self._pstats = PStatCollector(\"App:Tasks:jobManager:%s\" % self._name)\n\n    def destroy(self):\n        del self._name\n        del self._generator\n        del self._printing\n\n    def getFinishedEvent(self):\n        return 'job-finished-%s' % self._id\n\n    def run(self):\n        \"\"\"This should be overridden with a generator that does the\n        needful processing.\n\n        yield `Job.Continue` when possible/reasonable, and try not to run\n        longer than the JobManager's timeslice between yields.\n\n        When done, yield `Job.Done`.\n        \"\"\"\n        raise NotImplementedError(\"don't call down\")\n\n    def getPriority(self):\n        return self._priority\n    def setPriority(self, priority):\n        self._priority = priority\n\n    def printingBegin(self):\n        self._printing = True\n    def printingEnd(self):\n        self._printing = False\n\n    def resume(self):\n        \"\"\"Called every time JobManager is going to start running this job.\"\"\"\n        #if self._printing:\n        #    # we may be suspended/resumed multiple times per frame, that gets spammy\n        #    # if we need to pick out the output of a job, put a prefix onto each line\n        #    # of the output\n        #    print('JOB:%s:RESUME' % self._name)\n\n    def suspend(self):\n        \"\"\"Called when JobManager is going to stop running this job for a\n        while.\n        \"\"\"\n\n        #if self._printing:\n        #    #print('JOB:%s:SUSPEND' % self._name)\n        #    pass\n        #    \"\"\"\n\n    def _setFinished(self):\n        self._finished = True\n        self.finished()\n    def isFinished(self):\n        return self._finished\n\n    def finished(self):\n        # called when the job finishes and has been removed from the JobManager\n        pass\n\n    def getJobName(self):\n        return self._name\n    def _getJobId(self):\n        return self._id\n\n    def _getGenerator(self):\n        if self._generator is None:\n            self._generator = self.run()\n        return self._generator\n    def _cleanupGenerator(self):\n        if self._generator is not None:\n            self._generator = None\n\nif __debug__: # __dev__ not yet available at this point\n    class TestJob(Job):\n        def __init__(self):\n            Job.__init__(self, 'TestJob')\n            self._counter = 0\n            self._accum = 0\n            self._finished = False\n\n        def run(self):\n            self.printingBegin()\n            while True:\n                while self._accum < 100:\n                    self._accum += 1\n                    print('counter = %s, accum = %s' % (self._counter, self._accum))\n                    yield None\n\n                self._accum = 0\n                self._counter += 1\n\n                if self._counter >= 100:\n                    print('Job.Done')\n                    self.printingEnd()\n                    yield Job.Done\n                else:\n                    yield None\n\n    def addTestJob():\n        from direct.showbase.JobManagerGlobal import jobMgr\n        jobMgr.add(TestJob())\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/Job.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/c6235696_Job.json",
    "doc_id": "doc_287"
  }
}