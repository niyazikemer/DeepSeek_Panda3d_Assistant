{
  "content": "Low-Level Render to Texture\n\nRender to Texture Basics\n\nIn Panda3D, rendering to a texture consists of three basic steps:\n\nCreate a hidden window (class .GraphicsBuffer).\n\nRender into the hidden window.\n\nTransfer the contents of the hidden window into a texture.\n\nWhen I say \"transfer\" the contents of a window into a texture, I don't necessarily mean \"copy.\" There are other ways to transfer the contents of a window into a texture that may be faster. For example, if the OpenGL implementation supports the ARB_pbuffers extension, then the transfer might be achieved using wglBindTexImageARB. The Panda user does not need to worry about how the transfer is done. It is only important that you know that Panda will use the fastest means available to transfer the contents of the window into the texture.\n\nTo generalize that a bit, although render-to-texture is usually done with a hidden window (class .GraphicsBuffer), it can also be done with a visible window (class .GraphicsWindow). You can transfer the contents of any window, hidden or not, into a texture. That's potentially useful - for example, you can transfer the contents of the main window into a texture, which you can then use when rendering the next frame. This can be used to create accumulation-buffer-like effects without an accumulation buffer.\n\nThe Simple API\n\nHere is a short snippet of code that creates a hidden window, creates a camera that renders into that window, and creates a scene graph for that camera:\n\npython\n\nmybuffer = base.win.makeTextureBuffer(\"My Buffer\", 512, 512)\nmytexture = mybuffer.getTexture()\nmybuffer.setSort(-100)\nmycamera = base.makeCamera(mybuffer)\nmyscene = NodePath(\"My Scene\")\nmycamera.reparentTo(myscene)\n\ncpp\n\nPT(GraphicsOutput) mybuffer;\nPT(Texture) mytexture;\nPT(Camera) mycamera;\nPT(DisplayRegion) region;\nNodePath mycameraNP;\nNodePath myscene;\n\nmybuffer = window->get_graphics_output()->make_texture_buffer(\"My Buffer\", 512, 512);\nmytexture = mybuffer->get_texture();\nmybuffer->set_sort(-100);\nmycamera = new Camera(\"my camera\");\nmycameraNP = window->get_render().attach_new_node(mycamera);\nregion = mybuffer->make_display_region();\nregion->set_camera(mycameraNP);\nmyscene = NodePath(\"My Scene\");\nmycameraNP.reparent_to(myscene)\n\nThe ~.GraphicsOutput.make_texture_buffer() is the simple interface to the render-to-texture functionality. It creates a new hidden window (usually a .GraphicsBuffer), creates a texture to render into, and connects the texture to the hidden window. The (512, 512) in the function call specifies the size of the hidden window and texture. Of course, you need to use a power-of-two size. You can specify (0, 0) to automatically inherit the size of the parent window. The ~.GraphicsOutput.get_texture() method retrieves the texture, which will be rendered into every frame.\n\nThe ~.GraphicsOutput.set_sort() method sets a window's sort order. This controls the order in which panda renders the various windows. The main window's sort order is zero. By setting the sort order of mybuffer to a negative number, we ensure that mybuffer will be rendered first. That, in turn, ensures that mytexture will be ready to use by the time that the main window is rendered.\n\nThe new hidden window is not automatically connected to the scene graph. In this example, we create a separate scene graph rooted at myscene, create a camera to view that scene graph, and connect the camera to mybuffer.\n\nThe function ~.GraphicsOutput.make_texture_buffer() usually creates a GraphicsBuffer (hidden window), but if the video card is not powerful enough to create an offscreen window, it may not be able to do so. In that case, ~.GraphicsOutput.make_texture_buffer() will create a parasite buffer instead. A parasite buffer is primarily a trick to emulate a GraphicsBuffer on video cards that are less powerful. The trick is this: instead of rendering to an offscreen window and then transferring the data into a texture, panda renders into the main window and then copies the data into the texture. The limitations of this trick are self-evident. First, it garbles the contents of the main window. This is usually no big deal, since the main window is usually cleared and rendered from scratch every frame anyway. The other problem with this trick is that it fails if the main window is smaller than the desired texture. Since neither of these problems is common in practice, ~.GraphicsOutput.make_texture_buffer() will use parasite buffers transparently if GraphicsBuffers are not available.\n\npython\n\nThere is a debugging mode in which ~.GraphicsOutput.make_texture_buffer() will create a visible window (class .GraphicsWindow) instead of a hidden one (class .GraphicsBuffer). To enable this debugging mode, set the boolean variable \"show-buffers #t\" in your panda configuration file.\n\nThe Advanced API\n\nThe simple API is convenient, but there are a few things it can not do. For instance, it can not:\n\nCopy the main window into a texture.\n\nCopy the Z-buffer into a depth texture.\n\nCopy the window into a texture, but not every frame.\n\nLimit or force the use of Parasite buffers.\n\nIf you need this level of control, you need to use a lower-level API. The low-level function that is called for the creation of all buffers and windows is ~.GraphicsEngine.make_output() on the .GraphicsEngine class.\n\npython\n\n# Request 8 RGB bits, no alpha bits, and a depth buffer.\nfb_prop = FrameBufferProperties()\nfb_prop.setRgbColor(True)\nfb_prop.setRgbaBits(8, 8, 8, 0)\nfb_prop.setDepthBits(16)\n\n# Create a WindowProperties object set to 512x512 size.\nwin_prop = WindowProperties(size=(512, 512))\n\n# Don't open a window - force it to be an offscreen buffer.\nflags = GraphicsPipe.BF_refuse_window\n\nbase.graphicsEngine.make_output(base.pipe, \"My Buffer\", -100, fb_prop, win_prop, flags, base.win.getGsg(), base.win)\n\ncpp\n\n// Request 8 RGB bits, no alpha bits, and a depth buffer.\nFrameBufferProperties fb_prop;\nfb_prop.set_rgb_color(true);\nfb_prop.set_rgba_bits(8, 8, 8, 0);\nfb_prop.set_depth_bits(16);\n\n// Create a WindowProperties object set to 512x512 size.\nWindowProperties win_prop;\nwin_prop.set_size(512, 512);\n\n// Don't open a window - force it to be an offscreen buffer.\nint flags = GraphicsPipe::BF_refuse_window;\n\nGraphicsEngine *engine = GraphicsEngine::get_global_ptr();\nengine->make_output(pipe, \"My Buffer\", -100, fb_prop, win_prop, flags, win->get_gsg(), win);\n\nThe method takes a .FrameBufferProperties object describing the requested amount of bits that are available in GPU memory, as well as a WindowProperties object describing the properties of the window to be opened. In the case of an offscreen buffer, which is acquired by passing BF_refuse_window as a flag, only the size setting of the WindowProperties object is used.\n\nOffscreen buffers may require passing in a host window and a host GSG, since the graphics API may require an existing graphics context in order to create an offscreen buffer. When creating a window, the last two parameters may be omitted.\n\nFor the meaning of the various flags, consult the GraphicsPipe API documentation.\n\nSeveral of the Sample Programs <samples> use the lower-level API.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/6da000bc_low-level-render-to-texture.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/ae63d583_6da000bc_low-level-render-to-texture.json",
    "doc_id": "doc_681"
  }
}