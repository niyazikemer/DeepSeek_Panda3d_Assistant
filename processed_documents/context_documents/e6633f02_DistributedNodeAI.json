{
  "content": "from panda3d.core import NodePath\nfrom . import DistributedObjectAI\nfrom . import GridParent\n\n\nclass DistributedNodeAI(DistributedObjectAI.DistributedObjectAI, NodePath):\n    def __init__(self, air, name=None):\n        # Be careful not to create multiple NodePath objects\n        if not hasattr(self, 'DistributedNodeAI_initialized'):\n            self.DistributedNodeAI_initialized = 1\n            DistributedObjectAI.DistributedObjectAI.__init__(self, air)\n            if name is None:\n                name = self.__class__.__name__\n            NodePath.__init__(self, name)\n            self.gridParent = None\n\n    def delete(self):\n        if self.gridParent:\n            self.gridParent.delete()\n            self.gridParent = None\n        if not self.isEmpty():\n            self.removeNode()\n        DistributedObjectAI.DistributedObjectAI.delete(self)\n\n    def setLocation(self, parentId, zoneId, teleport=0):\n        # Redefine DistributedObject setLocation, so that when\n        # location is set to the ocean grid, we can update our parenting\n        # under gridParent\n        DistributedObjectAI.DistributedObjectAI.setLocation(self, parentId, zoneId)\n        parentObj = self.air.doId2do.get(parentId)\n        if parentObj:\n            if parentObj.isGridParent():\n                if not self.gridParent:\n                    self.gridParent = GridParent.GridParent(self)\n                self.gridParent.setGridParent(parentObj, zoneId)\n            else:\n                if self.gridParent:\n                    self.gridParent.delete()\n                    self.gridParent = None\n                    # NOTE: at this point the avatar has been detached from the scene\n                    # graph.  Someone else needs to reparent him to something in the scene graph\n            # TODO: handle DistributedNode parenting\n\n\n    ### setParent ###\n\n    def b_setParent(self, parentToken):\n        if isinstance(parentToken, str):\n            self.setParentStr(parentToken)\n        else:\n            self.setParent(parentToken)\n        self.d_setParent(parentToken)\n\n    def d_setParent(self, parentToken):\n        if isinstance(parentToken, str):\n            self.sendUpdate(\"setParentStr\", [parentToken])\n        else:\n            self.sendUpdate(\"setParent\", [parentToken])\n\n    def setParentStr(self, parentToken):\n        self.notify.debug('setParentStr(%s): %s' % (self.doId, parentToken))\n        if len(parentToken) > 0:\n            self.do_setParent(parentToken)\n\n    def setParent(self, parentToken):\n        self.notify.debug('setParent(%s): %s' % (self.doId, parentToken))\n        if parentToken == 0:\n            senderId = self.air.getAvatarIdFromSender()\n            self.air.writeServerEvent('suspicious', senderId, 'setParent(0)')\n        else:\n            self.do_setParent(parentToken)\n\n    def do_setParent(self, parentToken):\n        self.getParentMgr().requestReparent(self, parentToken)\n\n    ###### set pos and hpr functions #######\n\n    # setX provided by NodePath\n    def d_setX(self, x):\n        self.sendUpdate(\"setX\", [x])\n\n    # setY provided by NodePath\n    def d_setY(self, y):\n        self.sendUpdate(\"setY\", [y])\n\n    # setZ provided by NodePath\n    def d_setZ(self, z):\n        self.sendUpdate(\"setZ\", [z])\n\n    # setH provided by NodePath\n    def d_setH(self, h):\n        self.sendUpdate(\"setH\", [h])\n\n    # setP provided by NodePath\n    def d_setP(self, p):\n        self.sendUpdate(\"setP\", [p])\n\n    # setR provided by NodePath\n    def d_setR(self, r):\n        self.sendUpdate(\"setR\", [r])\n\n    def setXY(self, x, y):\n        self.setX(x)\n        self.setY(y)\n    def d_setXY(self, x, y):\n        self.sendUpdate(\"setXY\", [x, y])\n\n    # setPos provided by NodePath\n    def d_setPos(self, x, y, z):\n        self.sendUpdate(\"setPos\", [x, y, z])\n\n    # setHpr provided by NodePath\n    def d_setHpr(self, h, p, r):\n        self.sendUpdate(\"setHpr\", [h, p, r])\n\n    def setXYH(self, x, y, h):\n        self.setX(x)\n        self.setY(y)\n        self.setH(h)\n    def d_setXYH(self, x, y, h):\n        self.sendUpdate(\"setXYH\", [x, y, h])\n\n    def b_setXYZH(self, x, y, z, h):\n        self.setXYZH(x, y, z, h)\n        self.d_setXYZH(x, y, z, h)\n    def setXYZH(self, x, y, z, h):\n        self.setPos(x, y, z)\n        self.setH(h)\n    def getXYZH(self):\n        pos = self.getPos()\n        h = self.getH()\n        return pos[0], pos[1], pos[2], h\n\n    def d_setXYZH(self, x, y, z, h):\n        self.sendUpdate(\"setXYZH\", [x, y, z, h])\n\n    # setPosHpr provided by NodePath\n    def b_setPosHpr(self, x, y, z, h, p, r):\n        self.setPosHpr(x, y, z, h, p, r)\n        self.d_setPosHpr(x, y, z, h, p, r)\n    def d_setPosHpr(self, x, y, z, h, p, r):\n        self.sendUpdate(\"setPosHpr\", [x, y, z, h, p, r])\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/distributed/DistributedNodeAI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/e6633f02_DistributedNodeAI.json",
    "doc_id": "doc_326"
  }
}