{
  "content": "\"\"\"Contains the SfxPlayer class, a thin utility class for playing sounds at\na particular location.\"\"\"\n\n__all__ = ['SfxPlayer']\n\nimport math\nfrom panda3d.core import AudioSound\n\n\nclass SfxPlayer:\n    \"\"\"\n    Play sound effects, potentially localized.\n    \"\"\"\n\n    UseInverseSquare = 0\n\n    def __init__(self):\n        # volume attenuates according to the inverse square of the\n        # distance from the source. volume = 1/(distance^2)\n        # this is the volume at which a sound is nearly inaudible\n        self.cutoffVolume = .02\n\n        # cutoff for inverse square attenuation\n        if SfxPlayer.UseInverseSquare:\n            self.setCutoffDistance(300.0)\n        else:\n            # Distance at which sounds can no longer be heard\n            # This was determined experimentally\n            self.setCutoffDistance(120.0)\n\n    def setCutoffDistance(self, d):\n        self.cutoffDistance = d\n        # this is the 'raw' distance at which the volume of a sound will\n        # be equal to the cutoff volume\n        rawCutoffDistance = math.sqrt(1./self.cutoffVolume)\n        # this is a scale factor to convert distances so that a sound\n        # located at self.cutoffDistance will have a volume\n        # of self.cutoffVolume\n        self.distanceScale = rawCutoffDistance / self.cutoffDistance\n\n    def getCutoffDistance(self):\n        \"\"\"Return the curent cutoff distance.\"\"\"\n        return self.cutoffDistance\n\n    def getLocalizedVolume(self, node, listenerNode = None, cutoff = None):\n        \"\"\"\n        Get the volume that a sound should be played at if it is\n        localized at this node. We compute this wrt the camera\n        or to listenerNode.\n        \"\"\"\n        d = None\n        if not node.isEmpty():\n            if listenerNode and not listenerNode.isEmpty():\n                d = node.getDistance(listenerNode)\n            else:\n                d = node.getDistance(base.cam)\n        if not cutoff:\n            cutoff = self.cutoffDistance\n        if d is None or d > cutoff:\n            volume = 0\n        else:\n            if SfxPlayer.UseInverseSquare:\n                sd = d*self.distanceScale\n                volume = min(1, 1 / (sd*sd or 1))\n                #print d, sd, volume\n            else:\n                volume = 1 - (d / (cutoff or 1))\n                #print d, volume\n\n        return volume\n\n    def playSfx(\n            self, sfx, looping = 0, interrupt = 1, volume = None,\n            time = 0.0, node=None, listenerNode = None, cutoff = None):\n        if sfx:\n            self.setFinalVolume(sfx, node, volume, listenerNode, cutoff)\n\n            # don't start over if it's already playing, unless\n            # \"interrupt\" was specified\n            if interrupt or (sfx.status() != AudioSound.PLAYING):\n                sfx.setTime(time)\n                sfx.setLoop(looping)\n                sfx.play()\n\n    def setFinalVolume(self, sfx, node, volume, listenerNode, cutoff = None):\n        \"\"\"Calculate the final volume based on all contributed factors.\"\"\"\n        # If we have either a node or a volume, we need to adjust the sfx\n        # The volume passed in multiplies the distance base volume\n        if node or (volume is not None):\n            if node:\n                finalVolume = self.getLocalizedVolume(node, listenerNode, cutoff)\n            else:\n                finalVolume = 1\n            if volume is not None:\n                finalVolume *= volume\n            if node is not None:\n                finalVolume *= node.getNetAudioVolume()\n            sfx.setVolume(finalVolume)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/showbase/SfxPlayer.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/cac8bf59_SfxPlayer.json",
    "doc_id": "doc_289"
  }
}