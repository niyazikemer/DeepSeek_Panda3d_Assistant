{
  "content": "Multi-Pass Rendering\n\nSometimes you may need to draw the same scene more than once per frame, each view looking different. This is where multi-pass rendering comes into play.\n\nThe easiest way to do implement multi-pass rendering is to render offscreen to a separate buffer. You:\n\nset up a .GraphicsBuffer object\n\ncreate a camera for it and\n\nplace the camera in the scene.\n\nHowever, this method assumes you have two independent scene graphs. If you use this method to render the same scene graph, it is only useful for showing the scene from a different camera view. To actually make the scenes have different RenderStates <render-attributes> (i.e. one without lighting, one with lighting) you must also change how each Camera renders the scene.\n\nEach .Camera node has a function called set_initial_state(state) <.Camera.set_initial_state>. It makes every object in the scene get drawn as if the top node in its scene graph has state as its .RenderState. This still means that attributes <render-attributes> can be changed/overridden after the .Camera has been put on a scene.\n\npython\n\n# This makes everything drawn by the default camera use myNodePath's\n# RenderState.\nbase.cam.node().setInitialState(myNodePath.getState())\n\ncpp\n\n// This makes everything drawn by the default camera use myNodePath's\n// RenderState.\nwindow->get_camera(0)->set_initial_state(myNodePath.get_state());\n\nYou may, however, want more control over what .RenderState gets assigned to each node in the scene. You can do this using the .Camera methods set_tag_state_key(key) <.Camera.set_tag_state_key> and set_tag_state(value, state) <.Camera.set_tag_state>. For any .NodePaths that you want to recieve special treatment you call set_tag(key, value) <.NodePath.set_tag> (see common-state-changes). Now, any time the camera sees an object with a tag named key, it is assigned whatever state is associated with value.\n\npython\n\n# Assume we have Shader instances toon_shader and blur_shader\n# and we have a Camera whose NodePath is myCamera\n\n# Create a temporary node in order to create a usable RenderState.\ntempnode = NodePath(\"temp node\")\ntempnode.setShader(toon_shader)\nbase.cam.setTagStateKey(\"Toon Shading\")\nbase.cam.setTagState(\"True\", tempnode.getState())\n\ntempnode = NodePath(\"temp node\")\ntempnode.setShader(blur_shader)\nmyCamera.node().setTagStateKey(\"Blur Shading\")\nmyCamera.node().setTagState(\"True\", tempnode.getState())\n\n# this makes myNodePath and its children get toonShaded\n# when rendered by the default camera\nmyNodePath.setTag(\"Toon Shading\", \"True\")\n# ....\n# now if you want myNodePath to be blurred when seen by myCamera,\n# it's as easy as adding a tag\nmyNodePath.setTag(\"Blur Shading\", \"True\")\n\ncpp\n\n// Assume we have Shader instances toon_shader and blur_shader\n// and we have a Camera whose NodePath is myCamera\n\n// Create a temporary node in order to create a usable RenderState.\nNodePath tempnode(\"temp node\");\ntempnode.set_shader(toon_shader);\nwindow->get_camera(0)->set_tag_state_key(\"Toon Shading\");\nwindow->get_camera(0)->set_tag_state(\"True\", tempnode.get_state());\n\nNodePath tempnode(\"temp node\");\ntempnode.set_shader(blur_shader);\n((Camera *)myCamera.node())->set_tag_state_key(\"Blur Shading\");\n((Camera *)myCamera.node())->set_tag_state(\"True\", tempnode.get_state());\n\n// this makes myNodePath and its children get toonShaded\n// when rendered by the default camera\nmyNodePath.set_tag(\"Toon Shading\", \"True\");\n// ....\n// now if you want myNodePath to be blurred when seen by myCamera,\n// it's as easy as adding a tag\nmyNodePath.set_tag(\"Blur Shading\", \"True\");\n\nFor a full guide about Multi-Pass rendering in Panda3D, please read the Howto on Multipass Rendering of the original Panda3D documentation.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/b8963543_multi-pass-rendering.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/64e38fe4_b8963543_multi-pass-rendering.json",
    "doc_id": "doc_386"
  }
}