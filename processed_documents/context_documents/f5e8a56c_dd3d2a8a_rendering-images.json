{
  "content": "Rendering Images\n\nIn order to render an image, it is necessary to first create a flat piece of geometry consisting of two triangles (usually called a quad or a card) and then apply the desired image as a texture. Panda3D provides convenience methods for creating such a card automatically.\n\npython\n\nOnscreenImage\n\ncpp\n\nNote\n\nThis convenience class is only available in the Python API.\n\nJust like onscreentext, you can use OnscreenImage as a quick way to put an image onscreen. Use an OnscreenImage whenever you want a quick way to display an ordinary image without a lot of fancy requirements.\n\nfrom direct.gui.OnscreenImage import OnscreenImage\nimageObject = OnscreenImage(image='myImage.jpg', pos=(-0.5, 0, 0.02))\n\nIf you want, you can change the image into another one using setImage():\n\nimageObject.setImage('myImage2.jpg')\n\nWhen you want to take the image away, use:\n\nimageObject.destroy()\n\nA full list of arguments that can be passed to the constructor is available on the ~.direct.gui.OnscreenText.OnscreenText page of the API reference.\n\nGenerating a card\n\n.CardMaker is a convenience class that can be used to generate a card with arbitrary dimensions. It can be used for rendering an image in the 3D or 2D scene. The image should be loaded as a texture and then applied to the generated card:\n\npython\n\ncm = CardMaker('card')\ncard = render2d.attachNewNode(cm.generate())\n\ntex = loader.loadTexture('maps/noise.rgb')\ncard.setTexture(tex)\n\ncpp\n\nCardMaker cm(\"card\");\nNodePath card = render2d.attach_new_node(cm.generate());\n\nPT(Texture) tex = TexturePool::load_texture(\"maps/noise.rgb\");\ncard.set_texture(tex);\n\nThis will generate a card that causes the image to be stretched to cover the entire screen. To preserve the aspect ratio of the image, it is necessary to instead parent it to \"aspect2d\", as well as use either .NodePath.set_scale() or .CardMaker.set_frame() to adjust the card dimensions to match the aspect ratio of the image.\n\nSee the .CardMaker class in the API reference for a full list of methods to configure the generated card.\n\nTransparency\n\nTo enable transparency in images, you must tell Panda3D to enable a transparency mode on the object, otherwise the transparent parts of the image will show up as black. This can be done using the following code:\n\npython\n\nfrom panda3d.core import TransparencyAttrib\n\nimage = OnscreenImage(image='myImage.png', pos=(0, 0, 0))\nimage.setTransparency(TransparencyAttrib.MAlpha)\n\ncpp\n\ncard.set_transparency(TransparencyAttrib::M_alpha);\n\nSee the section on transparency-and-blending for some caveats about rendering objects with transparency.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/dd3d2a8a_rendering-images.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/f5e8a56c_dd3d2a8a_rendering-images.json",
    "doc_id": "doc_690"
  }
}