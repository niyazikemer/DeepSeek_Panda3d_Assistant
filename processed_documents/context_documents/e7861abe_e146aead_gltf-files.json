{
  "content": "glTF Files\n\nThe glTF format is the industry standard file format for delivering 3D assets (models and scenes) to 3D engines. It is an open standard maintained by the Khronos Group, with contributors across the industry. It is widely supported as an export format by 3D modelling programs and an import format by game engines.\n\nThe format is based around JSON, a common text-based data interchange format. Like .egg, a file with the .gltf extension can be inspected using a text editor, or it can be programmatically manipulated by any JSON parsing library. There is also a binary variant of the format, .glb, which is used if you wish to pack the textual JSON tree together with any external binary data into the same file efficiently.\n\nAt the time of writing, there are two versions of the glTF standard, version 1.0 and version 2.0, with substantial differences between them. It is recommended to use version 2.0, which is much more prevalent than 1.0.\n\nA particular advantage of this format is its support for PBR (physically-based rendering) materials, which are better supported with glTF than with Egg, although at the moment you will need a custom shader or a third-party add-on such as panda3d-simplepbr to render these materials correctly. glTF is also the format of choice when exporting models from Blender 2.80 and above, as explained here <converting-from-blender>.\n\nInstalling the Plug-In\n\nThere are two ways to load glTF files. By default, Panda3D will load glTF files via the Assimp plug-in <assimp-loader>, but the quality of its converter is not very good. Instead, there is a high quality third-party plug-in for this purpose called panda3d-gltf. It can be installed by typing the following pip command:\n\npython -m pip install -U panda3d-gltf\n\npython\n\nAfter installing this plug-in, no extra steps are needed. You can simply pass any filename with a .gltf extension to the loader.loadModel() <direct.showbase.Loader.Loader.loadModel> call and it will be loaded using this plug-in. Of course, Panda's model cache ensures that the conversion step is only run the first time a particular model is loaded, or whenever it is modified on disk.\n\ncpp\n\nThe plug-in can register itself with Panda's loader system, but since it is written in Python, this functionality is not available to C++ applications. You will need to use the included gltf2bam utility to convert the glTF models to .bam first.\n\nPreviewing glTF Models\n\nSince the pview <pview> utility is written in C++, it cannot take advantage of the panda3d-gltf plug-in. If you try to load a glTF model in pview, it will always be loaded via the Assimp plug-in, which is usually not what you want.\n\nYou should instead use the gltf-viewer utility that is included with panda3d-gltf, since it ensures that the panda3d-gltf plug-in is being used. It also includes a default PBR shader that is able to render any PBR materials that are specified by the glTF asset.\n\nEmbedding Binary Data\n\nWhile the glTF format is a text-based format, some data that is part of a model is required to be in a binary form. This concerns such things as vertex and animation data, which would use considerably more space if it were written out a text form. The glTF standard provides three ways to store this binary data:\n\nThe choice of these options is usually available in the exporter plug-in for the modelling program. Which option you choose is up to you; all three are supported by Panda3D.\n\nExtensions\n\nThe glTF format is defined as an extensible format. A glTF asset can opt-in to a number of externally defined extensions that add additional functionality not provided by the base standard.\n\nBoth the panda3d-gltf and Assimp plug-ins support the following extensions, among others:\n\nKHR_lights_punctual - adds support for light sources\n\nKHR_texture_transform - adds support for texture transformations <texture-transforms>\n\nKHR_materials_ior - makes it possible to specify the index of refraction of a material\n\nTangent and Binormal Vectors\n\nglTF files do not contain binormal vectors, even if normal mapping is used. This may be an issue when using custom shaders that expect a binormal vector to be present for normal mapping. Instead, binormal vectors are intended to be derived from the cross product of the normal and tangent vectors.\n\nThe cross product is not sufficient to indicate the direction of the binormal vector, so the tangent is stored as a 4-component value, with the w component indicating the sign of the binormal vector. This component always contains either the value 1 or -1.\n\nWith this information, the binormal vector can be reconstructed as follows in the vertex shader:\n\nbinormal = cross(p3d_Normal, p3d_Tangent.xyz) * p3d_Tangent.w\n\nDistributing glTF Models\n\npython\n\nWhen building your application <distribution>, the plug-ins responsible for loading glTF models are not distributed along by default. It is much better to convert the model to the optimized .bam format for this purpose. As of Panda3D 1.10.13, this can be done automatically, by adding the extensions to the bam_model_extensions list:\n\noptions = {\n    'build_apps': {\n        ...\n        'include_patterns': [\n            # Make sure the gltf/glb file is being found\n            '**/*.gltf',\n            '**/*.glb',\n            '**/*.jpg',\n            ...\n        ],\n        # Models with these extensions are converted to .bam automatically\n        'bam_model_extensions': ['.gltf', '.glb', '.egg'],\n        ...\n\ncpp\n\nTo avoid having to include the plug-ins with a distributed application, use the gltf2bam utility (provided with panda3d-gltf) or write a script to convert the model to .bam using .NodePath.write_bam_file() and ship the converted .bam file instead of the original source file.\n\nExternal Links\n\nFor more information on panda3d-gltf, or to report issues, see the project's GitHub page.\n\nThe full text of the glTF specification can be found on the Khronos website:\n\nhttps://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html\n\nSample models in the glTF format are available from this GitHub repository:\n\nhttps://github.com/KhronosGroup/glTF-Sample-Models",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/e146aead_gltf-files.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/e7861abe_e146aead_gltf-files.json",
    "doc_id": "doc_610"
  }
}