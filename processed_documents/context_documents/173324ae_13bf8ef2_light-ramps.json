{
  "content": "Light Ramps\n\nIn standard OpenGL and DirectX lighting, the following calculations are performed:\n\nthe lighting value is calculated\n\nit is clamped to the range 0-1\n\nit is combined with the textures\n\nit is clamped to the range 0-1 again\n\nit is written to the frame buffer\n\nThis process contains two clamps. The .LightRampAttrib is a means to specify that you wish to replace these two clamping operators with something a little smarter. This is particularly relevant for two major graphics algorithms: HDR tone mapping, and cartoon shading.\n\nIt must be emphasized that light ramps have no effect unless per-pixel lighting is enabled via the shader generator <the-shader-generator>.\n\nHDR Tone Mapping\n\nNote\n\nFor a more advanced way to apply High Dynamic Range rendering, see the HDR postprocessing filter described in common-image-filters.\n\nIn HDR tone mapping, the first clamp is removed entirely, and the second one is replaced with the tone mapping operator. The tone mapping operator maps brightness values in the range 0-infinity to new brightness values in the range 0-1, however, it does so without clamping. To turn on HDR tone mapping, use one of the following:\n\npython\n\nnp.setAttrib(LightRampAttrib.makeHdr0())\nnp.setAttrib(LightRampAttrib.makeHdr1())\nnp.setAttrib(LightRampAttrib.makeHdr2())\n\ncpp\n\nnp.set_attrib(LightRampAttrib::make_hdr0());\nnp.set_attrib(LightRampAttrib::make_hdr1());\nnp.set_attrib(LightRampAttrib::make_hdr2());\n\nThe HDR2 tone mapping operator is a familiar operator that is used in many systems. It has the downside that it tends to reduce contrast a lot:\n\nFINAL_RGB = (RGB) / (RGB + 1)\n\nThe HDR1 tone mapping operator is similar, but it allocates more of the contrast range to brightnesses in the range 0-1, and less to brightnesses in the range 1-infinity. This yields a higher-contrast scene, but with more washout:\n\nFINAL_RGB = (RGB^2 + RGB) / (RGB^2 + RGB + 1)\n\nThe HDR0 tone mapping operator allocates even more of the available contrast range to brightnesses in the range 0-1. This is even more contrasty, but with even more washout:\n\nFINAL_RGB = (RGB^3 + RGB^2 + RGB) / (RGB^3 + RGB^2 + RGB + 1)\n\nCartoon Shading (Quantized Lighting)\n\nIn cartoon shading, the first clamp is removed entirely, and the second one is replaced with a quantization function. This replaces a continuous gradient of brightness values with a discrete set of light levels. This quantization function only applies to directional lights, not ambient ones.\n\nTo enable quantized lighting, use one of these:\n\npython\n\nnp.setAttrib(LightRampAttrib.makeSingleThreshold(t0, l0))\nnp.setAttrib(LightRampAttrib.makeDoubleThreshold(t0, l0, t1, l1))\n\ncpp\n\nnp.set_attrib(LightRampAttrib::make_single_threshold(t0, l0));\nnp.set_attrib(LightRampAttrib::make_double_threshold(t0, l0, t1, l1));\n\nIn a single-threshold system, the brightness of the diffuse lighting contribution is compared to the threshold t0. If the threshold is not met, the diffuse light contribution is eliminated. If it is met, the pixel's brightness is normalized to the specified level l0.\n\nIn a double-threshold system, the brightness of the diffuse lighting contribution is compared to the thresholds t0 and t1. If neither is attained, the diffuse light contribution is eliminated. If it is met, the pixel's brightness is normalized to either l0 or l1, depending on which threshold was passed.\n\nFuture Light Ramps\n\nWe are interested in knowing if there are any other light ramps you would like to see. If so, please notify us on the forums.",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/13bf8ef2_light-ramps.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/173324ae_13bf8ef2_light-ramps.json",
    "doc_id": "doc_539"
  }
}