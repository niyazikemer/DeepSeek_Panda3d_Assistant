{
  "content": "Evade\n\n'Evade' is an AI behavior where an AICharacter will move in the opposite direction to a target NodePath or position.\n\nhttps://www.youtube.com/watch?v=JchuRRHqPUQ\n\nIn PandAI, 'Evade' is defined as :\n\naiBehaviors.evade(NodePath target, double panic_distance, double relax_distance, float priority)\n\nwhere :\n\nPanic Distance is the radius of detection.\n\nRelax Distance is the distance from the panic distance radius after which the object should stop evading once evade has been initiated.\n\npriority is by default set to 1.0 and is used when using two or more steering behaviors on an AICharacter.\n\nThe velocity at which the AICharacter evades is determined when you first create your AICharacter object using the AICharacter constructor.\n\nNote: 'Evade' recalculates the direction every frame and so is less efficient than Flee for a static object.\n\nThe full working code in Panda3D :\n\nimport direct.directbase.DirectStart\nfrom panda3d.core import *\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.task import Task\nfrom direct.actor.Actor import Actor\n#for Pandai\nfrom panda3d.ai import *\n#for Onscreen GUI\nfrom direct.gui.OnscreenText import OnscreenText\n\n# Globals\nspeed = 0.75\n\n# Function to put instructions on the screen.\nfont = loader.loadFont(\"cmss12\")\ndef addInstructions(pos, msg):\n    return OnscreenText(text=msg, style=1, fg=(1, 1, 1, 1), font=font,\n                        pos=(-1.3, pos), align=TextNode.ALeft, scale=.05)\n\nclass World(DirectObject):\n\n    def __init__(self):\n        base.disableMouse()\n        base.cam.setPosHpr(0, 0, 55, 0, -90, 0)\n\n        self.loadModels()\n        self.setAI()\n        self.setMovement()\n\n    def loadModels(self):\n        # Seeker\n        ralphStartPos = Vec3(-10, 0, 0)\n        self.evader = Actor(\"models/ralph\",\n                            {\"run\":\"models/ralph-run\"})\n        self.evader.reparentTo(render)\n        self.evader.setScale(0.5)\n        self.evader.setPos(ralphStartPos)\n        # Target\n        self.target = loader.loadModel(\"models/arrow\")\n        self.target.setColor(1,0,0)\n        self.target.setPos(5,0,0)\n        self.target.setScale(1)\n        self.target.reparentTo(render)\n\n    def setAI(self):\n        #Creating AI World\n        self.AIworld = AIWorld(render)\n\n        self.AIchar = AICharacter(\"evader\",self.evader, 100, 0.05, 5)\n        self.AIworld.addAiChar(self.AIchar)\n        self.AIbehaviors = self.AIchar.getAiBehaviors()\n\n        self.AIbehaviors.evade(self.target, 5, 5)\n        self.evader.loop(\"run\")\n\n        #AI World update\n        taskMgr.add(self.AIUpdate, \"AIUpdate\")\n\n    #to update the AIWorld\n    def AIUpdate(self,task):\n        self.AIworld.update()\n        return Task.cont\n\n    #All the movement functions for the Target\n    def setMovement(self):\n        self.keyMap = {\"left\": 0, \"right\": 0, \"up\": 0, \"down\": 0}\n        self.accept(\"arrow_left\", self.setKey, [\"left\", 1])\n        self.accept(\"arrow_right\", self.setKey, [\"right\", 1])\n        self.accept(\"arrow_up\", self.setKey, [\"up\", 1])\n        self.accept(\"arrow_down\", self.setKey, [\"down\", 1])\n        self.accept(\"arrow_left-up\", self.setKey, [\"left\", 0])\n        self.accept(\"arrow_right-up\", self.setKey, [\"right\", 0])\n        self.accept(\"arrow_up-up\", self.setKey, [\"up\", 0])\n        self.accept(\"arrow_down-up\", self.setKey, [\"down\", 0])\n        #movement task\n        taskMgr.add(self.Mover, \"Mover\")\n\n        addInstructions(0.9, \"Use the Arrow keys to move the Red Target\")\n\n    def setKey(self, key, value):\n        self.keyMap[key] = value\n\n    def Mover(self,task):\n        startPos = self.target.getPos()\n        if self.keyMap[\"left\"] != 0:\n            self.target.setPos(startPos + Point3(-speed, 0, 0))\n        if self.keyMap[\"right\"] != 0:\n            self.target.setPos(startPos + Point3(speed, 0, 0))\n        if self.keyMap[\"up\"] != 0:\n            self.target.setPos(startPos + Point3(0, speed, 0))\n        if self.keyMap[\"down\"] != 0:\n            self.target.setPos(startPos + Point3(0, -speed, 0))\n\n        return Task.cont\n\nw = World()\nbase.run()\n\nTo get the full working demo, please visit:\n\nhttps://sites.google.com/site/etcpandai/documentation/steering-behaviors/evade/PandAIEvadeExample.zip?attredirects=0&d=1",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/e4337389_evade.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/d3846491_e4337389_evade.json",
    "doc_id": "doc_587"
  }
}