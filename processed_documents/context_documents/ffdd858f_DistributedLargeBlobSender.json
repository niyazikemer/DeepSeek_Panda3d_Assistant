{
  "content": "\"\"\"DistributedLargeBlobSender module: contains the DistributedLargeBlobSender class\"\"\"\n\nfrom direct.distributed import DistributedObject\nfrom direct.directnotify import DirectNotifyGlobal\nfrom direct.showbase.MessengerGlobal import messenger\nfrom . import LargeBlobSenderConsts\n\n\nclass DistributedLargeBlobSender(DistributedObject.DistributedObject):\n    \"\"\"DistributedLargeBlobSender: for sending large chunks of data through\n    the DC system\"\"\"\n    notify = DirectNotifyGlobal.directNotify.newCategory('DistributedLargeBlobSender')\n\n    def __init__(self, cr):\n        DistributedObject.DistributedObject.__init__(self, cr)\n\n    def generate(self):\n        DistributedLargeBlobSender.notify.debug('generate')\n        DistributedObject.DistributedObject.generate(self)\n        self.complete = 0\n        self.doneEvent = None\n\n    def setMode(self, mode):\n        self.mode = mode\n        self.useDisk = mode & LargeBlobSenderConsts.USE_DISK\n\n    def setTargetAvId(self, avId):\n        self.targetAvId = avId\n\n    def announceGenerate(self):\n        DistributedLargeBlobSender.notify.debug('announceGenerate')\n        DistributedObject.DistributedObject.announceGenerate(self)\n\n        if self.targetAvId != base.localAvatar.doId:\n            # it's not for us\n            return\n\n        if not self.useDisk:\n            self.blob = ''\n\n    def setChunk(self, chunk):\n        DistributedLargeBlobSender.notify.debug('setChunk')\n        assert not self.useDisk\n        if len(chunk) > 0:\n            self.blob += chunk\n        else:\n            self.privOnBlobComplete()\n\n    def setFilename(self, filename):\n        DistributedLargeBlobSender.notify.debug('setFilename: %s' % filename)\n        assert self.useDisk\n\n        import os\n        origDir = os.getcwd()\n        bPath = LargeBlobSenderConsts.getLargeBlobPath()\n        try:\n            os.chdir(bPath)\n        except OSError:\n            DistributedLargeBlobSender.notify.error(\n                'could not access %s' % bPath)\n        f = open(filename, 'rb')\n        self.blob = f.read()\n        f.close()\n        os.unlink(filename)\n        os.chdir(origDir)\n\n        self.privOnBlobComplete()\n\n    def isComplete(self):\n        \"\"\" returns non-zero if we've got the full blob \"\"\"\n        return self.complete\n\n    def setDoneEvent(self, event):\n        self.doneEvent = event\n\n    def privOnBlobComplete(self):\n        assert not self.isComplete()\n        self.complete = 1\n        # announce that we've got it?\n        if self.doneEvent is not None:\n            messenger.send(self.doneEvent, [self.blob])\n\n    def getBlob(self):\n        \"\"\" returns the full blob \"\"\"\n        assert self.isComplete()\n        return self.blob\n\n    def sendAck(self):\n        self.sendUpdate('setAck', [])\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/directutil/DistributedLargeBlobSender.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/ffdd858f_DistributedLargeBlobSender.json",
    "doc_id": "doc_124"
  }
}