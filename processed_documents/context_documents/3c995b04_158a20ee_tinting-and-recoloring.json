{
  "content": "Tinting and Recoloring\n\nColor and the Model Loader\n\nWhen you create a 3D model in Max, Maya, or the like, you can color the model right in the modeling program. I'm not talking about using a texture. I'm talking about just setting a single color to the model as a whole. This is called a \"flat color\". These art programs also allow you to \"paint vertex colors\": you can color each vertex of the model a different color. Of course, sometimes you do neither, in which case the model is just white.\n\nEvery model you load already has a color attribute. Color Attributes are usually not created by the programmer explicitly, they're usually created by the model loader only. There are three possible color attributes created by the model loader:\n\nMethod Explanation .ColorAttrib.make_vertex() Used by the model loader to indicate that the model has vertex\ncolors stored in its vertex arrays. .ColorAttrib.make_flat() Used by the model loader to indicate that the model has a single\nflat color. .ColorAttrib.make_off() Used by the model loader to indicate that no particular color was\nspecified. Essentially the same as flat white, but possibly a little\nfaster to render.\n\nPanda combines these color attributes with the textures. If you are accustomed to Photoshop, you should think of the model's color as the bottom (background) layer, and the textures go above that. By default, each texture is modulated (multiplied) with the previous layer, but as in Photoshop, that can be changed.\n\nRecoloring the Model\n\nIf you wish, you can manually override the color attribute which has been specified by the model loader.\n\npython\n\nnodePath.setColor(r, g, b, a)\n\ncpp\n\nnodePath.set_color(r, g, b, a);\n\nAgain, this is an override. If the model already had vertex colors, these will disappear: the ~.NodePath.set_color() method is replacing those colors with a new one. If the model already had a flat color, that will be replaced with the new flat color.\n\nIt should be mentioned that the color attribute created by the model loader has low priority. That means that even a default-priority ~.NodePath.set_color() is enough to override it.\n\nYou can remove a previous ~.NodePath.set_color() using ~.NodePath.clear_color().\n\nTinting the Model\n\nSometimes, you don't want to replace the existing color; sometimes, you want to tint the existing colors. For this, you need setColorScale:\n\npython\n\nnodePath.setColorScale(r, g, b, a)\n\ncpp\n\nnodePath.set_color_scale(r, g, b, a);\n\nThis color will be modulated (multiplied) with the existing color.\n\nYou can remove a previous ~.NodePath.set_color_scale() using ~.NodePath.clear_color_scale().\n\nDemonstration\n\nTo see the difference between ~.NodePath.set_color() and ~.NodePath.set_color_scale(), try the code sample below. You will need the nik-dragon model from the Cartoon Shading sample program, which has vertex colors and no texture:\n\nimport direct.directbase.DirectStart\nfrom panda3d.core import ColorAttrib\n\n# Load three copies of Nik's dragon, which has vertex colors.\nmodel1 = loader.loadModel(\"nik-dragon\")\nmodel2 = loader.loadModel(\"nik-dragon\")\nmodel3 = loader.loadModel(\"nik-dragon\")\n\n# Put them in the scene.\nmodel1.reparentTo(render)\nmodel2.reparentTo(render)\nmodel3.reparentTo(render)\n\n# Arrange them left-to-right\nmodel1.setPos(-10,50,0)\nmodel2.setPos(  0,50,0)\nmodel3.setPos( 10,50,0)\n\n# Model 1 will be left alone, so you can see the original.\n# Model 2 will be recolored light blue.\n# Model 3 will be tinted light blue.\nmodel2.setColor(0.6, 0.6, 1.0, 1.0)\nmodel3.setColorScale(0.6, 0.6, 1.0, 1.0)\n\nbase.run()\n\nThis produces the following output:\n\nThe model on the left is the original, unaltered model. Nik has used vertex colors throughout. The yellow of the belly, the black eyes, the red mouth, these are all vertex colors. The one in the middle has been setColor ed to a medium-blue color. As you can see, the setColor completely replaces the vertex colors. The one on the right bas been setColorScale ed to the same medium-blue color, but this only tints the model.\n\nA Note about Color Spaces\n\nAll colors that Panda3D expects are floating-point values between 0.0 and 1.0. Panda3D performs no correction or color space conversion before writing them into the framebuffer. This means that if you are using a linear workflow (ie. you have set framebuffer-srgb in Config.prc or are using a post-processing filter that converts the rendered image to sRGB), all colors are specified in \"linearized sRGB\" instead of gamma-encoded sRGB. Applying a color obtained from a color picker is no longer as simple as dividing by 255!\n\nAn easy way to correct existing colors when switching to a linear workflow is to apply a 2.2 gamma. This is a good approximation for the sRGB transform function:\n\npython\n\nmodel1.setColor(LColor(0.6, 0.5, 0.3, 1) ** 2.2)\n\ncpp\n\nmodel1.set_color(powf(0.6, 2.2), powf(0.5, 2.2), powf(0.3, 2.2));\n\nA better method is to use the sRGB conversion functions that Panda3D provides. For example, to apply the #51C2C6 color, you can do as follows:\n\npython\n\nfrom panda3d.core import decode_sRGB_float\n\nmodel1.setColor(\n   decode_sRGB_float(0x51),\n   decode_sRGB_float(0xC2),\n   decode_sRGB_float(0xC6),\n)\n\ncpp\n\n#include \"convert_srgb.h\"\n\nmodel1.set_color(\n   decode_sRGB_float(0x51),\n   decode_sRGB_float(0xC2),\n   decode_sRGB_float(0xC6),\n);\n\nIf you are not using a linear workflow, or don't know what that is, you don't need to worry about this for now.\n\nRelated Classes\n\npanda3d.core.ColorScaleAttrib\n\npanda3d.core.ColorAttrib\n\npanda3d.core.NodePath",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/158a20ee_tinting-and-recoloring.rst",
    "doc_type": "rst",
    "file_path": "processed_documents/context_documents/3c995b04_158a20ee_tinting-and-recoloring.json",
    "doc_id": "doc_658"
  }
}