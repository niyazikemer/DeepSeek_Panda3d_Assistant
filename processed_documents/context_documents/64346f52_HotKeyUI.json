{
  "content": "import wx\nfrom wx.lib.scrolledpanel import ScrolledPanel\n\nclass EditHotKeyDialog(wx.Dialog):\n    def __init__(self, parent, id, title, key):\n        wx.Dialog.__init__(self, parent, id, title, size=(250, 240))\n        self.currKey = key\n        self.panel = wx.Panel(self, -1)\n        self.updateUI()\n        vbox = wx.BoxSizer(wx.VERTICAL)\n        vbox.Add(self.panel, 1, wx.EXPAND, 0)\n        self.SetSizer(vbox)\n        self.Layout()\n\n    def updateUI(self):\n        vbox = wx.BoxSizer(wx.VERTICAL)\n        self.label = wx.StaticText(self.panel, label='')\n        vbox.Add(self.label)\n        self.modifierRadio = wx.RadioBox(self.panel, -1, \"\", choices=['None', 'Shift', 'Control'], majorDimension=1, style=wx.RA_SPECIFY_ROWS)\n        self.modifierRadio.Bind(wx.EVT_RADIOBOX, self.onChangeModifier)\n        vbox.Add(self.modifierRadio)\n        itemPanel = wx.Panel(self.panel)\n        hbox = wx.BoxSizer(wx.HORIZONTAL)\n        keyList = ['']\n        keyList.extend(base.direct.specialKeys)\n        self.specialKeyCombo = wx.Choice(itemPanel, -1, choices=keyList)\n        self.specialKeyCombo.Bind(wx.EVT_CHOICE, self.onChangeSpecialKey)\n        self.keyEntry = wx.TextCtrl(itemPanel, -1, size=(30, 20))\n        button = wx.Button(itemPanel, -1, 'Apply', size=(50, 20))\n        button.Bind(wx.EVT_BUTTON, self.onApply)\n        hbox.Add(self.specialKeyCombo)\n        hbox.Add(self.keyEntry)\n        hbox.Add(button)\n        itemPanel.SetSizer(hbox)\n        vbox.Add(itemPanel)\n        self.panel.SetSizer(vbox)\n\n        keyDesc = base.direct.hotKeyMap[self.currKey]\n        self.label.SetLabel(keyDesc[0])\n        if 'shift' in self.currKey:\n            self.modifierRadio.SetStringSelection('Shift')\n            self.specialKeyCombo.Enable(False)\n            keyStr = self.currKey[len('shift-'):]\n        elif 'control' in self.currKey:\n            self.modifierRadio.SetStringSelection('Control')\n            self.specialKeyCombo.Enable(False)\n            keyStr = self.currKey[len('control-'):]\n        else:\n            self.modifierRadio.SetStringSelection('None')\n            self.specialKeyCombo.Enable(True)\n            keyStr = self.currKey\n\n        if keyStr in base.direct.specialKeys:\n            self.keyEntry.SetValue('')\n            self.keyEntry.Enable(False)\n            self.specialKeyCombo.SetStringSelection(keyStr)\n        else:\n            self.specialKeyCombo.SetStringSelection('')\n            self.keyEntry.SetValue(keyStr)\n\n    def onChangeModifier(self, evt):\n        if evt.GetString() == 'None':\n            self.specialKeyCombo.Enable(True)\n        else:\n            self.specialKeyCombo.SetStringSelection('')\n            self.specialKeyCombo.Enable(False)\n            self.keyEntry.Enable(True)\n\n    def onChangeSpecialKey(self, evt):\n        if evt.GetString() != '':\n            self.keyEntry.SetValue('')\n            self.keyEntry.Enable(False)\n        else:\n            self.keyEntry.Enable(True)\n\n    def onApply(self, evt):\n        modifier = self.modifierRadio.GetStringSelection()\n        if modifier == 'Shift':\n            prefix = 'shift-'\n        elif modifier == 'Control':\n            prefix = 'control-'\n        else:\n            prefix = ''\n\n        specialKey = self.specialKeyCombo.GetStringSelection()\n        if specialKey == '':\n            newKeyStr= prefix + self.keyEntry.GetValue().lower()\n        else:\n            newKeyStr = specialKey\n\n        if newKeyStr != self.currKey:\n            if newKeyStr in list(base.direct.hotKeyMap.keys()):\n                print('a hotkey is to be overridden with %s' % newKeyStr)\n                oldKeyDesc = base.direct.hotKeyMap[newKeyStr]\n                msg = 'The hotkey is already assigned to %s\\n'%oldKeyDesc[0] +\\\n                      'Do you want to override this?'\n\n                dialog = wx.MessageDialog(None, msg, 'Hot Key exists!',\n                                        wx.YES_NO | wx.NO_DEFAULT | wx.ICON_QUESTION)\n                result = dialog.ShowModal()\n                if result == wx.ID_YES:\n                    base.direct.hotKeyMap[newKeyStr] = base.direct.hotKeyMap[self.currKey]\n                    base.direct.hotKeyMap['__removed__' + newKeyStr] = oldKeyDesc\n                    del base.direct.hotKeyMap[self.currKey]\n            else:\n                base.direct.hotKeyMap[newKeyStr] = base.direct.hotKeyMap[self.currKey]\n                del base.direct.hotKeyMap[self.currKey]\n\n        self.Destroy()\n\nclass HotKeyPanel(ScrolledPanel):\n    def __init__(self, parent):\n        ScrolledPanel.__init__(self, parent, -1)\n        self.parent = parent\n        self.updateUI()\n\n    def updateUI(self):\n        vbox = wx.BoxSizer(wx.VERTICAL)\n        for key in sorted(base.direct.hotKeyMap):\n            keyDesc = base.direct.hotKeyMap[key]\n            itemPanel = wx.Panel(self)\n            sizer = wx.BoxSizer(wx.HORIZONTAL)\n            space = wx.StaticText(itemPanel, label='', size=(10,20))\n            hotKey = wx.StaticText(itemPanel, label=key, size=(100, 20))\n            desc = wx.StaticText(itemPanel, label=keyDesc[0], size=(380, 20))\n            button = wx.Button(itemPanel, -1, 'Edit', size=(40, 20))\n            button.Bind(wx.EVT_BUTTON, lambda p0 = None, p1 = key: self.onEdit(p0, p1))\n            sizer.Add(button)\n            sizer.Add(space)\n            sizer.Add(hotKey)\n            sizer.Add(desc, 1, wx.EXPAND)\n            itemPanel.SetSizer(sizer)\n            vbox.Add(itemPanel)\n        self.SetSizer(vbox)\n        self.Layout()\n        self.SetupScrolling(self, scroll_y=True, rate_y=20)\n        self.parent.parent.updateMenu()\n\n    def onEdit(self, evt, key):\n        base.le.ui.bindKeyEvents(False)\n        editUI = EditHotKeyDialog(self, -1, 'Edit Hot Key', key)\n        editUI.ShowModal()\n        editUI.Destroy()\n\n        sizer = self.GetSizer()\n        if sizer is not None:\n            sizer.DeleteWindows()\n            self.SetSizer(None)\n        base.le.ui.bindKeyEvents(True)\n        self.updateUI()\n\nclass HotKeyUI(wx.Dialog):\n    def __init__(self, parent, id, title):\n        wx.Dialog.__init__(self, parent, id, title, size=(550, 500))\n        self.parent = parent\n        panel = HotKeyPanel(self)\n        vbox = wx.BoxSizer(wx.VERTICAL)\n        vbox.Add(panel, 1, wx.EXPAND, 0)\n        self.SetSizer(vbox)\n        self.Layout()\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/leveleditor/HotKeyUI.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/64346f52_HotKeyUI.json",
    "doc_id": "doc_41"
  }
}