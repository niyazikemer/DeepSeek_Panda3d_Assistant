{
  "content": "\"\"\"This module contains the DirectButton class.\n\nSee the :ref:`directbutton` page in the programming manual for a more\nin-depth explanation and an example of how to use this class.\n\"\"\"\n\n__all__ = ['DirectButton']\n\nfrom panda3d.core import Mat4, MouseButton, PGButton\nfrom . import DirectGuiGlobals as DGG\nfrom .DirectFrame import DirectFrame\n\n\nclass DirectButton(DirectFrame):\n    \"\"\"\n    DirectButton(parent) - Create a DirectGuiWidget which responds\n    to mouse clicks and execute a callback function if defined\n    \"\"\"\n\n    def __init__(self, parent = None, **kw):\n        # Inherits from DirectFrame\n        # A Direct Frame can have:\n        # - A background texture (pass in path to image, or Texture Card)\n        # - A midground geometry item (pass in geometry)\n        # - A foreground text Node (pass in text string or Onscreen Text)\n        # For a direct button:\n        # Each button has 4 states (ready, press, rollover, disabled)\n        # The same image/geom/text can be used for all four states or each\n        # state can have a different text/geom/image\n        # State transitions happen automatically based upon mouse interaction\n        # Responds to click event and calls command if None\n        optiondefs = (\n            # Define type of DirectGuiWidget\n            ('pgFunc',         PGButton,   None),\n            ('numStates',      4,          None),\n            ('state',          DGG.NORMAL, None),\n            ('relief',         DGG.RAISED, None),\n            ('invertedFrames', (1,),       None),\n            # Command to be called on button click\n            ('command',        None,       None),\n            ('extraArgs',      [],         None),\n            # Which mouse buttons can be used to click the button\n            ('commandButtons', (DGG.LMB,),     self.setCommandButtons),\n            # Sounds to be used for button events\n            ('rolloverSound', DGG.getDefaultRolloverSound(), self.setRolloverSound),\n            ('clickSound',    DGG.getDefaultClickSound(),    self.setClickSound),\n            # Can only be specified at time of widget contruction\n            # Do the text/graphics appear to move when the button is clicked\n            ('pressEffect',     1,         DGG.INITOPT),\n        )\n        # Merge keyword options with default options\n        self.defineoptions(kw, optiondefs)\n\n        # Initialize superclasses\n        DirectFrame.__init__(self, parent)\n\n        # If specifed, add scaling to the pressed state to make it\n        # look like the button is moving when you press it.  We have\n        # to set up the node first, before we call initialise options;\n        # but we can't actually apply the scale until we have the\n        # bounding volume (which happens during initialise options).\n        pressEffectNP = None\n        if self['pressEffect']:\n            pressEffectNP = self.stateNodePath[1].attachNewNode('pressEffect', 1)\n            self.stateNodePath[1] = pressEffectNP\n\n        # Call option initialization functions\n        self.initialiseoptions(DirectButton)\n\n        # Now apply the scale.\n        if pressEffectNP:\n            bounds = self.getBounds()\n            centerX = (bounds[0] + bounds[1]) / 2\n            centerY = (bounds[2] + bounds[3]) / 2\n\n            # Make a matrix that scales about the point\n            mat = Mat4.translateMat(-centerX, 0, -centerY) * \\\n                  Mat4.scaleMat(0.98) * \\\n                  Mat4.translateMat(centerX, 0, centerY)\n            pressEffectNP.setMat(mat)\n\n    def setCommandButtons(self):\n        # Attach command function to specified buttons\n        # Left mouse button\n        if DGG.LMB in self['commandButtons']:\n            self.guiItem.addClickButton(MouseButton.one())\n            self.bind(DGG.B1CLICK, self.commandFunc)\n        else:\n            self.unbind(DGG.B1CLICK)\n            self.guiItem.removeClickButton(MouseButton.one())\n        # Middle mouse button\n        if DGG.MMB in self['commandButtons']:\n            self.guiItem.addClickButton(MouseButton.two())\n            self.bind(DGG.B2CLICK, self.commandFunc)\n        else:\n            self.unbind(DGG.B2CLICK)\n            self.guiItem.removeClickButton(MouseButton.two())\n        # Right mouse button\n        if DGG.RMB in self['commandButtons']:\n            self.guiItem.addClickButton(MouseButton.three())\n            self.bind(DGG.B3CLICK, self.commandFunc)\n        else:\n            self.unbind(DGG.B3CLICK)\n            self.guiItem.removeClickButton(MouseButton.three())\n\n    def commandFunc(self, event):\n        if self['command']:\n            # Pass any extra args to command\n            self['command'](*self['extraArgs'])\n\n    def setClickSound(self):\n        clickSound = self['clickSound']\n        # Clear out sounds\n        self.guiItem.clearSound(DGG.B1PRESS + self.guiId)\n        self.guiItem.clearSound(DGG.B2PRESS + self.guiId)\n        self.guiItem.clearSound(DGG.B3PRESS + self.guiId)\n        if clickSound:\n            if DGG.LMB in self['commandButtons']:\n                self.guiItem.setSound(DGG.B1PRESS + self.guiId, clickSound)\n            if DGG.MMB in self['commandButtons']:\n                self.guiItem.setSound(DGG.B2PRESS + self.guiId, clickSound)\n            if DGG.RMB in self['commandButtons']:\n                self.guiItem.setSound(DGG.B3PRESS + self.guiId, clickSound)\n\n    def setRolloverSound(self):\n        rolloverSound = self['rolloverSound']\n        if rolloverSound:\n            self.guiItem.setSound(DGG.ENTER + self.guiId, rolloverSound)\n        else:\n            self.guiItem.clearSound(DGG.ENTER + self.guiId)\n",
  "metadata": {
    "source": "corpus_panda3d/source_code/direct/src/gui/DirectButton.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/14ac1a1d_DirectButton.json",
    "doc_id": "doc_91"
  }
}