{
  "content": "# This tutorial provides an example of creating a character and having it walk\n# around using PandAI pathfinding with static obstacle avoidance\n\nfrom direct.showbase.ShowBase import ShowBase\nfrom panda3d.core import *\nfrom direct.showbase.DirectObject import DirectObject\nfrom direct.interval.IntervalGlobal import *\nfrom direct.task import Task\nfrom direct.actor.Actor import Actor\nimport sys\nimport os\nfrom direct.gui.DirectGui import *\nfrom direct.gui.OnscreenText import OnscreenText\n\nfrom panda3d.ai import *\n\nbase = ShowBase()\n\nspeed = 0.75\n\n# Figure out what directory this program is in.\nMYDIR = os.path.abspath(sys.path[0])\nMYDIR = Filename.fromOsSpecific(MYDIR).getFullpath()\n\nfont = loader.loadFont(\"cmss12\")\n\n\n# Function to put instructions on the screen.\ndef addInstructions(pos, msg):\n    return OnscreenText(text=msg, style=1, fg=(1, 1, 1, 1), font=font,\n                        pos=(-1.3, pos), align=TextNode.ALeft, scale=.05)\n\n\n# Function to put title on the screen.\ndef addTitle(text):\n    return OnscreenText(text=text, style=1, fg=(1, 1, 1, 1), font=font,\n                        pos=(1.3, -0.95), align=TextNode.ARight, scale=.07)\n\n\nclass World(DirectObject):\n\n    def __init__(self):\n\n        self.keyMap = {\"left\": 0, \"right\": 0, \"up\": 0, \"down\": 0}\n\n        addTitle(\"Pandai Tutorial: Adding Dynamic Obstacles\")\n        addInstructions(0.95, \"[ESC]: Quit\")\n        addInstructions(0.90, \"[Enter]: Start Pathfinding\")\n        addInstructions(0.85, \"[Arrow Keys]: Move Arrow\")\n        addInstructions(0.80, \"[1]: Small box\")\n        addInstructions(0.75, \"[2]: Big box\")\n        addInstructions(0.70, \"[Space]: Place box\")\n\n        #base.disableMouse()\n        base.cam.setPosHpr(0, -210, 135, 0, 327, 0)\n        self.box = 0\n        self.pointer_move = False\n\n        self.loadModels()\n        self.setAI()\n\n    def loadModels(self):\n\n        self.environ1 = loader.loadModel(\"models/skydome\")\n        self.environ1.reparentTo(render)\n        self.environ1.setScale(1)\n\n        self.environ2 = loader.loadModel(\"models/skydome\")\n        self.environ2.reparentTo(render)\n        self.environ2.setP(180)\n        self.environ2.setH(270)\n        self.environ2.setScale(1)\n\n        self.environ = loader.loadModel(\"models/groundPlane\")\n        self.environ.reparentTo(render)\n\n        # Create the main character, Ralph\n\n        #ralphStartPos = self.environ.find(\"**/start_point\").getPos()\n        ralphStartPos = Vec3(-51, -64, 0)\n        self.ralph = Actor(\"models/ralph\",\n                           {\"run\": \"models/ralph-run\",\n                            \"walk\": \"models/ralph-walk\"})\n        self.ralph.reparentTo(render)\n        self.ralph.setScale(2)\n        self.ralph.setPos(ralphStartPos)\n\n        self.pointer = loader.loadModel(\"models/arrow\")\n        self.pointer.setColor(1, 0, 0)\n        self.pointer.setPos(60, -60, 0)\n        self.pointer.setScale(3)\n        self.pointer.reparentTo(render)\n\n    def setAI(self):\n        # Creating AI World\n        self.AIworld = AIWorld(render)\n\n        self.accept(\"enter\", self.setMove)\n        self.accept(\"1\", self.addBlock)\n        self.accept(\"2\", self.addBigBlock)\n        self.accept(\"space\", self.addStaticObstacle)\n\n        # Movement\n        self.accept(\"arrow_left\", self.setKey, [\"left\", 1])\n        self.accept(\"arrow_right\", self.setKey, [\"right\", 1])\n        self.accept(\"arrow_up\", self.setKey, [\"up\", 1])\n        self.accept(\"arrow_down\", self.setKey, [\"down\", 1])\n        self.accept(\"arrow_left-up\", self.setKey, [\"left\", 0])\n        self.accept(\"arrow_right-up\", self.setKey, [\"right\", 0])\n        self.accept(\"arrow_up-up\", self.setKey, [\"up\", 0])\n        self.accept(\"arrow_down-up\", self.setKey, [\"down\", 0])\n\n        self.AIchar = AICharacter(\"ralph\", self.ralph, 60, 0.05, 15)\n        self.AIworld.addAiChar(self.AIchar)\n        self.AIbehaviors = self.AIchar.getAiBehaviors()\n\n        self.AIbehaviors.initPathFind(\"models/navmesh.csv\")\n\n        # AI World update\n        taskMgr.add(self.AIUpdate, \"AIUpdate\")\n\n        # Movement task\n        taskMgr.add(self.Mover, \"Mover\")\n\n        self.dirnlight1 = DirectionalLight(\"dirn_light1\")\n        self.dirnlight1.setColor((1.0, 1.0, 1.0, 1.0))\n        self.dirnlightnode1 = render.attachNewNode(self.dirnlight1)\n        self.dirnlightnode1.setHpr(0, 317, 0)\n        render.setLight(self.dirnlightnode1)\n\n    def setMove(self):\n        self.AIbehaviors.pathFindTo(self.pointer)\n        self.ralph.loop(\"run\")\n\n    def addBlock(self):\n        self.pointer_move = True\n        self.box = loader.loadModel(\"models/box\")\n        self.box.setPos(0, -60, 0)\n        self.box.setScale(1)\n        self.box.reparentTo(render)\n\n    def addBigBlock(self):\n        self.pointer_move = True\n        self.box = loader.loadModel(\"models/box\")\n        self.box.setPos(0, -60, 0)\n        self.box.setScale(2)\n        self.box.setColor(1, 1, 0)\n        self.box.reparentTo(render)\n\n    def addStaticObstacle(self):\n        if self.box != 0:\n            self.AIbehaviors.addStaticObstacle(self.box)\n            self.box = 0\n            self.pointer_move = False\n\n    # To update the AIWorld\n    def AIUpdate(self, task):\n        self.AIworld.update()\n        #if self.AIbehaviors.behaviorStatus(\"pathfollow\") == \"done\":\n        #    self.ralph.stop(\"run\")\n        #    self.ralph.pose(\"walk\", 0)\n\n        return Task.cont\n\n    def setKey(self, key, value):\n        self.keyMap[key] = value\n\n    def Mover(self, task):\n        startPos = self.pointer.getPos()\n        if self.keyMap[\"left\"] != 0:\n            self.pointer.setPos(startPos + Point3(-speed, 0, 0))\n        if self.keyMap[\"right\"] != 0:\n            self.pointer.setPos(startPos + Point3(speed, 0, 0))\n        if self.keyMap[\"up\"] != 0:\n            self.pointer.setPos(startPos + Point3(0, speed, 0))\n        if self.keyMap[\"down\"] != 0:\n            self.pointer.setPos(startPos + Point3(0, -speed, 0))\n\n        if self.pointer_move is True and self.box != 0:\n            self.box.setPos(self.pointer.getPos())\n\n        return Task.cont\n\n\nw = World()\nbase.run()\n",
  "metadata": {
    "source": "corpus_panda3d/collected_docs/1bbd6cf1_static-obstacles.py",
    "doc_type": "python",
    "file_path": "processed_documents/context_documents/db6dae55_1bbd6cf1_static-obstacles.json",
    "doc_id": "doc_10"
  }
}